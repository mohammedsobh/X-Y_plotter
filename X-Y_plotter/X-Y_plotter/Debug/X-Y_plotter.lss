
X-Y_plotter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001626  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000169a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000032  00800060  00800060  0000169a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000169a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00001734  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002849  00000000  00000000  000018fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b6a  00000000  00000000  00004145  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017aa  00000000  00000000  00004caf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000504  00000000  00000000  0000645c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000757  00000000  00000000  00006960  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e55  00000000  00000000  000070b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00008f0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	4e 41       	sbci	r20, 0x1E	; 30
      56:	4e 49       	Address 0x00000056 is out of bounds.
.word	0xffff	; ????

00000057 <pstr_inity>:
      57:	49 4e 49 54 59                                      INITY

0000005c <pstr_inf>:
      5c:	49 4e 46                                            INF

0000005f <pwr_m10>:
      5f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      6f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000077 <pwr_p10>:
      77:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      87:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf e5       	ldi	r28, 0x5F	; 95
      96:	d4 e0       	ldi	r29, 0x04	; 4
      98:	de bf       	out	0x3e, r29	; 62
      9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_clear_bss>:
      9c:	20 e0       	ldi	r18, 0x00	; 0
      9e:	a0 e6       	ldi	r26, 0x60	; 96
      a0:	b0 e0       	ldi	r27, 0x00	; 0
      a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
      a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
      a6:	a2 39       	cpi	r26, 0x92	; 146
      a8:	b2 07       	cpc	r27, r18
      aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
      ac:	0e 94 3a 03 	call	0x674	; 0x674 <main>
      b0:	0c 94 11 0b 	jmp	0x1622	; 0x1622 <_exit>

000000b4 <__bad_interrupt>:
      b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <second_value>:
//***second_value_function***
//this function take one variable, and search in it about the location of ","
//then put the characters after "," in a new array of characters
//then convert string to integer value ,then return it
double second_value (char* String)
{
      b8:	ef 92       	push	r14
      ba:	ff 92       	push	r15
      bc:	0f 93       	push	r16
      be:	1f 93       	push	r17
      c0:	cf 93       	push	r28
      c2:	df 93       	push	r29
      c4:	cd b7       	in	r28, 0x3d	; 61
      c6:	de b7       	in	r29, 0x3e	; 62
      c8:	fc 01       	movw	r30, r24
          break;
    }
    for (j=0;j<length;j++)
        h [j] = String[j+i+1];
    return (atof(h));
}
      ca:	0d b7       	in	r16, 0x3d	; 61
      cc:	1e b7       	in	r17, 0x3e	; 62
//then put the characters after "," in a new array of characters
//then convert string to integer value ,then return it
double second_value (char* String)
{
    int i,j;
    int length = strlen (String);
      ce:	dc 01       	movw	r26, r24
      d0:	0d 90       	ld	r0, X+
      d2:	00 20       	and	r0, r0
      d4:	e9 f7       	brne	.-6      	; 0xd0 <second_value+0x18>
      d6:	11 97       	sbiw	r26, 0x01	; 1
      d8:	bd 01       	movw	r22, r26
      da:	68 1b       	sub	r22, r24
      dc:	79 0b       	sbc	r23, r25
      de:	7b 01       	movw	r14, r22
    char h [length];
      e0:	8d b7       	in	r24, 0x3d	; 61
      e2:	9e b7       	in	r25, 0x3e	; 62
      e4:	86 1b       	sub	r24, r22
      e6:	97 0b       	sbc	r25, r23
      e8:	0f b6       	in	r0, 0x3f	; 63
      ea:	f8 94       	cli
      ec:	9e bf       	out	0x3e, r25	; 62
      ee:	0f be       	out	0x3f, r0	; 63
      f0:	8d bf       	out	0x3d, r24	; 61
      f2:	4d b7       	in	r20, 0x3d	; 61
      f4:	5e b7       	in	r21, 0x3e	; 62
      f6:	4f 5f       	subi	r20, 0xFF	; 255
      f8:	5f 4f       	sbci	r21, 0xFF	; 255
    for (i=0;i< length;i++)
      fa:	16 16       	cp	r1, r22
      fc:	17 06       	cpc	r1, r23
      fe:	14 f5       	brge	.+68     	; 0x144 <second_value+0x8c>
    {
        if (String [i] == ',')
     100:	80 81       	ld	r24, Z
     102:	8c 32       	cpi	r24, 0x2C	; 44
     104:	a1 f0       	breq	.+40     	; 0x12e <second_value+0x76>
     106:	df 01       	movw	r26, r30
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	20 e0       	ldi	r18, 0x00	; 0
     10c:	30 e0       	ldi	r19, 0x00	; 0
     10e:	03 c0       	rjmp	.+6      	; 0x116 <second_value+0x5e>
     110:	9d 91       	ld	r25, X+
     112:	9c 32       	cpi	r25, 0x2C	; 44
     114:	71 f0       	breq	.+28     	; 0x132 <second_value+0x7a>
double second_value (char* String)
{
    int i,j;
    int length = strlen (String);
    char h [length];
    for (i=0;i< length;i++)
     116:	2f 5f       	subi	r18, 0xFF	; 255
     118:	3f 4f       	sbci	r19, 0xFF	; 255
     11a:	e2 16       	cp	r14, r18
     11c:	f3 06       	cpc	r15, r19
     11e:	c1 f7       	brne	.-16     	; 0x110 <second_value+0x58>
     120:	08 c0       	rjmp	.+16     	; 0x132 <second_value+0x7a>
    {
        if (String [i] == ',')
          break;
    }
    for (j=0;j<length;j++)
        h [j] = String[j+i+1];
     122:	91 91       	ld	r25, Z+
     124:	9d 93       	st	X+, r25
    for (i=0;i< length;i++)
    {
        if (String [i] == ',')
          break;
    }
    for (j=0;j<length;j++)
     126:	a2 17       	cp	r26, r18
     128:	b3 07       	cpc	r27, r19
     12a:	d9 f7       	brne	.-10     	; 0x122 <second_value+0x6a>
     12c:	0b c0       	rjmp	.+22     	; 0x144 <second_value+0x8c>
double second_value (char* String)
{
    int i,j;
    int length = strlen (String);
    char h [length];
    for (i=0;i< length;i++)
     12e:	20 e0       	ldi	r18, 0x00	; 0
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	2f 5f       	subi	r18, 0xFF	; 255
     134:	3f 4f       	sbci	r19, 0xFF	; 255
     136:	e2 0f       	add	r30, r18
     138:	f3 1f       	adc	r31, r19
     13a:	da 01       	movw	r26, r20
     13c:	9a 01       	movw	r18, r20
     13e:	26 0f       	add	r18, r22
     140:	37 1f       	adc	r19, r23
     142:	ef cf       	rjmp	.-34     	; 0x122 <second_value+0x6a>
        if (String [i] == ',')
          break;
    }
    for (j=0;j<length;j++)
        h [j] = String[j+i+1];
    return (atof(h));
     144:	ca 01       	movw	r24, r20
     146:	0e 94 24 09 	call	0x1248	; 0x1248 <atof>
     14a:	bc 01       	movw	r22, r24
     14c:	99 0f       	add	r25, r25
     14e:	88 0b       	sbc	r24, r24
     150:	99 0b       	sbc	r25, r25
     152:	0e 94 b8 07 	call	0xf70	; 0xf70 <__floatsisf>
}
     156:	0f b6       	in	r0, 0x3f	; 63
     158:	f8 94       	cli
     15a:	1e bf       	out	0x3e, r17	; 62
     15c:	0f be       	out	0x3f, r0	; 63
     15e:	0d bf       	out	0x3d, r16	; 61
     160:	df 91       	pop	r29
     162:	cf 91       	pop	r28
     164:	1f 91       	pop	r17
     166:	0f 91       	pop	r16
     168:	ff 90       	pop	r15
     16a:	ef 90       	pop	r14
     16c:	08 95       	ret

0000016e <sub_function>:
//it takes two variables, one call by reference and other call by value
//call by reference is used to make a change in it, to save the new value
//this function return a value that the motor have to move
//this value could be negative or positive, it realize the direction of movements
double sub_function (double* current_pos, double new_pos)
{
     16e:	cf 92       	push	r12
     170:	df 92       	push	r13
     172:	ef 92       	push	r14
     174:	ff 92       	push	r15
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	ec 01       	movw	r28, r24
     17c:	6a 01       	movw	r12, r20
     17e:	7b 01       	movw	r14, r22
    double x = new_pos - *current_pos;
     180:	28 81       	ld	r18, Y
     182:	39 81       	ldd	r19, Y+1	; 0x01
     184:	4a 81       	ldd	r20, Y+2	; 0x02
     186:	5b 81       	ldd	r21, Y+3	; 0x03
     188:	c7 01       	movw	r24, r14
     18a:	b6 01       	movw	r22, r12
     18c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__subsf3>
    *current_pos = new_pos;
     190:	c8 82       	st	Y, r12
     192:	d9 82       	std	Y+1, r13	; 0x01
     194:	ea 82       	std	Y+2, r14	; 0x02
     196:	fb 82       	std	Y+3, r15	; 0x03
    return x;
     198:	df 91       	pop	r29
     19a:	cf 91       	pop	r28
     19c:	ff 90       	pop	r15
     19e:	ef 90       	pop	r14
     1a0:	df 90       	pop	r13
     1a2:	cf 90       	pop	r12
     1a4:	08 95       	ret

000001a6 <pinChange>:
}

void Lcd4_Shift_Left()
{
	Lcd4_Cmd(0x01);
	Lcd4_Cmd(0x08);
     1a6:	67 2b       	or	r22, r23
     1a8:	09 f0       	breq	.+2      	; 0x1ac <pinChange+0x6>
     1aa:	9f c0       	rjmp	.+318    	; 0x2ea <pinChange+0x144>
     1ac:	00 97       	sbiw	r24, 0x00	; 0
     1ae:	11 f4       	brne	.+4      	; 0x1b4 <pinChange+0xe>
     1b0:	d8 98       	cbi	0x1b, 0	; 27
     1b2:	08 95       	ret
     1b4:	81 30       	cpi	r24, 0x01	; 1
     1b6:	91 05       	cpc	r25, r1
     1b8:	11 f4       	brne	.+4      	; 0x1be <pinChange+0x18>
     1ba:	d9 98       	cbi	0x1b, 1	; 27
     1bc:	08 95       	ret
     1be:	82 30       	cpi	r24, 0x02	; 2
     1c0:	91 05       	cpc	r25, r1
     1c2:	11 f4       	brne	.+4      	; 0x1c8 <pinChange+0x22>
     1c4:	da 98       	cbi	0x1b, 2	; 27
     1c6:	08 95       	ret
     1c8:	83 30       	cpi	r24, 0x03	; 3
     1ca:	91 05       	cpc	r25, r1
     1cc:	11 f4       	brne	.+4      	; 0x1d2 <pinChange+0x2c>
     1ce:	db 98       	cbi	0x1b, 3	; 27
     1d0:	08 95       	ret
     1d2:	84 30       	cpi	r24, 0x04	; 4
     1d4:	91 05       	cpc	r25, r1
     1d6:	11 f4       	brne	.+4      	; 0x1dc <pinChange+0x36>
     1d8:	dc 98       	cbi	0x1b, 4	; 27
     1da:	08 95       	ret
     1dc:	85 30       	cpi	r24, 0x05	; 5
     1de:	91 05       	cpc	r25, r1
     1e0:	11 f4       	brne	.+4      	; 0x1e6 <pinChange+0x40>
     1e2:	dd 98       	cbi	0x1b, 5	; 27
     1e4:	08 95       	ret
     1e6:	86 30       	cpi	r24, 0x06	; 6
     1e8:	91 05       	cpc	r25, r1
     1ea:	11 f4       	brne	.+4      	; 0x1f0 <pinChange+0x4a>
     1ec:	de 98       	cbi	0x1b, 6	; 27
     1ee:	08 95       	ret
     1f0:	87 30       	cpi	r24, 0x07	; 7
     1f2:	91 05       	cpc	r25, r1
     1f4:	11 f4       	brne	.+4      	; 0x1fa <pinChange+0x54>
     1f6:	df 98       	cbi	0x1b, 7	; 27
     1f8:	08 95       	ret
     1fa:	8a 30       	cpi	r24, 0x0A	; 10
     1fc:	91 05       	cpc	r25, r1
     1fe:	11 f4       	brne	.+4      	; 0x204 <pinChange+0x5e>
     200:	c0 98       	cbi	0x18, 0	; 24
     202:	08 95       	ret
     204:	8b 30       	cpi	r24, 0x0B	; 11
     206:	91 05       	cpc	r25, r1
     208:	11 f4       	brne	.+4      	; 0x20e <pinChange+0x68>
     20a:	c1 98       	cbi	0x18, 1	; 24
     20c:	08 95       	ret
     20e:	8c 30       	cpi	r24, 0x0C	; 12
     210:	91 05       	cpc	r25, r1
     212:	11 f4       	brne	.+4      	; 0x218 <pinChange+0x72>
     214:	c2 98       	cbi	0x18, 2	; 24
     216:	08 95       	ret
     218:	8d 30       	cpi	r24, 0x0D	; 13
     21a:	91 05       	cpc	r25, r1
     21c:	11 f4       	brne	.+4      	; 0x222 <pinChange+0x7c>
     21e:	c3 98       	cbi	0x18, 3	; 24
     220:	08 95       	ret
     222:	8e 30       	cpi	r24, 0x0E	; 14
     224:	91 05       	cpc	r25, r1
     226:	11 f4       	brne	.+4      	; 0x22c <pinChange+0x86>
     228:	c4 98       	cbi	0x18, 4	; 24
     22a:	08 95       	ret
     22c:	8f 30       	cpi	r24, 0x0F	; 15
     22e:	91 05       	cpc	r25, r1
     230:	11 f4       	brne	.+4      	; 0x236 <pinChange+0x90>
     232:	c5 98       	cbi	0x18, 5	; 24
     234:	08 95       	ret
     236:	80 31       	cpi	r24, 0x10	; 16
     238:	91 05       	cpc	r25, r1
     23a:	11 f4       	brne	.+4      	; 0x240 <pinChange+0x9a>
     23c:	c6 98       	cbi	0x18, 6	; 24
     23e:	08 95       	ret
     240:	81 31       	cpi	r24, 0x11	; 17
     242:	91 05       	cpc	r25, r1
     244:	11 f4       	brne	.+4      	; 0x24a <pinChange+0xa4>
     246:	c7 98       	cbi	0x18, 7	; 24
     248:	08 95       	ret
     24a:	84 31       	cpi	r24, 0x14	; 20
     24c:	91 05       	cpc	r25, r1
     24e:	11 f4       	brne	.+4      	; 0x254 <pinChange+0xae>
     250:	a8 98       	cbi	0x15, 0	; 21
     252:	08 95       	ret
     254:	85 31       	cpi	r24, 0x15	; 21
     256:	91 05       	cpc	r25, r1
     258:	11 f4       	brne	.+4      	; 0x25e <pinChange+0xb8>
     25a:	a9 98       	cbi	0x15, 1	; 21
     25c:	08 95       	ret
     25e:	86 31       	cpi	r24, 0x16	; 22
     260:	91 05       	cpc	r25, r1
     262:	11 f4       	brne	.+4      	; 0x268 <pinChange+0xc2>
     264:	aa 98       	cbi	0x15, 2	; 21
     266:	08 95       	ret
     268:	87 31       	cpi	r24, 0x17	; 23
     26a:	91 05       	cpc	r25, r1
     26c:	11 f4       	brne	.+4      	; 0x272 <pinChange+0xcc>
     26e:	ab 98       	cbi	0x15, 3	; 21
     270:	08 95       	ret
     272:	88 31       	cpi	r24, 0x18	; 24
     274:	91 05       	cpc	r25, r1
     276:	11 f4       	brne	.+4      	; 0x27c <pinChange+0xd6>
     278:	ac 98       	cbi	0x15, 4	; 21
     27a:	08 95       	ret
     27c:	89 31       	cpi	r24, 0x19	; 25
     27e:	91 05       	cpc	r25, r1
     280:	11 f4       	brne	.+4      	; 0x286 <pinChange+0xe0>
     282:	ad 98       	cbi	0x15, 5	; 21
     284:	08 95       	ret
     286:	8a 31       	cpi	r24, 0x1A	; 26
     288:	91 05       	cpc	r25, r1
     28a:	11 f4       	brne	.+4      	; 0x290 <pinChange+0xea>
     28c:	ae 98       	cbi	0x15, 6	; 21
     28e:	08 95       	ret
     290:	8b 31       	cpi	r24, 0x1B	; 27
     292:	91 05       	cpc	r25, r1
     294:	11 f4       	brne	.+4      	; 0x29a <pinChange+0xf4>
     296:	af 98       	cbi	0x15, 7	; 21
     298:	08 95       	ret
     29a:	8e 31       	cpi	r24, 0x1E	; 30
     29c:	91 05       	cpc	r25, r1
     29e:	11 f4       	brne	.+4      	; 0x2a4 <pinChange+0xfe>
     2a0:	90 98       	cbi	0x12, 0	; 18
     2a2:	08 95       	ret
     2a4:	8f 31       	cpi	r24, 0x1F	; 31
     2a6:	91 05       	cpc	r25, r1
     2a8:	11 f4       	brne	.+4      	; 0x2ae <pinChange+0x108>
     2aa:	91 98       	cbi	0x12, 1	; 18
     2ac:	08 95       	ret
     2ae:	80 32       	cpi	r24, 0x20	; 32
     2b0:	91 05       	cpc	r25, r1
     2b2:	11 f4       	brne	.+4      	; 0x2b8 <pinChange+0x112>
     2b4:	92 98       	cbi	0x12, 2	; 18
     2b6:	08 95       	ret
     2b8:	81 32       	cpi	r24, 0x21	; 33
     2ba:	91 05       	cpc	r25, r1
     2bc:	11 f4       	brne	.+4      	; 0x2c2 <pinChange+0x11c>
     2be:	93 98       	cbi	0x12, 3	; 18
     2c0:	08 95       	ret
     2c2:	82 32       	cpi	r24, 0x22	; 34
     2c4:	91 05       	cpc	r25, r1
     2c6:	11 f4       	brne	.+4      	; 0x2cc <pinChange+0x126>
     2c8:	94 98       	cbi	0x12, 4	; 18
     2ca:	08 95       	ret
     2cc:	83 32       	cpi	r24, 0x23	; 35
     2ce:	91 05       	cpc	r25, r1
     2d0:	11 f4       	brne	.+4      	; 0x2d6 <pinChange+0x130>
     2d2:	95 98       	cbi	0x12, 5	; 18
     2d4:	08 95       	ret
     2d6:	84 32       	cpi	r24, 0x24	; 36
     2d8:	91 05       	cpc	r25, r1
     2da:	11 f4       	brne	.+4      	; 0x2e0 <pinChange+0x13a>
     2dc:	96 98       	cbi	0x12, 6	; 18
     2de:	08 95       	ret
     2e0:	85 97       	sbiw	r24, 0x25	; 37
     2e2:	09 f0       	breq	.+2      	; 0x2e6 <pinChange+0x140>
     2e4:	9f c0       	rjmp	.+318    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     2e6:	97 98       	cbi	0x12, 7	; 18
     2e8:	08 95       	ret
     2ea:	00 97       	sbiw	r24, 0x00	; 0
     2ec:	11 f4       	brne	.+4      	; 0x2f2 <pinChange+0x14c>
     2ee:	d8 9a       	sbi	0x1b, 0	; 27
     2f0:	08 95       	ret
     2f2:	81 30       	cpi	r24, 0x01	; 1
     2f4:	91 05       	cpc	r25, r1
     2f6:	11 f4       	brne	.+4      	; 0x2fc <pinChange+0x156>
     2f8:	d9 9a       	sbi	0x1b, 1	; 27
     2fa:	08 95       	ret
     2fc:	82 30       	cpi	r24, 0x02	; 2
     2fe:	91 05       	cpc	r25, r1
     300:	11 f4       	brne	.+4      	; 0x306 <pinChange+0x160>
     302:	da 9a       	sbi	0x1b, 2	; 27
     304:	08 95       	ret
     306:	83 30       	cpi	r24, 0x03	; 3
     308:	91 05       	cpc	r25, r1
     30a:	11 f4       	brne	.+4      	; 0x310 <pinChange+0x16a>
     30c:	db 9a       	sbi	0x1b, 3	; 27
     30e:	08 95       	ret
     310:	84 30       	cpi	r24, 0x04	; 4
     312:	91 05       	cpc	r25, r1
     314:	11 f4       	brne	.+4      	; 0x31a <pinChange+0x174>
     316:	dc 9a       	sbi	0x1b, 4	; 27
     318:	08 95       	ret
     31a:	85 30       	cpi	r24, 0x05	; 5
     31c:	91 05       	cpc	r25, r1
     31e:	11 f4       	brne	.+4      	; 0x324 <pinChange+0x17e>
     320:	dd 9a       	sbi	0x1b, 5	; 27
     322:	08 95       	ret
     324:	86 30       	cpi	r24, 0x06	; 6
     326:	91 05       	cpc	r25, r1
     328:	11 f4       	brne	.+4      	; 0x32e <pinChange+0x188>
     32a:	de 9a       	sbi	0x1b, 6	; 27
     32c:	08 95       	ret
     32e:	87 30       	cpi	r24, 0x07	; 7
     330:	91 05       	cpc	r25, r1
     332:	11 f4       	brne	.+4      	; 0x338 <pinChange+0x192>
     334:	df 9a       	sbi	0x1b, 7	; 27
     336:	08 95       	ret
     338:	8a 30       	cpi	r24, 0x0A	; 10
     33a:	91 05       	cpc	r25, r1
     33c:	11 f4       	brne	.+4      	; 0x342 <pinChange+0x19c>
     33e:	c0 9a       	sbi	0x18, 0	; 24
     340:	08 95       	ret
     342:	8b 30       	cpi	r24, 0x0B	; 11
     344:	91 05       	cpc	r25, r1
     346:	11 f4       	brne	.+4      	; 0x34c <pinChange+0x1a6>
     348:	c1 9a       	sbi	0x18, 1	; 24
     34a:	08 95       	ret
     34c:	8c 30       	cpi	r24, 0x0C	; 12
     34e:	91 05       	cpc	r25, r1
     350:	11 f4       	brne	.+4      	; 0x356 <pinChange+0x1b0>
     352:	c2 9a       	sbi	0x18, 2	; 24
     354:	08 95       	ret
     356:	8d 30       	cpi	r24, 0x0D	; 13
     358:	91 05       	cpc	r25, r1
     35a:	11 f4       	brne	.+4      	; 0x360 <pinChange+0x1ba>
     35c:	c3 9a       	sbi	0x18, 3	; 24
     35e:	08 95       	ret
     360:	8e 30       	cpi	r24, 0x0E	; 14
     362:	91 05       	cpc	r25, r1
     364:	11 f4       	brne	.+4      	; 0x36a <pinChange+0x1c4>
     366:	c4 9a       	sbi	0x18, 4	; 24
     368:	08 95       	ret
     36a:	8f 30       	cpi	r24, 0x0F	; 15
     36c:	91 05       	cpc	r25, r1
     36e:	11 f4       	brne	.+4      	; 0x374 <pinChange+0x1ce>
     370:	c5 9a       	sbi	0x18, 5	; 24
     372:	08 95       	ret
     374:	80 31       	cpi	r24, 0x10	; 16
     376:	91 05       	cpc	r25, r1
     378:	11 f4       	brne	.+4      	; 0x37e <pinChange+0x1d8>
     37a:	c6 9a       	sbi	0x18, 6	; 24
     37c:	08 95       	ret
     37e:	81 31       	cpi	r24, 0x11	; 17
     380:	91 05       	cpc	r25, r1
     382:	11 f4       	brne	.+4      	; 0x388 <pinChange+0x1e2>
     384:	c7 9a       	sbi	0x18, 7	; 24
     386:	08 95       	ret
     388:	84 31       	cpi	r24, 0x14	; 20
     38a:	91 05       	cpc	r25, r1
     38c:	11 f4       	brne	.+4      	; 0x392 <pinChange+0x1ec>
     38e:	a8 9a       	sbi	0x15, 0	; 21
     390:	08 95       	ret
     392:	85 31       	cpi	r24, 0x15	; 21
     394:	91 05       	cpc	r25, r1
     396:	11 f4       	brne	.+4      	; 0x39c <pinChange+0x1f6>
     398:	a9 9a       	sbi	0x15, 1	; 21
     39a:	08 95       	ret
     39c:	86 31       	cpi	r24, 0x16	; 22
     39e:	91 05       	cpc	r25, r1
     3a0:	11 f4       	brne	.+4      	; 0x3a6 <pinChange+0x200>
     3a2:	aa 9a       	sbi	0x15, 2	; 21
     3a4:	08 95       	ret
     3a6:	87 31       	cpi	r24, 0x17	; 23
     3a8:	91 05       	cpc	r25, r1
     3aa:	11 f4       	brne	.+4      	; 0x3b0 <pinChange+0x20a>
     3ac:	ab 9a       	sbi	0x15, 3	; 21
     3ae:	08 95       	ret
     3b0:	88 31       	cpi	r24, 0x18	; 24
     3b2:	91 05       	cpc	r25, r1
     3b4:	11 f4       	brne	.+4      	; 0x3ba <pinChange+0x214>
     3b6:	ac 9a       	sbi	0x15, 4	; 21
     3b8:	08 95       	ret
     3ba:	89 31       	cpi	r24, 0x19	; 25
     3bc:	91 05       	cpc	r25, r1
     3be:	11 f4       	brne	.+4      	; 0x3c4 <pinChange+0x21e>
     3c0:	ad 9a       	sbi	0x15, 5	; 21
     3c2:	08 95       	ret
     3c4:	8a 31       	cpi	r24, 0x1A	; 26
     3c6:	91 05       	cpc	r25, r1
     3c8:	11 f4       	brne	.+4      	; 0x3ce <pinChange+0x228>
     3ca:	ae 9a       	sbi	0x15, 6	; 21
     3cc:	08 95       	ret
     3ce:	8b 31       	cpi	r24, 0x1B	; 27
     3d0:	91 05       	cpc	r25, r1
     3d2:	11 f4       	brne	.+4      	; 0x3d8 <pinChange+0x232>
     3d4:	af 9a       	sbi	0x15, 7	; 21
     3d6:	08 95       	ret
     3d8:	8e 31       	cpi	r24, 0x1E	; 30
     3da:	91 05       	cpc	r25, r1
     3dc:	11 f4       	brne	.+4      	; 0x3e2 <pinChange+0x23c>
     3de:	90 9a       	sbi	0x12, 0	; 18
     3e0:	08 95       	ret
     3e2:	8f 31       	cpi	r24, 0x1F	; 31
     3e4:	91 05       	cpc	r25, r1
     3e6:	11 f4       	brne	.+4      	; 0x3ec <pinChange+0x246>
     3e8:	91 9a       	sbi	0x12, 1	; 18
     3ea:	08 95       	ret
     3ec:	80 32       	cpi	r24, 0x20	; 32
     3ee:	91 05       	cpc	r25, r1
     3f0:	11 f4       	brne	.+4      	; 0x3f6 <pinChange+0x250>
     3f2:	92 9a       	sbi	0x12, 2	; 18
     3f4:	08 95       	ret
     3f6:	81 32       	cpi	r24, 0x21	; 33
     3f8:	91 05       	cpc	r25, r1
     3fa:	11 f4       	brne	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fc:	93 9a       	sbi	0x12, 3	; 18
     3fe:	08 95       	ret
     400:	82 32       	cpi	r24, 0x22	; 34
     402:	91 05       	cpc	r25, r1
     404:	11 f4       	brne	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     406:	94 9a       	sbi	0x12, 4	; 18
     408:	08 95       	ret
     40a:	83 32       	cpi	r24, 0x23	; 35
     40c:	91 05       	cpc	r25, r1
     40e:	11 f4       	brne	.+4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     410:	95 9a       	sbi	0x12, 5	; 18
     412:	08 95       	ret
     414:	84 32       	cpi	r24, 0x24	; 36
     416:	91 05       	cpc	r25, r1
     418:	11 f4       	brne	.+4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     41a:	96 9a       	sbi	0x12, 6	; 18
     41c:	08 95       	ret
     41e:	85 97       	sbiw	r24, 0x25	; 37
     420:	09 f4       	brne	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     422:	97 9a       	sbi	0x12, 7	; 18
     424:	08 95       	ret

00000426 <Lcd4_Port>:
     426:	cf 93       	push	r28
     428:	c8 2f       	mov	r28, r24
     42a:	80 ff       	sbrs	r24, 0
     42c:	07 c0       	rjmp	.+14     	; 0x43c <Lcd4_Port+0x16>
     42e:	61 e0       	ldi	r22, 0x01	; 1
     430:	70 e0       	ldi	r23, 0x00	; 0
     432:	8a e0       	ldi	r24, 0x0A	; 10
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <pinChange>
     43a:	06 c0       	rjmp	.+12     	; 0x448 <Lcd4_Port+0x22>
     43c:	60 e0       	ldi	r22, 0x00	; 0
     43e:	70 e0       	ldi	r23, 0x00	; 0
     440:	8a e0       	ldi	r24, 0x0A	; 10
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <pinChange>
     448:	c1 ff       	sbrs	r28, 1
     44a:	07 c0       	rjmp	.+14     	; 0x45a <Lcd4_Port+0x34>
     44c:	61 e0       	ldi	r22, 0x01	; 1
     44e:	70 e0       	ldi	r23, 0x00	; 0
     450:	8b e0       	ldi	r24, 0x0B	; 11
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <pinChange>
     458:	06 c0       	rjmp	.+12     	; 0x466 <__stack+0x7>
     45a:	60 e0       	ldi	r22, 0x00	; 0
     45c:	70 e0       	ldi	r23, 0x00	; 0
     45e:	8b e0       	ldi	r24, 0x0B	; 11
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <pinChange>
     466:	c2 ff       	sbrs	r28, 2
     468:	07 c0       	rjmp	.+14     	; 0x478 <__stack+0x19>
     46a:	61 e0       	ldi	r22, 0x01	; 1
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	8c e0       	ldi	r24, 0x0C	; 12
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <pinChange>
     476:	06 c0       	rjmp	.+12     	; 0x484 <__stack+0x25>
     478:	60 e0       	ldi	r22, 0x00	; 0
     47a:	70 e0       	ldi	r23, 0x00	; 0
     47c:	8c e0       	ldi	r24, 0x0C	; 12
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <pinChange>
     484:	c3 ff       	sbrs	r28, 3
     486:	07 c0       	rjmp	.+14     	; 0x496 <__stack+0x37>
     488:	61 e0       	ldi	r22, 0x01	; 1
     48a:	70 e0       	ldi	r23, 0x00	; 0
     48c:	8d e0       	ldi	r24, 0x0D	; 13
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <pinChange>
     494:	06 c0       	rjmp	.+12     	; 0x4a2 <__stack+0x43>
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	8d e0       	ldi	r24, 0x0D	; 13
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <pinChange>
     4a2:	cf 91       	pop	r28
     4a4:	08 95       	ret

000004a6 <Lcd4_Cmd>:
     4a6:	cf 93       	push	r28
     4a8:	c8 2f       	mov	r28, r24
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	8e e0       	ldi	r24, 0x0E	; 14
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <pinChange>
     4b6:	8c 2f       	mov	r24, r28
     4b8:	0e 94 13 02 	call	0x426	; 0x426 <Lcd4_Port>
     4bc:	61 e0       	ldi	r22, 0x01	; 1
     4be:	70 e0       	ldi	r23, 0x00	; 0
     4c0:	8f e0       	ldi	r24, 0x0F	; 15
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <pinChange>
     4c8:	8f e9       	ldi	r24, 0x9F	; 159
     4ca:	9f e0       	ldi	r25, 0x0F	; 15
     4cc:	01 97       	sbiw	r24, 0x01	; 1
     4ce:	f1 f7       	brne	.-4      	; 0x4cc <Lcd4_Cmd+0x26>
     4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <Lcd4_Cmd+0x2c>
     4d2:	00 00       	nop
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	70 e0       	ldi	r23, 0x00	; 0
     4d8:	8f e0       	ldi	r24, 0x0F	; 15
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <pinChange>
     4e0:	8f e9       	ldi	r24, 0x9F	; 159
     4e2:	9f e0       	ldi	r25, 0x0F	; 15
     4e4:	01 97       	sbiw	r24, 0x01	; 1
     4e6:	f1 f7       	brne	.-4      	; 0x4e4 <Lcd4_Cmd+0x3e>
     4e8:	00 c0       	rjmp	.+0      	; 0x4ea <Lcd4_Cmd+0x44>
     4ea:	00 00       	nop
     4ec:	cf 91       	pop	r28
     4ee:	08 95       	ret

000004f0 <Lcd4_Clear>:
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Lcd4_Cmd>
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Lcd4_Cmd>
     4fc:	08 95       	ret

000004fe <Lcd4_Set_Cursor>:
     4fe:	cf 93       	push	r28
     500:	c6 2f       	mov	r28, r22
     502:	81 30       	cpi	r24, 0x01	; 1
     504:	59 f4       	brne	.+22     	; 0x51c <Lcd4_Set_Cursor+0x1e>
     506:	80 e8       	ldi	r24, 0x80	; 128
     508:	86 0f       	add	r24, r22
     50a:	82 95       	swap	r24
     50c:	8f 70       	andi	r24, 0x0F	; 15
     50e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Lcd4_Cmd>
     512:	8c 2f       	mov	r24, r28
     514:	8f 70       	andi	r24, 0x0F	; 15
     516:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Lcd4_Cmd>
     51a:	0c c0       	rjmp	.+24     	; 0x534 <Lcd4_Set_Cursor+0x36>
     51c:	82 30       	cpi	r24, 0x02	; 2
     51e:	51 f4       	brne	.+20     	; 0x534 <Lcd4_Set_Cursor+0x36>
     520:	80 ec       	ldi	r24, 0xC0	; 192
     522:	86 0f       	add	r24, r22
     524:	82 95       	swap	r24
     526:	8f 70       	andi	r24, 0x0F	; 15
     528:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Lcd4_Cmd>
     52c:	8c 2f       	mov	r24, r28
     52e:	8f 70       	andi	r24, 0x0F	; 15
     530:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Lcd4_Cmd>
     534:	cf 91       	pop	r28
     536:	08 95       	ret

00000538 <Lcd4_Init>:
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	0e 94 13 02 	call	0x426	; 0x426 <Lcd4_Port>
     53e:	2f ef       	ldi	r18, 0xFF	; 255
     540:	89 ef       	ldi	r24, 0xF9	; 249
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	21 50       	subi	r18, 0x01	; 1
     546:	80 40       	sbci	r24, 0x00	; 0
     548:	90 40       	sbci	r25, 0x00	; 0
     54a:	e1 f7       	brne	.-8      	; 0x544 <Lcd4_Init+0xc>
     54c:	00 c0       	rjmp	.+0      	; 0x54e <Lcd4_Init+0x16>
     54e:	00 00       	nop
     550:	83 e0       	ldi	r24, 0x03	; 3
     552:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Lcd4_Cmd>
     556:	8f e1       	ldi	r24, 0x1F	; 31
     558:	9e e4       	ldi	r25, 0x4E	; 78
     55a:	01 97       	sbiw	r24, 0x01	; 1
     55c:	f1 f7       	brne	.-4      	; 0x55a <Lcd4_Init+0x22>
     55e:	00 c0       	rjmp	.+0      	; 0x560 <Lcd4_Init+0x28>
     560:	00 00       	nop
     562:	83 e0       	ldi	r24, 0x03	; 3
     564:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Lcd4_Cmd>
     568:	8f ed       	ldi	r24, 0xDF	; 223
     56a:	9b ea       	ldi	r25, 0xAB	; 171
     56c:	01 97       	sbiw	r24, 0x01	; 1
     56e:	f1 f7       	brne	.-4      	; 0x56c <Lcd4_Init+0x34>
     570:	00 c0       	rjmp	.+0      	; 0x572 <Lcd4_Init+0x3a>
     572:	00 00       	nop
     574:	83 e0       	ldi	r24, 0x03	; 3
     576:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Lcd4_Cmd>
     57a:	82 e0       	ldi	r24, 0x02	; 2
     57c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Lcd4_Cmd>
     580:	82 e0       	ldi	r24, 0x02	; 2
     582:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Lcd4_Cmd>
     586:	88 e0       	ldi	r24, 0x08	; 8
     588:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Lcd4_Cmd>
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Lcd4_Cmd>
     592:	8c e0       	ldi	r24, 0x0C	; 12
     594:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Lcd4_Cmd>
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Lcd4_Cmd>
     59e:	86 e0       	ldi	r24, 0x06	; 6
     5a0:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Lcd4_Cmd>
     5a4:	08 95       	ret

000005a6 <Lcd4_Write_Char>:
     5a6:	cf 93       	push	r28
     5a8:	c8 2f       	mov	r28, r24
     5aa:	61 e0       	ldi	r22, 0x01	; 1
     5ac:	70 e0       	ldi	r23, 0x00	; 0
     5ae:	8e e0       	ldi	r24, 0x0E	; 14
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <pinChange>
     5b6:	8c 2f       	mov	r24, r28
     5b8:	82 95       	swap	r24
     5ba:	8f 70       	andi	r24, 0x0F	; 15
     5bc:	0e 94 13 02 	call	0x426	; 0x426 <Lcd4_Port>
     5c0:	61 e0       	ldi	r22, 0x01	; 1
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	8f e0       	ldi	r24, 0x0F	; 15
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <pinChange>
     5cc:	8f e9       	ldi	r24, 0x9F	; 159
     5ce:	9f e0       	ldi	r25, 0x0F	; 15
     5d0:	01 97       	sbiw	r24, 0x01	; 1
     5d2:	f1 f7       	brne	.-4      	; 0x5d0 <Lcd4_Write_Char+0x2a>
     5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <Lcd4_Write_Char+0x30>
     5d6:	00 00       	nop
     5d8:	60 e0       	ldi	r22, 0x00	; 0
     5da:	70 e0       	ldi	r23, 0x00	; 0
     5dc:	8f e0       	ldi	r24, 0x0F	; 15
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <pinChange>
     5e4:	8f e9       	ldi	r24, 0x9F	; 159
     5e6:	9f e0       	ldi	r25, 0x0F	; 15
     5e8:	01 97       	sbiw	r24, 0x01	; 1
     5ea:	f1 f7       	brne	.-4      	; 0x5e8 <Lcd4_Write_Char+0x42>
     5ec:	00 c0       	rjmp	.+0      	; 0x5ee <Lcd4_Write_Char+0x48>
     5ee:	00 00       	nop
     5f0:	8c 2f       	mov	r24, r28
     5f2:	8f 70       	andi	r24, 0x0F	; 15
     5f4:	0e 94 13 02 	call	0x426	; 0x426 <Lcd4_Port>
     5f8:	61 e0       	ldi	r22, 0x01	; 1
     5fa:	70 e0       	ldi	r23, 0x00	; 0
     5fc:	8f e0       	ldi	r24, 0x0F	; 15
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <pinChange>
     604:	8f e9       	ldi	r24, 0x9F	; 159
     606:	9f e0       	ldi	r25, 0x0F	; 15
     608:	01 97       	sbiw	r24, 0x01	; 1
     60a:	f1 f7       	brne	.-4      	; 0x608 <Lcd4_Write_Char+0x62>
     60c:	00 c0       	rjmp	.+0      	; 0x60e <Lcd4_Write_Char+0x68>
     60e:	00 00       	nop
     610:	60 e0       	ldi	r22, 0x00	; 0
     612:	70 e0       	ldi	r23, 0x00	; 0
     614:	8f e0       	ldi	r24, 0x0F	; 15
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <pinChange>
     61c:	8f e9       	ldi	r24, 0x9F	; 159
     61e:	9f e0       	ldi	r25, 0x0F	; 15
     620:	01 97       	sbiw	r24, 0x01	; 1
     622:	f1 f7       	brne	.-4      	; 0x620 <Lcd4_Write_Char+0x7a>
     624:	00 c0       	rjmp	.+0      	; 0x626 <Lcd4_Write_Char+0x80>
     626:	00 00       	nop
     628:	cf 91       	pop	r28
     62a:	08 95       	ret

0000062c <Lcd4_Write_String>:
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	ec 01       	movw	r28, r24
     632:	88 81       	ld	r24, Y
     634:	88 23       	and	r24, r24
     636:	31 f0       	breq	.+12     	; 0x644 <Lcd4_Write_String+0x18>
     638:	21 96       	adiw	r28, 0x01	; 1
     63a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <Lcd4_Write_Char>
     63e:	89 91       	ld	r24, Y+
     640:	81 11       	cpse	r24, r1
     642:	fb cf       	rjmp	.-10     	; 0x63a <Lcd4_Write_String+0xe>
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	08 95       	ret

0000064a <Init>:
		}
	}
}
void Init(void)
{
	StepperInit(16,1000);
     64a:	68 ee       	ldi	r22, 0xE8	; 232
     64c:	73 e0       	ldi	r23, 0x03	; 3
     64e:	80 e1       	ldi	r24, 0x10	; 16
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	0e 94 09 06 	call	0xc12	; 0xc12 <StepperInit>
	DDRC |=(1<<PC0)|(1<<PC1)|(1<<PC2)|(1<<PC3)|(1<<PC4)|(1<<PC5)|(1<<PC6);
     656:	84 b3       	in	r24, 0x14	; 20
     658:	8f 67       	ori	r24, 0x7F	; 127
     65a:	84 bb       	out	0x14, r24	; 20
	DDRB |=(1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)|(1<<PB4)|(1<<PB5);
     65c:	87 b3       	in	r24, 0x17	; 23
     65e:	8f 63       	ori	r24, 0x3F	; 63
     660:	87 bb       	out	0x17, r24	; 23
	UART_Init(9600);
     662:	60 e8       	ldi	r22, 0x80	; 128
     664:	75 e2       	ldi	r23, 0x25	; 37
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <UART_Init>
	//UART_INIT();
	Lcd4_Init();
     66e:	0e 94 9c 02 	call	0x538	; 0x538 <Lcd4_Init>
     672:	08 95       	ret

00000674 <main>:
double x;
double y;
char String [20] ;
int main(void)
{
	Init();
     674:	0e 94 25 03 	call	0x64a	; 0x64a <Init>
	while (1)
	{
		UART_RxString(String);
     678:	8a e7       	ldi	r24, 0x7A	; 122
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0e 94 f0 06 	call	0xde0	; 0xde0 <UART_RxString>
		//Recive_Data(String);
		Lcd4_Init();
     680:	0e 94 9c 02 	call	0x538	; 0x538 <Lcd4_Init>
		Lcd4_Clear();
     684:	0e 94 78 02 	call	0x4f0	; 0x4f0 <Lcd4_Clear>
		Lcd4_Set_Cursor(1,1);
     688:	61 e0       	ldi	r22, 0x01	; 1
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <Lcd4_Set_Cursor>
		Lcd4_Write_String(String);
     690:	8a e7       	ldi	r24, 0x7A	; 122
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	0e 94 16 03 	call	0x62c	; 0x62c <Lcd4_Write_String>
		value_1 = atoi(String);           //extract first value
     698:	8a e7       	ldi	r24, 0x7A	; 122
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	0e 94 28 09 	call	0x1250	; 0x1250 <atoi>
     6a0:	bc 01       	movw	r22, r24
     6a2:	99 0f       	add	r25, r25
     6a4:	88 0b       	sbc	r24, r24
     6a6:	99 0b       	sbc	r25, r25
     6a8:	0e 94 b8 07 	call	0xf70	; 0xf70 <__floatsisf>
     6ac:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <value_1>
     6b0:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <value_1+0x1>
     6b4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <value_1+0x2>
     6b8:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <value_1+0x3>
		value_2 = second_value (String); //call function to extract second value
     6bc:	8a e7       	ldi	r24, 0x7A	; 122
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	0e 94 5c 00 	call	0xb8	; 0xb8 <second_value>
     6c4:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <value_2>
     6c8:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <value_2+0x1>
     6cc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <value_2+0x2>
     6d0:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <value_2+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6d4:	2f ef       	ldi	r18, 0xFF	; 255
     6d6:	81 ee       	ldi	r24, 0xE1	; 225
     6d8:	94 e0       	ldi	r25, 0x04	; 4
     6da:	21 50       	subi	r18, 0x01	; 1
     6dc:	80 40       	sbci	r24, 0x00	; 0
     6de:	90 40       	sbci	r25, 0x00	; 0
     6e0:	e1 f7       	brne	.-8      	; 0x6da <main+0x66>
     6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <main+0x70>
     6e4:	00 00       	nop
		
		_delay_ms(100);
		if (!(value_1>250||value_2>250||value_1<0||value_2<0)) // if the values don't skip the plate ,use it
     6e6:	c0 90 72 00 	lds	r12, 0x0072	; 0x800072 <value_1>
     6ea:	d0 90 73 00 	lds	r13, 0x0073	; 0x800073 <value_1+0x1>
     6ee:	e0 90 74 00 	lds	r14, 0x0074	; 0x800074 <value_1+0x2>
     6f2:	f0 90 75 00 	lds	r15, 0x0075	; 0x800075 <value_1+0x3>
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	4a e7       	ldi	r20, 0x7A	; 122
     6fc:	53 e4       	ldi	r21, 0x43	; 67
     6fe:	c7 01       	movw	r24, r14
     700:	b6 01       	movw	r22, r12
     702:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__gesf2>
     706:	18 16       	cp	r1, r24
     708:	0c f4       	brge	.+2      	; 0x70c <main+0x98>
     70a:	46 c0       	rjmp	.+140    	; 0x798 <main+0x124>
     70c:	80 90 6e 00 	lds	r8, 0x006E	; 0x80006e <value_2>
     710:	90 90 6f 00 	lds	r9, 0x006F	; 0x80006f <value_2+0x1>
     714:	a0 90 70 00 	lds	r10, 0x0070	; 0x800070 <value_2+0x2>
     718:	b0 90 71 00 	lds	r11, 0x0071	; 0x800071 <value_2+0x3>
     71c:	20 e0       	ldi	r18, 0x00	; 0
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	4a e7       	ldi	r20, 0x7A	; 122
     722:	53 e4       	ldi	r21, 0x43	; 67
     724:	c5 01       	movw	r24, r10
     726:	b4 01       	movw	r22, r8
     728:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__gesf2>
     72c:	18 16       	cp	r1, r24
     72e:	a4 f1       	brlt	.+104    	; 0x798 <main+0x124>
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	a9 01       	movw	r20, r18
     736:	c7 01       	movw	r24, r14
     738:	b6 01       	movw	r22, r12
     73a:	0e 94 7b 07 	call	0xef6	; 0xef6 <__cmpsf2>
     73e:	88 23       	and	r24, r24
     740:	5c f1       	brlt	.+86     	; 0x798 <main+0x124>
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	a9 01       	movw	r20, r18
     748:	c5 01       	movw	r24, r10
     74a:	b4 01       	movw	r22, r8
     74c:	0e 94 7b 07 	call	0xef6	; 0xef6 <__cmpsf2>
     750:	88 23       	and	r24, r24
     752:	14 f1       	brlt	.+68     	; 0x798 <main+0x124>

		{

			x = sub_function (&old_val_1, value_1);     //call function to extract first step
     754:	b7 01       	movw	r22, r14
     756:	a6 01       	movw	r20, r12
     758:	84 e6       	ldi	r24, 0x64	; 100
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	0e 94 b7 00 	call	0x16e	; 0x16e <sub_function>
     760:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <x>
     764:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <x+0x1>
     768:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <x+0x2>
     76c:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <x+0x3>

			y = sub_function (&old_val_2, value_2);    //call function to extract second step
     770:	40 91 6e 00 	lds	r20, 0x006E	; 0x80006e <value_2>
     774:	50 91 6f 00 	lds	r21, 0x006F	; 0x80006f <value_2+0x1>
     778:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <value_2+0x2>
     77c:	70 91 71 00 	lds	r23, 0x0071	; 0x800071 <value_2+0x3>
     780:	80 e6       	ldi	r24, 0x60	; 96
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e 94 b7 00 	call	0x16e	; 0x16e <sub_function>
     788:	60 93 76 00 	sts	0x0076, r22	; 0x800076 <y>
     78c:	70 93 77 00 	sts	0x0077, r23	; 0x800077 <y+0x1>
     790:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <y+0x2>
     794:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <y+0x3>

		}
//itoa(x,String,10);

		if (x < 0 ){ // if the distance give a negative number make it positive and change the direction of motor rotation
     798:	c0 90 6a 00 	lds	r12, 0x006A	; 0x80006a <x>
     79c:	d0 90 6b 00 	lds	r13, 0x006B	; 0x80006b <x+0x1>
     7a0:	e0 90 6c 00 	lds	r14, 0x006C	; 0x80006c <x+0x2>
     7a4:	f0 90 6d 00 	lds	r15, 0x006D	; 0x80006d <x+0x3>
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	a9 01       	movw	r20, r18
     7ae:	c7 01       	movw	r24, r14
     7b0:	b6 01       	movw	r22, r12
     7b2:	0e 94 7b 07 	call	0xef6	; 0xef6 <__cmpsf2>
     7b6:	88 23       	and	r24, r24
     7b8:	7c f4       	brge	.+30     	; 0x7d8 <main+0x164>
			x *=-1;
     7ba:	f7 fa       	bst	r15, 7
     7bc:	f0 94       	com	r15
     7be:	f7 f8       	bld	r15, 7
     7c0:	f0 94       	com	r15
     7c2:	c0 92 6a 00 	sts	0x006A, r12	; 0x80006a <x>
     7c6:	d0 92 6b 00 	sts	0x006B, r13	; 0x80006b <x+0x1>
     7ca:	e0 92 6c 00 	sts	0x006C, r14	; 0x80006c <x+0x2>
     7ce:	f0 92 6d 00 	sts	0x006D, r15	; 0x80006d <x+0x3>
			statusx = 1;
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <statusx>
		}
		if (y < 0 ){
     7d8:	c0 90 76 00 	lds	r12, 0x0076	; 0x800076 <y>
     7dc:	d0 90 77 00 	lds	r13, 0x0077	; 0x800077 <y+0x1>
     7e0:	e0 90 78 00 	lds	r14, 0x0078	; 0x800078 <y+0x2>
     7e4:	f0 90 79 00 	lds	r15, 0x0079	; 0x800079 <y+0x3>
     7e8:	20 e0       	ldi	r18, 0x00	; 0
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	a9 01       	movw	r20, r18
     7ee:	c7 01       	movw	r24, r14
     7f0:	b6 01       	movw	r22, r12
     7f2:	0e 94 7b 07 	call	0xef6	; 0xef6 <__cmpsf2>
     7f6:	88 23       	and	r24, r24
     7f8:	7c f4       	brge	.+30     	; 0x818 <main+0x1a4>
			y *=-1;
     7fa:	f7 fa       	bst	r15, 7
     7fc:	f0 94       	com	r15
     7fe:	f7 f8       	bld	r15, 7
     800:	f0 94       	com	r15
     802:	c0 92 76 00 	sts	0x0076, r12	; 0x800076 <y>
     806:	d0 92 77 00 	sts	0x0077, r13	; 0x800077 <y+0x1>
     80a:	e0 92 78 00 	sts	0x0078, r14	; 0x800078 <y+0x2>
     80e:	f0 92 79 00 	sts	0x0079, r15	; 0x800079 <y+0x3>
			statusy = 1;
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <statusy>
		}
		for (int i = x ;i>0;i--)
     818:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <x>
     81c:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <x+0x1>
     820:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <x+0x2>
     824:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <x+0x3>
     828:	0e 94 80 07 	call	0xf00	; 0xf00 <__fixsfsi>
     82c:	eb 01       	movw	r28, r22
     82e:	1c 16       	cp	r1, r28
     830:	1d 06       	cpc	r1, r29
     832:	ec f4       	brge	.+58     	; 0x86e <main+0x1fa>
		{
			Stepper_A_rev(statusx,1);
     834:	61 e0       	ldi	r22, 0x01	; 1
     836:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <statusx>
     83a:	0e 94 43 06 	call	0xc86	; 0xc86 <Stepper_A_rev>
			x--;
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	40 e8       	ldi	r20, 0x80	; 128
     844:	5f e3       	ldi	r21, 0x3F	; 63
     846:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <x>
     84a:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <x+0x1>
     84e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <x+0x2>
     852:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <x+0x3>
     856:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__subsf3>
     85a:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <x>
     85e:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <x+0x1>
     862:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <x+0x2>
     866:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <x+0x3>
		}
		if (y < 0 ){
			y *=-1;
			statusy = 1;
		}
		for (int i = x ;i>0;i--)
     86a:	21 97       	sbiw	r28, 0x01	; 1
     86c:	19 f7       	brne	.-58     	; 0x834 <main+0x1c0>
		{
			Stepper_A_rev(statusx,1);
			x--;
			
		}
		while(y>0)
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	a9 01       	movw	r20, r18
     874:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <y>
     878:	70 91 77 00 	lds	r23, 0x0077	; 0x800077 <y+0x1>
     87c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <y+0x2>
     880:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <y+0x3>
     884:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__gesf2>
     888:	18 16       	cp	r1, r24
     88a:	0c f0       	brlt	.+2      	; 0x88e <main+0x21a>
     88c:	f5 ce       	rjmp	.-534    	; 0x678 <main+0x4>
		{
			Stepper_B_rev(statusy,1);
     88e:	61 e0       	ldi	r22, 0x01	; 1
     890:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <statusy>
     894:	0e 94 72 06 	call	0xce4	; 0xce4 <Stepper_B_rev>
			y--;
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	40 e8       	ldi	r20, 0x80	; 128
     89e:	5f e3       	ldi	r21, 0x3F	; 63
     8a0:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <y>
     8a4:	70 91 77 00 	lds	r23, 0x0077	; 0x800077 <y+0x1>
     8a8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <y+0x2>
     8ac:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <y+0x3>
     8b0:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__subsf3>
     8b4:	60 93 76 00 	sts	0x0076, r22	; 0x800076 <y>
     8b8:	70 93 77 00 	sts	0x0077, r23	; 0x800077 <y+0x1>
     8bc:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <y+0x2>
     8c0:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <y+0x3>
		{
			Stepper_A_rev(statusx,1);
			x--;
			
		}
		while(y>0)
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	a9 01       	movw	r20, r18
     8ca:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__gesf2>
     8ce:	18 16       	cp	r1, r24
     8d0:	f4 f2       	brlt	.-68     	; 0x88e <main+0x21a>
     8d2:	d2 ce       	rjmp	.-604    	; 0x678 <main+0x4>

000008d4 <STpinChange>:
#include <avr/io.h>
#include <stdbool.h>
int speed;
void STpinChange(int a, int b)
{
	if(b == 0)
     8d4:	67 2b       	or	r22, r23
     8d6:	09 f0       	breq	.+2      	; 0x8da <STpinChange+0x6>
     8d8:	9f c0       	rjmp	.+318    	; 0xa18 <STpinChange+0x144>
	{
		if(a == St_PORTA0)
     8da:	00 97       	sbiw	r24, 0x00	; 0
     8dc:	11 f4       	brne	.+4      	; 0x8e2 <STpinChange+0xe>
		PORTA &= ~(1<<PA0);
     8de:	d8 98       	cbi	0x1b, 0	; 27
     8e0:	08 95       	ret
		else if(a == St_PORTA1)
     8e2:	81 30       	cpi	r24, 0x01	; 1
     8e4:	91 05       	cpc	r25, r1
     8e6:	11 f4       	brne	.+4      	; 0x8ec <STpinChange+0x18>
		PORTA &= ~(1<<PA1);
     8e8:	d9 98       	cbi	0x1b, 1	; 27
     8ea:	08 95       	ret
		else if(a == St_PORTA2)
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	91 05       	cpc	r25, r1
     8f0:	11 f4       	brne	.+4      	; 0x8f6 <STpinChange+0x22>
		PORTA &= ~(1<<PA2);
     8f2:	da 98       	cbi	0x1b, 2	; 27
     8f4:	08 95       	ret
		else if(a == St_PORTA3)
     8f6:	83 30       	cpi	r24, 0x03	; 3
     8f8:	91 05       	cpc	r25, r1
     8fa:	11 f4       	brne	.+4      	; 0x900 <STpinChange+0x2c>
		PORTA &= ~(1<<PA3);
     8fc:	db 98       	cbi	0x1b, 3	; 27
     8fe:	08 95       	ret
		else if(a == St_PORTA4)
     900:	84 30       	cpi	r24, 0x04	; 4
     902:	91 05       	cpc	r25, r1
     904:	11 f4       	brne	.+4      	; 0x90a <STpinChange+0x36>
		PORTA &= ~(1<<PA4);
     906:	dc 98       	cbi	0x1b, 4	; 27
     908:	08 95       	ret
		else if(a == St_PORTA5)
     90a:	85 30       	cpi	r24, 0x05	; 5
     90c:	91 05       	cpc	r25, r1
     90e:	11 f4       	brne	.+4      	; 0x914 <STpinChange+0x40>
		PORTA &= ~(1<<PA5);
     910:	dd 98       	cbi	0x1b, 5	; 27
     912:	08 95       	ret
		else if(a == St_PORTA6)
     914:	86 30       	cpi	r24, 0x06	; 6
     916:	91 05       	cpc	r25, r1
     918:	11 f4       	brne	.+4      	; 0x91e <STpinChange+0x4a>
		PORTA &= ~(1<<PA6);
     91a:	de 98       	cbi	0x1b, 6	; 27
     91c:	08 95       	ret
		else if(a == St_PORTA7)
     91e:	87 30       	cpi	r24, 0x07	; 7
     920:	91 05       	cpc	r25, r1
     922:	11 f4       	brne	.+4      	; 0x928 <STpinChange+0x54>
		PORTA &= ~(1<<PA7);
     924:	df 98       	cbi	0x1b, 7	; 27
     926:	08 95       	ret
		else if(a == St_PORTB0)
     928:	8a 30       	cpi	r24, 0x0A	; 10
     92a:	91 05       	cpc	r25, r1
     92c:	11 f4       	brne	.+4      	; 0x932 <STpinChange+0x5e>
		PORTB &= ~(1<<PB0);
     92e:	c0 98       	cbi	0x18, 0	; 24
     930:	08 95       	ret
		else if(a == St_PORTB1)
     932:	8b 30       	cpi	r24, 0x0B	; 11
     934:	91 05       	cpc	r25, r1
     936:	11 f4       	brne	.+4      	; 0x93c <STpinChange+0x68>
		PORTB &= ~(1<<PB1);
     938:	c1 98       	cbi	0x18, 1	; 24
     93a:	08 95       	ret
		else if(a == St_PORTB2)
     93c:	8c 30       	cpi	r24, 0x0C	; 12
     93e:	91 05       	cpc	r25, r1
     940:	11 f4       	brne	.+4      	; 0x946 <STpinChange+0x72>
		PORTB &= ~(1<<PB2);
     942:	c2 98       	cbi	0x18, 2	; 24
     944:	08 95       	ret
		else if(a == St_PORTB3)
     946:	8d 30       	cpi	r24, 0x0D	; 13
     948:	91 05       	cpc	r25, r1
     94a:	11 f4       	brne	.+4      	; 0x950 <STpinChange+0x7c>
		PORTB &= ~(1<<PB3);
     94c:	c3 98       	cbi	0x18, 3	; 24
     94e:	08 95       	ret
		else if(a == St_PORTB4)
     950:	8e 30       	cpi	r24, 0x0E	; 14
     952:	91 05       	cpc	r25, r1
     954:	11 f4       	brne	.+4      	; 0x95a <STpinChange+0x86>
		PORTB &= ~(1<<PB4);
     956:	c4 98       	cbi	0x18, 4	; 24
     958:	08 95       	ret
		else if(a == St_PORTB5)
     95a:	8f 30       	cpi	r24, 0x0F	; 15
     95c:	91 05       	cpc	r25, r1
     95e:	11 f4       	brne	.+4      	; 0x964 <STpinChange+0x90>
		PORTB &= ~(1<<PB5);
     960:	c5 98       	cbi	0x18, 5	; 24
     962:	08 95       	ret
		else if(a == St_PORTB6)
     964:	80 31       	cpi	r24, 0x10	; 16
     966:	91 05       	cpc	r25, r1
     968:	11 f4       	brne	.+4      	; 0x96e <STpinChange+0x9a>
		PORTB &= ~(1<<PB6);
     96a:	c6 98       	cbi	0x18, 6	; 24
     96c:	08 95       	ret
		else if(a == St_PORTB7)
     96e:	81 31       	cpi	r24, 0x11	; 17
     970:	91 05       	cpc	r25, r1
     972:	11 f4       	brne	.+4      	; 0x978 <STpinChange+0xa4>
		PORTB &= ~(1<<PB7);
     974:	c7 98       	cbi	0x18, 7	; 24
     976:	08 95       	ret
		else if(a == St_PORTC0)
     978:	84 31       	cpi	r24, 0x14	; 20
     97a:	91 05       	cpc	r25, r1
     97c:	11 f4       	brne	.+4      	; 0x982 <STpinChange+0xae>
		PORTC &= ~(1<<PC0);
     97e:	a8 98       	cbi	0x15, 0	; 21
     980:	08 95       	ret
		else if(a == St_PORTC1)
     982:	85 31       	cpi	r24, 0x15	; 21
     984:	91 05       	cpc	r25, r1
     986:	11 f4       	brne	.+4      	; 0x98c <STpinChange+0xb8>
		PORTC &= ~(1<<PC1);
     988:	a9 98       	cbi	0x15, 1	; 21
     98a:	08 95       	ret
		else if(a == St_PORTC2)
     98c:	86 31       	cpi	r24, 0x16	; 22
     98e:	91 05       	cpc	r25, r1
     990:	11 f4       	brne	.+4      	; 0x996 <STpinChange+0xc2>
		PORTC &= ~(1<<PC2);
     992:	aa 98       	cbi	0x15, 2	; 21
     994:	08 95       	ret
		else if(a == St_PORTC3)
     996:	87 31       	cpi	r24, 0x17	; 23
     998:	91 05       	cpc	r25, r1
     99a:	11 f4       	brne	.+4      	; 0x9a0 <STpinChange+0xcc>
		PORTC &= ~(1<<PC3);
     99c:	ab 98       	cbi	0x15, 3	; 21
     99e:	08 95       	ret
		else if(a == St_PORTC4)
     9a0:	88 31       	cpi	r24, 0x18	; 24
     9a2:	91 05       	cpc	r25, r1
     9a4:	11 f4       	brne	.+4      	; 0x9aa <STpinChange+0xd6>
		PORTC &= ~(1<<PC4);
     9a6:	ac 98       	cbi	0x15, 4	; 21
     9a8:	08 95       	ret
		else if(a == St_PORTC5)
     9aa:	89 31       	cpi	r24, 0x19	; 25
     9ac:	91 05       	cpc	r25, r1
     9ae:	11 f4       	brne	.+4      	; 0x9b4 <STpinChange+0xe0>
		PORTC &= ~(1<<PC5);
     9b0:	ad 98       	cbi	0x15, 5	; 21
     9b2:	08 95       	ret
		else if(a == St_PORTC6)
     9b4:	8a 31       	cpi	r24, 0x1A	; 26
     9b6:	91 05       	cpc	r25, r1
     9b8:	11 f4       	brne	.+4      	; 0x9be <STpinChange+0xea>
		PORTC &= ~(1<<PC6);
     9ba:	ae 98       	cbi	0x15, 6	; 21
     9bc:	08 95       	ret
		else if(a == St_PORTC7)
     9be:	8b 31       	cpi	r24, 0x1B	; 27
     9c0:	91 05       	cpc	r25, r1
     9c2:	11 f4       	brne	.+4      	; 0x9c8 <STpinChange+0xf4>
		PORTC &= ~(1<<PC7);
     9c4:	af 98       	cbi	0x15, 7	; 21
     9c6:	08 95       	ret
		else if(a == St_PORTD0)
     9c8:	8e 31       	cpi	r24, 0x1E	; 30
     9ca:	91 05       	cpc	r25, r1
     9cc:	11 f4       	brne	.+4      	; 0x9d2 <STpinChange+0xfe>
		PORTD &= ~(1<<PD0);
     9ce:	90 98       	cbi	0x12, 0	; 18
     9d0:	08 95       	ret
		else if(a == St_PORTD1)
     9d2:	8f 31       	cpi	r24, 0x1F	; 31
     9d4:	91 05       	cpc	r25, r1
     9d6:	11 f4       	brne	.+4      	; 0x9dc <STpinChange+0x108>
		PORTD &= ~(1<<PD1);
     9d8:	91 98       	cbi	0x12, 1	; 18
     9da:	08 95       	ret
		else if(a == St_PORTD2)
     9dc:	80 32       	cpi	r24, 0x20	; 32
     9de:	91 05       	cpc	r25, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <STpinChange+0x112>
		PORTD &= ~(1<<PD2);
     9e2:	92 98       	cbi	0x12, 2	; 18
     9e4:	08 95       	ret
		else if(a == St_PORTD3)
     9e6:	81 32       	cpi	r24, 0x21	; 33
     9e8:	91 05       	cpc	r25, r1
     9ea:	11 f4       	brne	.+4      	; 0x9f0 <STpinChange+0x11c>
		PORTD &= ~(1<<PD3);
     9ec:	93 98       	cbi	0x12, 3	; 18
     9ee:	08 95       	ret
		else if(a == St_PORTD4)
     9f0:	82 32       	cpi	r24, 0x22	; 34
     9f2:	91 05       	cpc	r25, r1
     9f4:	11 f4       	brne	.+4      	; 0x9fa <STpinChange+0x126>
		PORTD &= ~(1<<PD4);
     9f6:	94 98       	cbi	0x12, 4	; 18
     9f8:	08 95       	ret
		else if(a == St_PORTD5)
     9fa:	83 32       	cpi	r24, 0x23	; 35
     9fc:	91 05       	cpc	r25, r1
     9fe:	11 f4       	brne	.+4      	; 0xa04 <STpinChange+0x130>
		PORTD &= ~(1<<PD5);
     a00:	95 98       	cbi	0x12, 5	; 18
     a02:	08 95       	ret
		else if(a == St_PORTD6)
     a04:	84 32       	cpi	r24, 0x24	; 36
     a06:	91 05       	cpc	r25, r1
     a08:	11 f4       	brne	.+4      	; 0xa0e <STpinChange+0x13a>
		PORTD &= ~(1<<PD6);
     a0a:	96 98       	cbi	0x12, 6	; 18
     a0c:	08 95       	ret
		else if(a == St_PORTD7)
     a0e:	85 97       	sbiw	r24, 0x25	; 37
     a10:	09 f0       	breq	.+2      	; 0xa14 <STpinChange+0x140>
     a12:	9f c0       	rjmp	.+318    	; 0xb52 <STpinChange+0x27e>
		PORTD &= ~(1<<PD7);
     a14:	97 98       	cbi	0x12, 7	; 18
     a16:	08 95       	ret
	}
	else
	{
		if(a == St_PORTA0)
     a18:	00 97       	sbiw	r24, 0x00	; 0
     a1a:	11 f4       	brne	.+4      	; 0xa20 <STpinChange+0x14c>
		PORTA |= (1<<PA0);
     a1c:	d8 9a       	sbi	0x1b, 0	; 27
     a1e:	08 95       	ret
		else if(a == St_PORTA1)
     a20:	81 30       	cpi	r24, 0x01	; 1
     a22:	91 05       	cpc	r25, r1
     a24:	11 f4       	brne	.+4      	; 0xa2a <STpinChange+0x156>
		PORTA |= (1<<PA1);
     a26:	d9 9a       	sbi	0x1b, 1	; 27
     a28:	08 95       	ret
		else if(a == St_PORTA2)
     a2a:	82 30       	cpi	r24, 0x02	; 2
     a2c:	91 05       	cpc	r25, r1
     a2e:	11 f4       	brne	.+4      	; 0xa34 <STpinChange+0x160>
		PORTA |= (1<<PA2);
     a30:	da 9a       	sbi	0x1b, 2	; 27
     a32:	08 95       	ret
		else if(a == St_PORTA3)
     a34:	83 30       	cpi	r24, 0x03	; 3
     a36:	91 05       	cpc	r25, r1
     a38:	11 f4       	brne	.+4      	; 0xa3e <STpinChange+0x16a>
		PORTA |= (1<<PA3);
     a3a:	db 9a       	sbi	0x1b, 3	; 27
     a3c:	08 95       	ret
		else if(a == St_PORTA4)
     a3e:	84 30       	cpi	r24, 0x04	; 4
     a40:	91 05       	cpc	r25, r1
     a42:	11 f4       	brne	.+4      	; 0xa48 <STpinChange+0x174>
		PORTA |= (1<<PA4);
     a44:	dc 9a       	sbi	0x1b, 4	; 27
     a46:	08 95       	ret
		else if(a == St_PORTA5)
     a48:	85 30       	cpi	r24, 0x05	; 5
     a4a:	91 05       	cpc	r25, r1
     a4c:	11 f4       	brne	.+4      	; 0xa52 <STpinChange+0x17e>
		PORTA |= (1<<PA5);
     a4e:	dd 9a       	sbi	0x1b, 5	; 27
     a50:	08 95       	ret
		else if(a == St_PORTA6)
     a52:	86 30       	cpi	r24, 0x06	; 6
     a54:	91 05       	cpc	r25, r1
     a56:	11 f4       	brne	.+4      	; 0xa5c <STpinChange+0x188>
		PORTA |= (1<<PA6);
     a58:	de 9a       	sbi	0x1b, 6	; 27
     a5a:	08 95       	ret
		else if(a == St_PORTA7)
     a5c:	87 30       	cpi	r24, 0x07	; 7
     a5e:	91 05       	cpc	r25, r1
     a60:	11 f4       	brne	.+4      	; 0xa66 <STpinChange+0x192>
		PORTA |= (1<<PA7);
     a62:	df 9a       	sbi	0x1b, 7	; 27
     a64:	08 95       	ret
		else if(a == St_PORTB0)
     a66:	8a 30       	cpi	r24, 0x0A	; 10
     a68:	91 05       	cpc	r25, r1
     a6a:	11 f4       	brne	.+4      	; 0xa70 <STpinChange+0x19c>
		PORTB |= (1<<PB0);
     a6c:	c0 9a       	sbi	0x18, 0	; 24
     a6e:	08 95       	ret
		else if(a == St_PORTB1)
     a70:	8b 30       	cpi	r24, 0x0B	; 11
     a72:	91 05       	cpc	r25, r1
     a74:	11 f4       	brne	.+4      	; 0xa7a <STpinChange+0x1a6>
		PORTB |= (1<<PB1);
     a76:	c1 9a       	sbi	0x18, 1	; 24
     a78:	08 95       	ret
		else if(a == St_PORTB2)
     a7a:	8c 30       	cpi	r24, 0x0C	; 12
     a7c:	91 05       	cpc	r25, r1
     a7e:	11 f4       	brne	.+4      	; 0xa84 <STpinChange+0x1b0>
		PORTB |= (1<<PB2);
     a80:	c2 9a       	sbi	0x18, 2	; 24
     a82:	08 95       	ret
		else if(a == St_PORTB3)
     a84:	8d 30       	cpi	r24, 0x0D	; 13
     a86:	91 05       	cpc	r25, r1
     a88:	11 f4       	brne	.+4      	; 0xa8e <STpinChange+0x1ba>
		PORTB |= (1<<PB3);
     a8a:	c3 9a       	sbi	0x18, 3	; 24
     a8c:	08 95       	ret
		else if(a == St_PORTB4)
     a8e:	8e 30       	cpi	r24, 0x0E	; 14
     a90:	91 05       	cpc	r25, r1
     a92:	11 f4       	brne	.+4      	; 0xa98 <STpinChange+0x1c4>
		PORTB |= (1<<PB4);
     a94:	c4 9a       	sbi	0x18, 4	; 24
     a96:	08 95       	ret
		else if(a == St_PORTB5)
     a98:	8f 30       	cpi	r24, 0x0F	; 15
     a9a:	91 05       	cpc	r25, r1
     a9c:	11 f4       	brne	.+4      	; 0xaa2 <STpinChange+0x1ce>
		PORTB |= (1<<PB5);
     a9e:	c5 9a       	sbi	0x18, 5	; 24
     aa0:	08 95       	ret
		else if(a == St_PORTB6)
     aa2:	80 31       	cpi	r24, 0x10	; 16
     aa4:	91 05       	cpc	r25, r1
     aa6:	11 f4       	brne	.+4      	; 0xaac <STpinChange+0x1d8>
		PORTB |= (1<<PB6);
     aa8:	c6 9a       	sbi	0x18, 6	; 24
     aaa:	08 95       	ret
		else if(a == St_PORTB7)
     aac:	81 31       	cpi	r24, 0x11	; 17
     aae:	91 05       	cpc	r25, r1
     ab0:	11 f4       	brne	.+4      	; 0xab6 <STpinChange+0x1e2>
		PORTB |= (1<<PB7);
     ab2:	c7 9a       	sbi	0x18, 7	; 24
     ab4:	08 95       	ret
		else if(a == St_PORTC0)
     ab6:	84 31       	cpi	r24, 0x14	; 20
     ab8:	91 05       	cpc	r25, r1
     aba:	11 f4       	brne	.+4      	; 0xac0 <STpinChange+0x1ec>
		PORTC |= (1<<PC0);
     abc:	a8 9a       	sbi	0x15, 0	; 21
     abe:	08 95       	ret
		else if(a == St_PORTC1)
     ac0:	85 31       	cpi	r24, 0x15	; 21
     ac2:	91 05       	cpc	r25, r1
     ac4:	11 f4       	brne	.+4      	; 0xaca <STpinChange+0x1f6>
		PORTC |= (1<<PC1);
     ac6:	a9 9a       	sbi	0x15, 1	; 21
     ac8:	08 95       	ret
		else if(a == St_PORTC2)
     aca:	86 31       	cpi	r24, 0x16	; 22
     acc:	91 05       	cpc	r25, r1
     ace:	11 f4       	brne	.+4      	; 0xad4 <STpinChange+0x200>
		PORTC |= (1<<PC2);
     ad0:	aa 9a       	sbi	0x15, 2	; 21
     ad2:	08 95       	ret
		else if(a == St_PORTC3)
     ad4:	87 31       	cpi	r24, 0x17	; 23
     ad6:	91 05       	cpc	r25, r1
     ad8:	11 f4       	brne	.+4      	; 0xade <STpinChange+0x20a>
		PORTC |= (1<<PC3);
     ada:	ab 9a       	sbi	0x15, 3	; 21
     adc:	08 95       	ret
		else if(a == St_PORTC4)
     ade:	88 31       	cpi	r24, 0x18	; 24
     ae0:	91 05       	cpc	r25, r1
     ae2:	11 f4       	brne	.+4      	; 0xae8 <STpinChange+0x214>
		PORTC |= (1<<PC4);
     ae4:	ac 9a       	sbi	0x15, 4	; 21
     ae6:	08 95       	ret
		else if(a == St_PORTC5)
     ae8:	89 31       	cpi	r24, 0x19	; 25
     aea:	91 05       	cpc	r25, r1
     aec:	11 f4       	brne	.+4      	; 0xaf2 <STpinChange+0x21e>
		PORTC |= (1<<PC5);
     aee:	ad 9a       	sbi	0x15, 5	; 21
     af0:	08 95       	ret
		else if(a == St_PORTC6)
     af2:	8a 31       	cpi	r24, 0x1A	; 26
     af4:	91 05       	cpc	r25, r1
     af6:	11 f4       	brne	.+4      	; 0xafc <STpinChange+0x228>
		PORTC |= (1<<PC6);
     af8:	ae 9a       	sbi	0x15, 6	; 21
     afa:	08 95       	ret
		else if(a == St_PORTC7)
     afc:	8b 31       	cpi	r24, 0x1B	; 27
     afe:	91 05       	cpc	r25, r1
     b00:	11 f4       	brne	.+4      	; 0xb06 <STpinChange+0x232>
		PORTC |= (1<<PC7);
     b02:	af 9a       	sbi	0x15, 7	; 21
     b04:	08 95       	ret
		else if(a == St_PORTD0)
     b06:	8e 31       	cpi	r24, 0x1E	; 30
     b08:	91 05       	cpc	r25, r1
     b0a:	11 f4       	brne	.+4      	; 0xb10 <STpinChange+0x23c>
		PORTD |= (1<<PD0);
     b0c:	90 9a       	sbi	0x12, 0	; 18
     b0e:	08 95       	ret
		else if(a == St_PORTD1)
     b10:	8f 31       	cpi	r24, 0x1F	; 31
     b12:	91 05       	cpc	r25, r1
     b14:	11 f4       	brne	.+4      	; 0xb1a <STpinChange+0x246>
		PORTD |= (1<<PD1);
     b16:	91 9a       	sbi	0x12, 1	; 18
     b18:	08 95       	ret
		else if(a == St_PORTD2)
     b1a:	80 32       	cpi	r24, 0x20	; 32
     b1c:	91 05       	cpc	r25, r1
     b1e:	11 f4       	brne	.+4      	; 0xb24 <STpinChange+0x250>
		PORTD |= (1<<PD2);
     b20:	92 9a       	sbi	0x12, 2	; 18
     b22:	08 95       	ret
		else if(a == St_PORTD3)
     b24:	81 32       	cpi	r24, 0x21	; 33
     b26:	91 05       	cpc	r25, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <STpinChange+0x25a>
		PORTD |= (1<<PD3);
     b2a:	93 9a       	sbi	0x12, 3	; 18
     b2c:	08 95       	ret
		else if(a == St_PORTD4)
     b2e:	82 32       	cpi	r24, 0x22	; 34
     b30:	91 05       	cpc	r25, r1
     b32:	11 f4       	brne	.+4      	; 0xb38 <STpinChange+0x264>
		PORTD |= (1<<PD4);
     b34:	94 9a       	sbi	0x12, 4	; 18
     b36:	08 95       	ret
		else if(a == St_PORTD5)
     b38:	83 32       	cpi	r24, 0x23	; 35
     b3a:	91 05       	cpc	r25, r1
     b3c:	11 f4       	brne	.+4      	; 0xb42 <STpinChange+0x26e>
		PORTD |= (1<<PD5);
     b3e:	95 9a       	sbi	0x12, 5	; 18
     b40:	08 95       	ret
		else if(a == St_PORTD6)
     b42:	84 32       	cpi	r24, 0x24	; 36
     b44:	91 05       	cpc	r25, r1
     b46:	11 f4       	brne	.+4      	; 0xb4c <STpinChange+0x278>
		PORTD |= (1<<PD6);
     b48:	96 9a       	sbi	0x12, 6	; 18
     b4a:	08 95       	ret
		else if(a == St_PORTD7)
     b4c:	85 97       	sbiw	r24, 0x25	; 37
     b4e:	09 f4       	brne	.+2      	; 0xb52 <STpinChange+0x27e>
		PORTD |= (1<<PD7);
     b50:	97 9a       	sbi	0x12, 7	; 18
     b52:	08 95       	ret

00000b54 <steper_1step>:
	}
}

void steper_1step(){ // to make a full 1 step with 2 phase
	STpinChange(ms1,0);        // ms1 = 0,ms2 = 0,ms3 = 0 from a9488 data sheet
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	84 e1       	ldi	r24, 0x14	; 20
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <STpinChange>
	STpinChange(ms2,0);
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	70 e0       	ldi	r23, 0x00	; 0
     b64:	85 e1       	ldi	r24, 0x15	; 21
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <STpinChange>
	STpinChange(ms3,0);
     b6c:	60 e0       	ldi	r22, 0x00	; 0
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	86 e1       	ldi	r24, 0x16	; 22
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <STpinChange>
     b78:	08 95       	ret

00000b7a <steper_Hstep>:
}
void steper_Hstep(){// to make a half 1 step with 1-2 phase ms1 = 1,ms2 = 0,ms3 = 0 from a9488 data sheet
	STpinChange(ms1,1);
     b7a:	61 e0       	ldi	r22, 0x01	; 1
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	84 e1       	ldi	r24, 0x14	; 20
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <STpinChange>
	STpinChange(ms2,0);
     b86:	60 e0       	ldi	r22, 0x00	; 0
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	85 e1       	ldi	r24, 0x15	; 21
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <STpinChange>
	STpinChange(ms3,0);
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	86 e1       	ldi	r24, 0x16	; 22
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <STpinChange>
     b9e:	08 95       	ret

00000ba0 <steper_Qstep>:
}
void steper_Qstep(){// to make a Quarter 1 step with w1-2 phase ms1 = 0,ms2 = 1,ms3 = 0 from a9488 data sheet
	STpinChange(ms1,0);
     ba0:	60 e0       	ldi	r22, 0x00	; 0
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	84 e1       	ldi	r24, 0x14	; 20
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <STpinChange>
	STpinChange(ms2,1);
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	85 e1       	ldi	r24, 0x15	; 21
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <STpinChange>
	STpinChange(ms3,0);
     bb8:	60 e0       	ldi	r22, 0x00	; 0
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	86 e1       	ldi	r24, 0x16	; 22
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <STpinChange>
     bc4:	08 95       	ret

00000bc6 <steper_Estep>:
}
void steper_Estep(){// to make a Eighth 1 step with 2w1-2 phase ms1 = 1,ms2 = 1,ms3 = 0 from a9488 data sheet
	STpinChange(ms1,1);
     bc6:	61 e0       	ldi	r22, 0x01	; 1
     bc8:	70 e0       	ldi	r23, 0x00	; 0
     bca:	84 e1       	ldi	r24, 0x14	; 20
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <STpinChange>
	STpinChange(ms2,1);
     bd2:	61 e0       	ldi	r22, 0x01	; 1
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	85 e1       	ldi	r24, 0x15	; 21
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <STpinChange>
	STpinChange(ms3,0);
     bde:	60 e0       	ldi	r22, 0x00	; 0
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	86 e1       	ldi	r24, 0x16	; 22
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <STpinChange>
     bea:	08 95       	ret

00000bec <steper_Sstep>:
}
void steper_Sstep(){// to make a Sixteenth 1 step with 4w1-2 phase ms1 = 1,ms2 = 1,ms3 = 0 from a9488 data sheet
	STpinChange(ms1,1);
     bec:	61 e0       	ldi	r22, 0x01	; 1
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	84 e1       	ldi	r24, 0x14	; 20
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <STpinChange>
	STpinChange(ms2,1);
     bf8:	61 e0       	ldi	r22, 0x01	; 1
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	85 e1       	ldi	r24, 0x15	; 21
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <STpinChange>
	STpinChange(ms3,1);
     c04:	61 e0       	ldi	r22, 0x01	; 1
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	86 e1       	ldi	r24, 0x16	; 22
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <STpinChange>
     c10:	08 95       	ret

00000c12 <StepperInit>:
}
//library interface description
void StepperInit(int steps,int16_t sp)  //types of steps (1,2,6,8,16),speed of rotation in rpm
{
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	eb 01       	movw	r28, r22
	switch (steps){
     c18:	86 30       	cpi	r24, 0x06	; 6
     c1a:	91 05       	cpc	r25, r1
     c1c:	99 f0       	breq	.+38     	; 0xc44 <StepperInit+0x32>
     c1e:	34 f4       	brge	.+12     	; 0xc2c <StepperInit+0x1a>
     c20:	81 30       	cpi	r24, 0x01	; 1
     c22:	91 05       	cpc	r25, r1
     c24:	49 f0       	breq	.+18     	; 0xc38 <StepperInit+0x26>
     c26:	02 97       	sbiw	r24, 0x02	; 2
     c28:	51 f0       	breq	.+20     	; 0xc3e <StepperInit+0x2c>
     c2a:	14 c0       	rjmp	.+40     	; 0xc54 <StepperInit+0x42>
     c2c:	88 30       	cpi	r24, 0x08	; 8
     c2e:	91 05       	cpc	r25, r1
     c30:	61 f0       	breq	.+24     	; 0xc4a <StepperInit+0x38>
     c32:	40 97       	sbiw	r24, 0x10	; 16
     c34:	69 f0       	breq	.+26     	; 0xc50 <StepperInit+0x3e>
     c36:	0e c0       	rjmp	.+28     	; 0xc54 <StepperInit+0x42>
		case 1:steper_1step();break;
     c38:	0e 94 aa 05 	call	0xb54	; 0xb54 <steper_1step>
     c3c:	0b c0       	rjmp	.+22     	; 0xc54 <StepperInit+0x42>
		case 2:steper_Hstep();break;
     c3e:	0e 94 bd 05 	call	0xb7a	; 0xb7a <steper_Hstep>
     c42:	08 c0       	rjmp	.+16     	; 0xc54 <StepperInit+0x42>
		case 6:steper_Qstep();break;
     c44:	0e 94 d0 05 	call	0xba0	; 0xba0 <steper_Qstep>
     c48:	05 c0       	rjmp	.+10     	; 0xc54 <StepperInit+0x42>
		case 8:steper_Estep();break;
     c4a:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <steper_Estep>
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <StepperInit+0x42>
		case 16:steper_Sstep();break;
     c50:	0e 94 f6 05 	call	0xbec	; 0xbec <steper_Sstep>
	}
	speed = sp;
     c54:	d0 93 8f 00 	sts	0x008F, r29	; 0x80008f <speed+0x1>
     c58:	c0 93 8e 00 	sts	0x008E, r28	; 0x80008e <speed>
}
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	08 95       	ret

00000c62 <setspeed>:
void setspeed(int sp){
     c62:	bc 01       	movw	r22, r24
	sp=(1000/sp);//1step = 1 mm 
     c64:	88 ee       	ldi	r24, 0xE8	; 232
     c66:	93 e0       	ldi	r25, 0x03	; 3
     c68:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__divmodhi4>
	while(sp > 0){
     c6c:	16 16       	cp	r1, r22
     c6e:	17 06       	cpc	r1, r23
     c70:	4c f4       	brge	.+18     	; 0xc84 <setspeed+0x22>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c72:	8f ec       	ldi	r24, 0xCF	; 207
     c74:	97 e0       	ldi	r25, 0x07	; 7
     c76:	01 97       	sbiw	r24, 0x01	; 1
     c78:	f1 f7       	brne	.-4      	; 0xc76 <setspeed+0x14>
     c7a:	00 c0       	rjmp	.+0      	; 0xc7c <setspeed+0x1a>
     c7c:	00 00       	nop
		_delay_us (500);
		sp-=1;
     c7e:	61 50       	subi	r22, 0x01	; 1
     c80:	71 09       	sbc	r23, r1
	}
	speed = sp;
}
void setspeed(int sp){
	sp=(1000/sp);//1step = 1 mm 
	while(sp > 0){
     c82:	b9 f7       	brne	.-18     	; 0xc72 <setspeed+0x10>
     c84:	08 95       	ret

00000c86 <Stepper_A_rev>:
		_delay_us (500);
		sp-=1;
	}
}
void Stepper_A_rev(bool clockw,uint8_t NuOfSteps){//rotate clockwise or ccw , number of steps for stepperA
     c86:	cf 93       	push	r28
     c88:	c6 2f       	mov	r28, r22
	if (clockw)
     c8a:	88 23       	and	r24, r24
     c8c:	39 f0       	breq	.+14     	; 0xc9c <Stepper_A_rev+0x16>
	{
		STpinChange(DIRA,1);
     c8e:	61 e0       	ldi	r22, 0x01	; 1
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	87 e1       	ldi	r24, 0x17	; 23
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <STpinChange>
     c9a:	06 c0       	rjmp	.+12     	; 0xca8 <Stepper_A_rev+0x22>
	}
	else
	{
		STpinChange(DIRA,0);
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	87 e1       	ldi	r24, 0x17	; 23
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <STpinChange>
	}
	
	while (NuOfSteps > 0)
     ca8:	cc 23       	and	r28, r28
     caa:	d1 f0       	breq	.+52     	; 0xce0 <Stepper_A_rev+0x5a>
	{
		STpinChange(StepA,1);
     cac:	61 e0       	ldi	r22, 0x01	; 1
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	88 e1       	ldi	r24, 0x18	; 24
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <STpinChange>
		setspeed(speed);
     cb8:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <speed>
     cbc:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <speed+0x1>
     cc0:	0e 94 31 06 	call	0xc62	; 0xc62 <setspeed>
		STpinChange(StepA,0);
     cc4:	60 e0       	ldi	r22, 0x00	; 0
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	88 e1       	ldi	r24, 0x18	; 24
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <STpinChange>
		setspeed(speed);
     cd0:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <speed>
     cd4:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <speed+0x1>
     cd8:	0e 94 31 06 	call	0xc62	; 0xc62 <setspeed>
		NuOfSteps -= 1;
     cdc:	c1 50       	subi	r28, 0x01	; 1
	else
	{
		STpinChange(DIRA,0);
	}
	
	while (NuOfSteps > 0)
     cde:	31 f7       	brne	.-52     	; 0xcac <Stepper_A_rev+0x26>
		setspeed(speed);
		STpinChange(StepA,0);
		setspeed(speed);
		NuOfSteps -= 1;
	}
}
     ce0:	cf 91       	pop	r28
     ce2:	08 95       	ret

00000ce4 <Stepper_B_rev>:
void Stepper_B_rev(bool clockw,uint8_t NuOfSteps){//rotate clockwise or ccw , number of steps for stepperB
     ce4:	cf 93       	push	r28
     ce6:	c6 2f       	mov	r28, r22
	if (clockw)
     ce8:	88 23       	and	r24, r24
     cea:	39 f0       	breq	.+14     	; 0xcfa <Stepper_B_rev+0x16>
	{
		STpinChange(DIRB,1);
     cec:	61 e0       	ldi	r22, 0x01	; 1
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	8a e1       	ldi	r24, 0x1A	; 26
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <STpinChange>
     cf8:	06 c0       	rjmp	.+12     	; 0xd06 <Stepper_B_rev+0x22>
	}
	else
	{
		STpinChange(DIRB,0);
     cfa:	60 e0       	ldi	r22, 0x00	; 0
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	8a e1       	ldi	r24, 0x1A	; 26
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <STpinChange>
	}
	
	while (NuOfSteps != 0)
     d06:	cc 23       	and	r28, r28
     d08:	d1 f0       	breq	.+52     	; 0xd3e <Stepper_B_rev+0x5a>
	{
		STpinChange(StepB,1);
     d0a:	61 e0       	ldi	r22, 0x01	; 1
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	89 e1       	ldi	r24, 0x19	; 25
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <STpinChange>
		setspeed(speed); //1Hz = 60 rpm & t = 1/f &1s = 1000ms
     d16:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <speed>
     d1a:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <speed+0x1>
     d1e:	0e 94 31 06 	call	0xc62	; 0xc62 <setspeed>
		STpinChange(StepB,0);
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	89 e1       	ldi	r24, 0x19	; 25
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <STpinChange>
		setspeed(speed);
     d2e:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <speed>
     d32:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <speed+0x1>
     d36:	0e 94 31 06 	call	0xc62	; 0xc62 <setspeed>
		NuOfSteps -= 1;
     d3a:	c1 50       	subi	r28, 0x01	; 1
	else
	{
		STpinChange(DIRB,0);
	}
	
	while (NuOfSteps != 0)
     d3c:	31 f7       	brne	.-52     	; 0xd0a <Stepper_B_rev+0x26>
		setspeed(speed); //1Hz = 60 rpm & t = 1/f &1s = 1000ms
		STpinChange(StepB,0);
		setspeed(speed);
		NuOfSteps -= 1;
	}
}
     d3e:	cf 91       	pop	r28
     d40:	08 95       	ret

00000d42 <UART_SetBaudRate>:
#if ((Enable_UART_TxString==1)|| (Enable_UART_Printf == 1))
void UART_TxString(char *ptr_string)
{
	while(*ptr_string)
		UART_TxChar(*ptr_string++);// Loop through the string and transmit char by char
}
     d42:	0f 93       	push	r16
     d44:	1f 93       	push	r17
     d46:	8b 01       	movw	r16, r22
     d48:	9c 01       	movw	r18, r24
     d4a:	dc 01       	movw	r26, r24
     d4c:	cb 01       	movw	r24, r22
     d4e:	80 56       	subi	r24, 0x60	; 96
     d50:	99 40       	sbci	r25, 0x09	; 9
     d52:	a1 09       	sbc	r26, r1
     d54:	b1 09       	sbc	r27, r1
     d56:	81 3a       	cpi	r24, 0xA1	; 161
     d58:	98 4b       	sbci	r25, 0xB8	; 184
     d5a:	a1 40       	sbci	r26, 0x01	; 1
     d5c:	b1 05       	cpc	r27, r1
     d5e:	68 f5       	brcc	.+90     	; 0xdba <UART_SetBaudRate+0x78>
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	dc 01       	movw	r26, r24
     d66:	80 1b       	sub	r24, r16
     d68:	91 0b       	sbc	r25, r17
     d6a:	a2 0b       	sbc	r26, r18
     d6c:	b3 0b       	sbc	r27, r19
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	aa 1f       	adc	r26, r26
     d74:	bb 1f       	adc	r27, r27
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	aa 1f       	adc	r26, r26
     d7c:	bb 1f       	adc	r27, r27
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	aa 1f       	adc	r26, r26
     d84:	bb 1f       	adc	r27, r27
     d86:	bc 01       	movw	r22, r24
     d88:	cd 01       	movw	r24, r26
     d8a:	7c 5d       	subi	r23, 0xDC	; 220
     d8c:	8b 40       	sbci	r24, 0x0B	; 11
     d8e:	9f 4f       	sbci	r25, 0xFF	; 255
     d90:	00 0f       	add	r16, r16
     d92:	11 1f       	adc	r17, r17
     d94:	22 1f       	adc	r18, r18
     d96:	33 1f       	adc	r19, r19
     d98:	00 0f       	add	r16, r16
     d9a:	11 1f       	adc	r17, r17
     d9c:	22 1f       	adc	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	a9 01       	movw	r20, r18
     da2:	98 01       	movw	r18, r16
     da4:	22 0f       	add	r18, r18
     da6:	33 1f       	adc	r19, r19
     da8:	44 1f       	adc	r20, r20
     daa:	55 1f       	adc	r21, r21
     dac:	22 0f       	add	r18, r18
     dae:	33 1f       	adc	r19, r19
     db0:	44 1f       	adc	r20, r20
     db2:	55 1f       	adc	r21, r21
     db4:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__udivmodsi4>
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <UART_SetBaudRate+0x7c>
     dba:	27 e6       	ldi	r18, 0x67	; 103
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	29 b9       	out	0x09, r18	; 9
     dc0:	30 bd       	out	0x20, r19	; 32
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	08 95       	ret

00000dc8 <UART_Init>:
     dc8:	28 e1       	ldi	r18, 0x18	; 24
     dca:	2a b9       	out	0x0a, r18	; 10
     dcc:	26 e8       	ldi	r18, 0x86	; 134
     dce:	20 bd       	out	0x20, r18	; 32
     dd0:	1b b8       	out	0x0b, r1	; 11
     dd2:	0e 94 a1 06 	call	0xd42	; 0xd42 <UART_SetBaudRate>
     dd6:	08 95       	ret

00000dd8 <UART_RxChar>:
     dd8:	5f 9b       	sbis	0x0b, 7	; 11
     dda:	fe cf       	rjmp	.-4      	; 0xdd8 <UART_RxChar>
     ddc:	8c b1       	in	r24, 0x0c	; 12
     dde:	08 95       	ret

00000de0 <UART_RxString>:
    if not required then comment UART_TxChar(ch) in the code.
  2.BackSlash is not taken care.
***************************************************************************************************/
#if (Enable_UART_RxString==1)
void UART_RxString(char *ptr_string)
{
     de0:	0f 93       	push	r16
     de2:	1f 93       	push	r17
     de4:	cf 93       	push	r28
     de6:	8c 01       	movw	r16, r24
	char ch;
    uint8_t len = 0;
     de8:	c0 e0       	ldi	r28, 0x00	; 0
	while(1)
	{
		ch=UART_RxChar();    //Receive a char
     dea:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <UART_RxChar>
// 		UART_TxChar(ch);     //Echo back the received char
		if((ch==';')) //read till enter key is pressed
     dee:	8b 33       	cpi	r24, 0x3B	; 59
     df0:	29 f4       	brne	.+10     	; 0xdfc <UART_RxString+0x1c>
		{						     //once enter key is pressed null terminate the string
			ptr_string[len]=';';
     df2:	f8 01       	movw	r30, r16
     df4:	ec 0f       	add	r30, r28
     df6:	f1 1d       	adc	r31, r1
     df8:	80 83       	st	Z, r24
            ptr_string[len]=ch; //copy the char into string and increment the index
            len++;
        }
	}
//   return len;   
}
     dfa:	0c c0       	rjmp	.+24     	; 0xe14 <UART_RxString+0x34>
		if((ch==';')) //read till enter key is pressed
		{						     //once enter key is pressed null terminate the string
			ptr_string[len]=';';
			break;           //and break the loop				  
		}
        else if((ch=='\b') && (len!=0))
     dfc:	88 30       	cpi	r24, 0x08	; 8
     dfe:	21 f4       	brne	.+8      	; 0xe08 <UART_RxString+0x28>
     e00:	cc 23       	and	r28, r28
     e02:	11 f0       	breq	.+4      	; 0xe08 <UART_RxString+0x28>
        {
		    len--;    //If backspace is pressed then decrement the index to remove the old char
     e04:	c1 50       	subi	r28, 0x01	; 1
     e06:	f1 cf       	rjmp	.-30     	; 0xdea <UART_RxString+0xa>
        }
        else
        {
            ptr_string[len]=ch; //copy the char into string and increment the index
     e08:	f8 01       	movw	r30, r16
     e0a:	ec 0f       	add	r30, r28
     e0c:	f1 1d       	adc	r31, r1
     e0e:	80 83       	st	Z, r24
            len++;
     e10:	cf 5f       	subi	r28, 0xFF	; 255
     e12:	eb cf       	rjmp	.-42     	; 0xdea <UART_RxString+0xa>
        }
	}
//   return len;   
}
     e14:	cf 91       	pop	r28
     e16:	1f 91       	pop	r17
     e18:	0f 91       	pop	r16
     e1a:	08 95       	ret

00000e1c <__subsf3>:
     e1c:	50 58       	subi	r21, 0x80	; 128

00000e1e <__addsf3>:
     e1e:	bb 27       	eor	r27, r27
     e20:	aa 27       	eor	r26, r26
     e22:	0e 94 26 07 	call	0xe4c	; 0xe4c <__addsf3x>
     e26:	0c 94 2e 08 	jmp	0x105c	; 0x105c <__fp_round>
     e2a:	0e 94 20 08 	call	0x1040	; 0x1040 <__fp_pscA>
     e2e:	38 f0       	brcs	.+14     	; 0xe3e <__addsf3+0x20>
     e30:	0e 94 27 08 	call	0x104e	; 0x104e <__fp_pscB>
     e34:	20 f0       	brcs	.+8      	; 0xe3e <__addsf3+0x20>
     e36:	39 f4       	brne	.+14     	; 0xe46 <__addsf3+0x28>
     e38:	9f 3f       	cpi	r25, 0xFF	; 255
     e3a:	19 f4       	brne	.+6      	; 0xe42 <__addsf3+0x24>
     e3c:	26 f4       	brtc	.+8      	; 0xe46 <__addsf3+0x28>
     e3e:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__fp_nan>
     e42:	0e f4       	brtc	.+2      	; 0xe46 <__addsf3+0x28>
     e44:	e0 95       	com	r30
     e46:	e7 fb       	bst	r30, 7
     e48:	0c 94 17 08 	jmp	0x102e	; 0x102e <__fp_inf>

00000e4c <__addsf3x>:
     e4c:	e9 2f       	mov	r30, r25
     e4e:	0e 94 3f 08 	call	0x107e	; 0x107e <__fp_split3>
     e52:	58 f3       	brcs	.-42     	; 0xe2a <__addsf3+0xc>
     e54:	ba 17       	cp	r27, r26
     e56:	62 07       	cpc	r22, r18
     e58:	73 07       	cpc	r23, r19
     e5a:	84 07       	cpc	r24, r20
     e5c:	95 07       	cpc	r25, r21
     e5e:	20 f0       	brcs	.+8      	; 0xe68 <__addsf3x+0x1c>
     e60:	79 f4       	brne	.+30     	; 0xe80 <__addsf3x+0x34>
     e62:	a6 f5       	brtc	.+104    	; 0xecc <__addsf3x+0x80>
     e64:	0c 94 61 08 	jmp	0x10c2	; 0x10c2 <__fp_zero>
     e68:	0e f4       	brtc	.+2      	; 0xe6c <__addsf3x+0x20>
     e6a:	e0 95       	com	r30
     e6c:	0b 2e       	mov	r0, r27
     e6e:	ba 2f       	mov	r27, r26
     e70:	a0 2d       	mov	r26, r0
     e72:	0b 01       	movw	r0, r22
     e74:	b9 01       	movw	r22, r18
     e76:	90 01       	movw	r18, r0
     e78:	0c 01       	movw	r0, r24
     e7a:	ca 01       	movw	r24, r20
     e7c:	a0 01       	movw	r20, r0
     e7e:	11 24       	eor	r1, r1
     e80:	ff 27       	eor	r31, r31
     e82:	59 1b       	sub	r21, r25
     e84:	99 f0       	breq	.+38     	; 0xeac <__addsf3x+0x60>
     e86:	59 3f       	cpi	r21, 0xF9	; 249
     e88:	50 f4       	brcc	.+20     	; 0xe9e <__addsf3x+0x52>
     e8a:	50 3e       	cpi	r21, 0xE0	; 224
     e8c:	68 f1       	brcs	.+90     	; 0xee8 <__addsf3x+0x9c>
     e8e:	1a 16       	cp	r1, r26
     e90:	f0 40       	sbci	r31, 0x00	; 0
     e92:	a2 2f       	mov	r26, r18
     e94:	23 2f       	mov	r18, r19
     e96:	34 2f       	mov	r19, r20
     e98:	44 27       	eor	r20, r20
     e9a:	58 5f       	subi	r21, 0xF8	; 248
     e9c:	f3 cf       	rjmp	.-26     	; 0xe84 <__addsf3x+0x38>
     e9e:	46 95       	lsr	r20
     ea0:	37 95       	ror	r19
     ea2:	27 95       	ror	r18
     ea4:	a7 95       	ror	r26
     ea6:	f0 40       	sbci	r31, 0x00	; 0
     ea8:	53 95       	inc	r21
     eaa:	c9 f7       	brne	.-14     	; 0xe9e <__addsf3x+0x52>
     eac:	7e f4       	brtc	.+30     	; 0xecc <__addsf3x+0x80>
     eae:	1f 16       	cp	r1, r31
     eb0:	ba 0b       	sbc	r27, r26
     eb2:	62 0b       	sbc	r22, r18
     eb4:	73 0b       	sbc	r23, r19
     eb6:	84 0b       	sbc	r24, r20
     eb8:	ba f0       	brmi	.+46     	; 0xee8 <__addsf3x+0x9c>
     eba:	91 50       	subi	r25, 0x01	; 1
     ebc:	a1 f0       	breq	.+40     	; 0xee6 <__addsf3x+0x9a>
     ebe:	ff 0f       	add	r31, r31
     ec0:	bb 1f       	adc	r27, r27
     ec2:	66 1f       	adc	r22, r22
     ec4:	77 1f       	adc	r23, r23
     ec6:	88 1f       	adc	r24, r24
     ec8:	c2 f7       	brpl	.-16     	; 0xeba <__addsf3x+0x6e>
     eca:	0e c0       	rjmp	.+28     	; 0xee8 <__addsf3x+0x9c>
     ecc:	ba 0f       	add	r27, r26
     ece:	62 1f       	adc	r22, r18
     ed0:	73 1f       	adc	r23, r19
     ed2:	84 1f       	adc	r24, r20
     ed4:	48 f4       	brcc	.+18     	; 0xee8 <__addsf3x+0x9c>
     ed6:	87 95       	ror	r24
     ed8:	77 95       	ror	r23
     eda:	67 95       	ror	r22
     edc:	b7 95       	ror	r27
     ede:	f7 95       	ror	r31
     ee0:	9e 3f       	cpi	r25, 0xFE	; 254
     ee2:	08 f0       	brcs	.+2      	; 0xee6 <__addsf3x+0x9a>
     ee4:	b0 cf       	rjmp	.-160    	; 0xe46 <__addsf3+0x28>
     ee6:	93 95       	inc	r25
     ee8:	88 0f       	add	r24, r24
     eea:	08 f0       	brcs	.+2      	; 0xeee <__addsf3x+0xa2>
     eec:	99 27       	eor	r25, r25
     eee:	ee 0f       	add	r30, r30
     ef0:	97 95       	ror	r25
     ef2:	87 95       	ror	r24
     ef4:	08 95       	ret

00000ef6 <__cmpsf2>:
     ef6:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__fp_cmp>
     efa:	08 f4       	brcc	.+2      	; 0xefe <__cmpsf2+0x8>
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	08 95       	ret

00000f00 <__fixsfsi>:
     f00:	0e 94 87 07 	call	0xf0e	; 0xf0e <__fixunssfsi>
     f04:	68 94       	set
     f06:	b1 11       	cpse	r27, r1
     f08:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <__fp_szero>
     f0c:	08 95       	ret

00000f0e <__fixunssfsi>:
     f0e:	0e 94 47 08 	call	0x108e	; 0x108e <__fp_splitA>
     f12:	88 f0       	brcs	.+34     	; 0xf36 <__fixunssfsi+0x28>
     f14:	9f 57       	subi	r25, 0x7F	; 127
     f16:	98 f0       	brcs	.+38     	; 0xf3e <__fixunssfsi+0x30>
     f18:	b9 2f       	mov	r27, r25
     f1a:	99 27       	eor	r25, r25
     f1c:	b7 51       	subi	r27, 0x17	; 23
     f1e:	b0 f0       	brcs	.+44     	; 0xf4c <__fixunssfsi+0x3e>
     f20:	e1 f0       	breq	.+56     	; 0xf5a <__fixunssfsi+0x4c>
     f22:	66 0f       	add	r22, r22
     f24:	77 1f       	adc	r23, r23
     f26:	88 1f       	adc	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	1a f0       	brmi	.+6      	; 0xf32 <__fixunssfsi+0x24>
     f2c:	ba 95       	dec	r27
     f2e:	c9 f7       	brne	.-14     	; 0xf22 <__fixunssfsi+0x14>
     f30:	14 c0       	rjmp	.+40     	; 0xf5a <__fixunssfsi+0x4c>
     f32:	b1 30       	cpi	r27, 0x01	; 1
     f34:	91 f0       	breq	.+36     	; 0xf5a <__fixunssfsi+0x4c>
     f36:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__fp_zero>
     f3a:	b1 e0       	ldi	r27, 0x01	; 1
     f3c:	08 95       	ret
     f3e:	0c 94 61 08 	jmp	0x10c2	; 0x10c2 <__fp_zero>
     f42:	67 2f       	mov	r22, r23
     f44:	78 2f       	mov	r23, r24
     f46:	88 27       	eor	r24, r24
     f48:	b8 5f       	subi	r27, 0xF8	; 248
     f4a:	39 f0       	breq	.+14     	; 0xf5a <__fixunssfsi+0x4c>
     f4c:	b9 3f       	cpi	r27, 0xF9	; 249
     f4e:	cc f3       	brlt	.-14     	; 0xf42 <__fixunssfsi+0x34>
     f50:	86 95       	lsr	r24
     f52:	77 95       	ror	r23
     f54:	67 95       	ror	r22
     f56:	b3 95       	inc	r27
     f58:	d9 f7       	brne	.-10     	; 0xf50 <__fixunssfsi+0x42>
     f5a:	3e f4       	brtc	.+14     	; 0xf6a <__fixunssfsi+0x5c>
     f5c:	90 95       	com	r25
     f5e:	80 95       	com	r24
     f60:	70 95       	com	r23
     f62:	61 95       	neg	r22
     f64:	7f 4f       	sbci	r23, 0xFF	; 255
     f66:	8f 4f       	sbci	r24, 0xFF	; 255
     f68:	9f 4f       	sbci	r25, 0xFF	; 255
     f6a:	08 95       	ret

00000f6c <__floatunsisf>:
     f6c:	e8 94       	clt
     f6e:	09 c0       	rjmp	.+18     	; 0xf82 <__floatsisf+0x12>

00000f70 <__floatsisf>:
     f70:	97 fb       	bst	r25, 7
     f72:	3e f4       	brtc	.+14     	; 0xf82 <__floatsisf+0x12>
     f74:	90 95       	com	r25
     f76:	80 95       	com	r24
     f78:	70 95       	com	r23
     f7a:	61 95       	neg	r22
     f7c:	7f 4f       	sbci	r23, 0xFF	; 255
     f7e:	8f 4f       	sbci	r24, 0xFF	; 255
     f80:	9f 4f       	sbci	r25, 0xFF	; 255
     f82:	99 23       	and	r25, r25
     f84:	a9 f0       	breq	.+42     	; 0xfb0 <__floatsisf+0x40>
     f86:	f9 2f       	mov	r31, r25
     f88:	96 e9       	ldi	r25, 0x96	; 150
     f8a:	bb 27       	eor	r27, r27
     f8c:	93 95       	inc	r25
     f8e:	f6 95       	lsr	r31
     f90:	87 95       	ror	r24
     f92:	77 95       	ror	r23
     f94:	67 95       	ror	r22
     f96:	b7 95       	ror	r27
     f98:	f1 11       	cpse	r31, r1
     f9a:	f8 cf       	rjmp	.-16     	; 0xf8c <__floatsisf+0x1c>
     f9c:	fa f4       	brpl	.+62     	; 0xfdc <__floatsisf+0x6c>
     f9e:	bb 0f       	add	r27, r27
     fa0:	11 f4       	brne	.+4      	; 0xfa6 <__floatsisf+0x36>
     fa2:	60 ff       	sbrs	r22, 0
     fa4:	1b c0       	rjmp	.+54     	; 0xfdc <__floatsisf+0x6c>
     fa6:	6f 5f       	subi	r22, 0xFF	; 255
     fa8:	7f 4f       	sbci	r23, 0xFF	; 255
     faa:	8f 4f       	sbci	r24, 0xFF	; 255
     fac:	9f 4f       	sbci	r25, 0xFF	; 255
     fae:	16 c0       	rjmp	.+44     	; 0xfdc <__floatsisf+0x6c>
     fb0:	88 23       	and	r24, r24
     fb2:	11 f0       	breq	.+4      	; 0xfb8 <__floatsisf+0x48>
     fb4:	96 e9       	ldi	r25, 0x96	; 150
     fb6:	11 c0       	rjmp	.+34     	; 0xfda <__floatsisf+0x6a>
     fb8:	77 23       	and	r23, r23
     fba:	21 f0       	breq	.+8      	; 0xfc4 <__floatsisf+0x54>
     fbc:	9e e8       	ldi	r25, 0x8E	; 142
     fbe:	87 2f       	mov	r24, r23
     fc0:	76 2f       	mov	r23, r22
     fc2:	05 c0       	rjmp	.+10     	; 0xfce <__floatsisf+0x5e>
     fc4:	66 23       	and	r22, r22
     fc6:	71 f0       	breq	.+28     	; 0xfe4 <__floatsisf+0x74>
     fc8:	96 e8       	ldi	r25, 0x86	; 134
     fca:	86 2f       	mov	r24, r22
     fcc:	70 e0       	ldi	r23, 0x00	; 0
     fce:	60 e0       	ldi	r22, 0x00	; 0
     fd0:	2a f0       	brmi	.+10     	; 0xfdc <__floatsisf+0x6c>
     fd2:	9a 95       	dec	r25
     fd4:	66 0f       	add	r22, r22
     fd6:	77 1f       	adc	r23, r23
     fd8:	88 1f       	adc	r24, r24
     fda:	da f7       	brpl	.-10     	; 0xfd2 <__floatsisf+0x62>
     fdc:	88 0f       	add	r24, r24
     fde:	96 95       	lsr	r25
     fe0:	87 95       	ror	r24
     fe2:	97 f9       	bld	r25, 7
     fe4:	08 95       	ret

00000fe6 <__fp_cmp>:
     fe6:	99 0f       	add	r25, r25
     fe8:	00 08       	sbc	r0, r0
     fea:	55 0f       	add	r21, r21
     fec:	aa 0b       	sbc	r26, r26
     fee:	e0 e8       	ldi	r30, 0x80	; 128
     ff0:	fe ef       	ldi	r31, 0xFE	; 254
     ff2:	16 16       	cp	r1, r22
     ff4:	17 06       	cpc	r1, r23
     ff6:	e8 07       	cpc	r30, r24
     ff8:	f9 07       	cpc	r31, r25
     ffa:	c0 f0       	brcs	.+48     	; 0x102c <__fp_cmp+0x46>
     ffc:	12 16       	cp	r1, r18
     ffe:	13 06       	cpc	r1, r19
    1000:	e4 07       	cpc	r30, r20
    1002:	f5 07       	cpc	r31, r21
    1004:	98 f0       	brcs	.+38     	; 0x102c <__fp_cmp+0x46>
    1006:	62 1b       	sub	r22, r18
    1008:	73 0b       	sbc	r23, r19
    100a:	84 0b       	sbc	r24, r20
    100c:	95 0b       	sbc	r25, r21
    100e:	39 f4       	brne	.+14     	; 0x101e <__fp_cmp+0x38>
    1010:	0a 26       	eor	r0, r26
    1012:	61 f0       	breq	.+24     	; 0x102c <__fp_cmp+0x46>
    1014:	23 2b       	or	r18, r19
    1016:	24 2b       	or	r18, r20
    1018:	25 2b       	or	r18, r21
    101a:	21 f4       	brne	.+8      	; 0x1024 <__fp_cmp+0x3e>
    101c:	08 95       	ret
    101e:	0a 26       	eor	r0, r26
    1020:	09 f4       	brne	.+2      	; 0x1024 <__fp_cmp+0x3e>
    1022:	a1 40       	sbci	r26, 0x01	; 1
    1024:	a6 95       	lsr	r26
    1026:	8f ef       	ldi	r24, 0xFF	; 255
    1028:	81 1d       	adc	r24, r1
    102a:	81 1d       	adc	r24, r1
    102c:	08 95       	ret

0000102e <__fp_inf>:
    102e:	97 f9       	bld	r25, 7
    1030:	9f 67       	ori	r25, 0x7F	; 127
    1032:	80 e8       	ldi	r24, 0x80	; 128
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	08 95       	ret

0000103a <__fp_nan>:
    103a:	9f ef       	ldi	r25, 0xFF	; 255
    103c:	80 ec       	ldi	r24, 0xC0	; 192
    103e:	08 95       	ret

00001040 <__fp_pscA>:
    1040:	00 24       	eor	r0, r0
    1042:	0a 94       	dec	r0
    1044:	16 16       	cp	r1, r22
    1046:	17 06       	cpc	r1, r23
    1048:	18 06       	cpc	r1, r24
    104a:	09 06       	cpc	r0, r25
    104c:	08 95       	ret

0000104e <__fp_pscB>:
    104e:	00 24       	eor	r0, r0
    1050:	0a 94       	dec	r0
    1052:	12 16       	cp	r1, r18
    1054:	13 06       	cpc	r1, r19
    1056:	14 06       	cpc	r1, r20
    1058:	05 06       	cpc	r0, r21
    105a:	08 95       	ret

0000105c <__fp_round>:
    105c:	09 2e       	mov	r0, r25
    105e:	03 94       	inc	r0
    1060:	00 0c       	add	r0, r0
    1062:	11 f4       	brne	.+4      	; 0x1068 <__fp_round+0xc>
    1064:	88 23       	and	r24, r24
    1066:	52 f0       	brmi	.+20     	; 0x107c <__fp_round+0x20>
    1068:	bb 0f       	add	r27, r27
    106a:	40 f4       	brcc	.+16     	; 0x107c <__fp_round+0x20>
    106c:	bf 2b       	or	r27, r31
    106e:	11 f4       	brne	.+4      	; 0x1074 <__fp_round+0x18>
    1070:	60 ff       	sbrs	r22, 0
    1072:	04 c0       	rjmp	.+8      	; 0x107c <__fp_round+0x20>
    1074:	6f 5f       	subi	r22, 0xFF	; 255
    1076:	7f 4f       	sbci	r23, 0xFF	; 255
    1078:	8f 4f       	sbci	r24, 0xFF	; 255
    107a:	9f 4f       	sbci	r25, 0xFF	; 255
    107c:	08 95       	ret

0000107e <__fp_split3>:
    107e:	57 fd       	sbrc	r21, 7
    1080:	90 58       	subi	r25, 0x80	; 128
    1082:	44 0f       	add	r20, r20
    1084:	55 1f       	adc	r21, r21
    1086:	59 f0       	breq	.+22     	; 0x109e <__fp_splitA+0x10>
    1088:	5f 3f       	cpi	r21, 0xFF	; 255
    108a:	71 f0       	breq	.+28     	; 0x10a8 <__fp_splitA+0x1a>
    108c:	47 95       	ror	r20

0000108e <__fp_splitA>:
    108e:	88 0f       	add	r24, r24
    1090:	97 fb       	bst	r25, 7
    1092:	99 1f       	adc	r25, r25
    1094:	61 f0       	breq	.+24     	; 0x10ae <__fp_splitA+0x20>
    1096:	9f 3f       	cpi	r25, 0xFF	; 255
    1098:	79 f0       	breq	.+30     	; 0x10b8 <__fp_splitA+0x2a>
    109a:	87 95       	ror	r24
    109c:	08 95       	ret
    109e:	12 16       	cp	r1, r18
    10a0:	13 06       	cpc	r1, r19
    10a2:	14 06       	cpc	r1, r20
    10a4:	55 1f       	adc	r21, r21
    10a6:	f2 cf       	rjmp	.-28     	; 0x108c <__fp_split3+0xe>
    10a8:	46 95       	lsr	r20
    10aa:	f1 df       	rcall	.-30     	; 0x108e <__fp_splitA>
    10ac:	08 c0       	rjmp	.+16     	; 0x10be <__fp_splitA+0x30>
    10ae:	16 16       	cp	r1, r22
    10b0:	17 06       	cpc	r1, r23
    10b2:	18 06       	cpc	r1, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	f1 cf       	rjmp	.-30     	; 0x109a <__fp_splitA+0xc>
    10b8:	86 95       	lsr	r24
    10ba:	71 05       	cpc	r23, r1
    10bc:	61 05       	cpc	r22, r1
    10be:	08 94       	sec
    10c0:	08 95       	ret

000010c2 <__fp_zero>:
    10c2:	e8 94       	clt

000010c4 <__fp_szero>:
    10c4:	bb 27       	eor	r27, r27
    10c6:	66 27       	eor	r22, r22
    10c8:	77 27       	eor	r23, r23
    10ca:	cb 01       	movw	r24, r22
    10cc:	97 f9       	bld	r25, 7
    10ce:	08 95       	ret

000010d0 <__gesf2>:
    10d0:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__fp_cmp>
    10d4:	08 f4       	brcc	.+2      	; 0x10d8 <__gesf2+0x8>
    10d6:	8f ef       	ldi	r24, 0xFF	; 255
    10d8:	08 95       	ret

000010da <__mulsf3>:
    10da:	0e 94 80 08 	call	0x1100	; 0x1100 <__mulsf3x>
    10de:	0c 94 2e 08 	jmp	0x105c	; 0x105c <__fp_round>
    10e2:	0e 94 20 08 	call	0x1040	; 0x1040 <__fp_pscA>
    10e6:	38 f0       	brcs	.+14     	; 0x10f6 <__mulsf3+0x1c>
    10e8:	0e 94 27 08 	call	0x104e	; 0x104e <__fp_pscB>
    10ec:	20 f0       	brcs	.+8      	; 0x10f6 <__mulsf3+0x1c>
    10ee:	95 23       	and	r25, r21
    10f0:	11 f0       	breq	.+4      	; 0x10f6 <__mulsf3+0x1c>
    10f2:	0c 94 17 08 	jmp	0x102e	; 0x102e <__fp_inf>
    10f6:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__fp_nan>
    10fa:	11 24       	eor	r1, r1
    10fc:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <__fp_szero>

00001100 <__mulsf3x>:
    1100:	0e 94 3f 08 	call	0x107e	; 0x107e <__fp_split3>
    1104:	70 f3       	brcs	.-36     	; 0x10e2 <__mulsf3+0x8>

00001106 <__mulsf3_pse>:
    1106:	95 9f       	mul	r25, r21
    1108:	c1 f3       	breq	.-16     	; 0x10fa <__mulsf3+0x20>
    110a:	95 0f       	add	r25, r21
    110c:	50 e0       	ldi	r21, 0x00	; 0
    110e:	55 1f       	adc	r21, r21
    1110:	62 9f       	mul	r22, r18
    1112:	f0 01       	movw	r30, r0
    1114:	72 9f       	mul	r23, r18
    1116:	bb 27       	eor	r27, r27
    1118:	f0 0d       	add	r31, r0
    111a:	b1 1d       	adc	r27, r1
    111c:	63 9f       	mul	r22, r19
    111e:	aa 27       	eor	r26, r26
    1120:	f0 0d       	add	r31, r0
    1122:	b1 1d       	adc	r27, r1
    1124:	aa 1f       	adc	r26, r26
    1126:	64 9f       	mul	r22, r20
    1128:	66 27       	eor	r22, r22
    112a:	b0 0d       	add	r27, r0
    112c:	a1 1d       	adc	r26, r1
    112e:	66 1f       	adc	r22, r22
    1130:	82 9f       	mul	r24, r18
    1132:	22 27       	eor	r18, r18
    1134:	b0 0d       	add	r27, r0
    1136:	a1 1d       	adc	r26, r1
    1138:	62 1f       	adc	r22, r18
    113a:	73 9f       	mul	r23, r19
    113c:	b0 0d       	add	r27, r0
    113e:	a1 1d       	adc	r26, r1
    1140:	62 1f       	adc	r22, r18
    1142:	83 9f       	mul	r24, r19
    1144:	a0 0d       	add	r26, r0
    1146:	61 1d       	adc	r22, r1
    1148:	22 1f       	adc	r18, r18
    114a:	74 9f       	mul	r23, r20
    114c:	33 27       	eor	r19, r19
    114e:	a0 0d       	add	r26, r0
    1150:	61 1d       	adc	r22, r1
    1152:	23 1f       	adc	r18, r19
    1154:	84 9f       	mul	r24, r20
    1156:	60 0d       	add	r22, r0
    1158:	21 1d       	adc	r18, r1
    115a:	82 2f       	mov	r24, r18
    115c:	76 2f       	mov	r23, r22
    115e:	6a 2f       	mov	r22, r26
    1160:	11 24       	eor	r1, r1
    1162:	9f 57       	subi	r25, 0x7F	; 127
    1164:	50 40       	sbci	r21, 0x00	; 0
    1166:	9a f0       	brmi	.+38     	; 0x118e <__mulsf3_pse+0x88>
    1168:	f1 f0       	breq	.+60     	; 0x11a6 <__mulsf3_pse+0xa0>
    116a:	88 23       	and	r24, r24
    116c:	4a f0       	brmi	.+18     	; 0x1180 <__mulsf3_pse+0x7a>
    116e:	ee 0f       	add	r30, r30
    1170:	ff 1f       	adc	r31, r31
    1172:	bb 1f       	adc	r27, r27
    1174:	66 1f       	adc	r22, r22
    1176:	77 1f       	adc	r23, r23
    1178:	88 1f       	adc	r24, r24
    117a:	91 50       	subi	r25, 0x01	; 1
    117c:	50 40       	sbci	r21, 0x00	; 0
    117e:	a9 f7       	brne	.-22     	; 0x116a <__mulsf3_pse+0x64>
    1180:	9e 3f       	cpi	r25, 0xFE	; 254
    1182:	51 05       	cpc	r21, r1
    1184:	80 f0       	brcs	.+32     	; 0x11a6 <__mulsf3_pse+0xa0>
    1186:	0c 94 17 08 	jmp	0x102e	; 0x102e <__fp_inf>
    118a:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <__fp_szero>
    118e:	5f 3f       	cpi	r21, 0xFF	; 255
    1190:	e4 f3       	brlt	.-8      	; 0x118a <__mulsf3_pse+0x84>
    1192:	98 3e       	cpi	r25, 0xE8	; 232
    1194:	d4 f3       	brlt	.-12     	; 0x118a <__mulsf3_pse+0x84>
    1196:	86 95       	lsr	r24
    1198:	77 95       	ror	r23
    119a:	67 95       	ror	r22
    119c:	b7 95       	ror	r27
    119e:	f7 95       	ror	r31
    11a0:	e7 95       	ror	r30
    11a2:	9f 5f       	subi	r25, 0xFF	; 255
    11a4:	c1 f7       	brne	.-16     	; 0x1196 <__mulsf3_pse+0x90>
    11a6:	fe 2b       	or	r31, r30
    11a8:	88 0f       	add	r24, r24
    11aa:	91 1d       	adc	r25, r1
    11ac:	96 95       	lsr	r25
    11ae:	87 95       	ror	r24
    11b0:	97 f9       	bld	r25, 7
    11b2:	08 95       	ret

000011b4 <__divmodhi4>:
    11b4:	97 fb       	bst	r25, 7
    11b6:	07 2e       	mov	r0, r23
    11b8:	16 f4       	brtc	.+4      	; 0x11be <__divmodhi4+0xa>
    11ba:	00 94       	com	r0
    11bc:	07 d0       	rcall	.+14     	; 0x11cc <__divmodhi4_neg1>
    11be:	77 fd       	sbrc	r23, 7
    11c0:	09 d0       	rcall	.+18     	; 0x11d4 <__divmodhi4_neg2>
    11c2:	0e 94 10 09 	call	0x1220	; 0x1220 <__udivmodhi4>
    11c6:	07 fc       	sbrc	r0, 7
    11c8:	05 d0       	rcall	.+10     	; 0x11d4 <__divmodhi4_neg2>
    11ca:	3e f4       	brtc	.+14     	; 0x11da <__divmodhi4_exit>

000011cc <__divmodhi4_neg1>:
    11cc:	90 95       	com	r25
    11ce:	81 95       	neg	r24
    11d0:	9f 4f       	sbci	r25, 0xFF	; 255
    11d2:	08 95       	ret

000011d4 <__divmodhi4_neg2>:
    11d4:	70 95       	com	r23
    11d6:	61 95       	neg	r22
    11d8:	7f 4f       	sbci	r23, 0xFF	; 255

000011da <__divmodhi4_exit>:
    11da:	08 95       	ret

000011dc <__udivmodsi4>:
    11dc:	a1 e2       	ldi	r26, 0x21	; 33
    11de:	1a 2e       	mov	r1, r26
    11e0:	aa 1b       	sub	r26, r26
    11e2:	bb 1b       	sub	r27, r27
    11e4:	fd 01       	movw	r30, r26
    11e6:	0d c0       	rjmp	.+26     	; 0x1202 <__udivmodsi4_ep>

000011e8 <__udivmodsi4_loop>:
    11e8:	aa 1f       	adc	r26, r26
    11ea:	bb 1f       	adc	r27, r27
    11ec:	ee 1f       	adc	r30, r30
    11ee:	ff 1f       	adc	r31, r31
    11f0:	a2 17       	cp	r26, r18
    11f2:	b3 07       	cpc	r27, r19
    11f4:	e4 07       	cpc	r30, r20
    11f6:	f5 07       	cpc	r31, r21
    11f8:	20 f0       	brcs	.+8      	; 0x1202 <__udivmodsi4_ep>
    11fa:	a2 1b       	sub	r26, r18
    11fc:	b3 0b       	sbc	r27, r19
    11fe:	e4 0b       	sbc	r30, r20
    1200:	f5 0b       	sbc	r31, r21

00001202 <__udivmodsi4_ep>:
    1202:	66 1f       	adc	r22, r22
    1204:	77 1f       	adc	r23, r23
    1206:	88 1f       	adc	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	1a 94       	dec	r1
    120c:	69 f7       	brne	.-38     	; 0x11e8 <__udivmodsi4_loop>
    120e:	60 95       	com	r22
    1210:	70 95       	com	r23
    1212:	80 95       	com	r24
    1214:	90 95       	com	r25
    1216:	9b 01       	movw	r18, r22
    1218:	ac 01       	movw	r20, r24
    121a:	bd 01       	movw	r22, r26
    121c:	cf 01       	movw	r24, r30
    121e:	08 95       	ret

00001220 <__udivmodhi4>:
    1220:	aa 1b       	sub	r26, r26
    1222:	bb 1b       	sub	r27, r27
    1224:	51 e1       	ldi	r21, 0x11	; 17
    1226:	07 c0       	rjmp	.+14     	; 0x1236 <__udivmodhi4_ep>

00001228 <__udivmodhi4_loop>:
    1228:	aa 1f       	adc	r26, r26
    122a:	bb 1f       	adc	r27, r27
    122c:	a6 17       	cp	r26, r22
    122e:	b7 07       	cpc	r27, r23
    1230:	10 f0       	brcs	.+4      	; 0x1236 <__udivmodhi4_ep>
    1232:	a6 1b       	sub	r26, r22
    1234:	b7 0b       	sbc	r27, r23

00001236 <__udivmodhi4_ep>:
    1236:	88 1f       	adc	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	5a 95       	dec	r21
    123c:	a9 f7       	brne	.-22     	; 0x1228 <__udivmodhi4_loop>
    123e:	80 95       	com	r24
    1240:	90 95       	com	r25
    1242:	bc 01       	movw	r22, r24
    1244:	cd 01       	movw	r24, r26
    1246:	08 95       	ret

00001248 <atof>:
    1248:	66 27       	eor	r22, r22
    124a:	77 27       	eor	r23, r23
    124c:	0c 94 4e 09 	jmp	0x129c	; 0x129c <strtod>

00001250 <atoi>:
    1250:	fc 01       	movw	r30, r24
    1252:	88 27       	eor	r24, r24
    1254:	99 27       	eor	r25, r25
    1256:	e8 94       	clt
    1258:	21 91       	ld	r18, Z+
    125a:	20 32       	cpi	r18, 0x20	; 32
    125c:	e9 f3       	breq	.-6      	; 0x1258 <atoi+0x8>
    125e:	29 30       	cpi	r18, 0x09	; 9
    1260:	10 f0       	brcs	.+4      	; 0x1266 <atoi+0x16>
    1262:	2e 30       	cpi	r18, 0x0E	; 14
    1264:	c8 f3       	brcs	.-14     	; 0x1258 <atoi+0x8>
    1266:	2b 32       	cpi	r18, 0x2B	; 43
    1268:	41 f0       	breq	.+16     	; 0x127a <atoi+0x2a>
    126a:	2d 32       	cpi	r18, 0x2D	; 45
    126c:	39 f4       	brne	.+14     	; 0x127c <atoi+0x2c>
    126e:	68 94       	set
    1270:	04 c0       	rjmp	.+8      	; 0x127a <atoi+0x2a>
    1272:	0e 94 46 09 	call	0x128c	; 0x128c <__mulhi_const_10>
    1276:	82 0f       	add	r24, r18
    1278:	91 1d       	adc	r25, r1
    127a:	21 91       	ld	r18, Z+
    127c:	20 53       	subi	r18, 0x30	; 48
    127e:	2a 30       	cpi	r18, 0x0A	; 10
    1280:	c0 f3       	brcs	.-16     	; 0x1272 <atoi+0x22>
    1282:	1e f4       	brtc	.+6      	; 0x128a <atoi+0x3a>
    1284:	90 95       	com	r25
    1286:	81 95       	neg	r24
    1288:	9f 4f       	sbci	r25, 0xFF	; 255
    128a:	08 95       	ret

0000128c <__mulhi_const_10>:
    128c:	7a e0       	ldi	r23, 0x0A	; 10
    128e:	97 9f       	mul	r25, r23
    1290:	90 2d       	mov	r25, r0
    1292:	87 9f       	mul	r24, r23
    1294:	80 2d       	mov	r24, r0
    1296:	91 0d       	add	r25, r1
    1298:	11 24       	eor	r1, r1
    129a:	08 95       	ret

0000129c <strtod>:
    129c:	a0 e0       	ldi	r26, 0x00	; 0
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e4 e5       	ldi	r30, 0x54	; 84
    12a2:	f9 e0       	ldi	r31, 0x09	; 9
    12a4:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <__prologue_saves__+0xc>
    12a8:	ec 01       	movw	r28, r24
    12aa:	6b 01       	movw	r12, r22
    12ac:	61 15       	cp	r22, r1
    12ae:	71 05       	cpc	r23, r1
    12b0:	19 f0       	breq	.+6      	; 0x12b8 <strtod+0x1c>
    12b2:	fb 01       	movw	r30, r22
    12b4:	91 83       	std	Z+1, r25	; 0x01
    12b6:	80 83       	st	Z, r24
    12b8:	7e 01       	movw	r14, r28
    12ba:	ff ef       	ldi	r31, 0xFF	; 255
    12bc:	ef 1a       	sub	r14, r31
    12be:	ff 0a       	sbc	r15, r31
    12c0:	08 81       	ld	r16, Y
    12c2:	80 2f       	mov	r24, r16
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	0e 94 9c 0a 	call	0x1538	; 0x1538 <isspace>
    12ca:	89 2b       	or	r24, r25
    12cc:	11 f0       	breq	.+4      	; 0x12d2 <strtod+0x36>
    12ce:	e7 01       	movw	r28, r14
    12d0:	f3 cf       	rjmp	.-26     	; 0x12b8 <strtod+0x1c>
    12d2:	0d 32       	cpi	r16, 0x2D	; 45
    12d4:	39 f4       	brne	.+14     	; 0x12e4 <strtod+0x48>
    12d6:	7e 01       	movw	r14, r28
    12d8:	82 e0       	ldi	r24, 0x02	; 2
    12da:	e8 0e       	add	r14, r24
    12dc:	f1 1c       	adc	r15, r1
    12de:	09 81       	ldd	r16, Y+1	; 0x01
    12e0:	11 e0       	ldi	r17, 0x01	; 1
    12e2:	08 c0       	rjmp	.+16     	; 0x12f4 <strtod+0x58>
    12e4:	0b 32       	cpi	r16, 0x2B	; 43
    12e6:	29 f4       	brne	.+10     	; 0x12f2 <strtod+0x56>
    12e8:	7e 01       	movw	r14, r28
    12ea:	92 e0       	ldi	r25, 0x02	; 2
    12ec:	e9 0e       	add	r14, r25
    12ee:	f1 1c       	adc	r15, r1
    12f0:	09 81       	ldd	r16, Y+1	; 0x01
    12f2:	10 e0       	ldi	r17, 0x00	; 0
    12f4:	e7 01       	movw	r28, r14
    12f6:	21 97       	sbiw	r28, 0x01	; 1
    12f8:	43 e0       	ldi	r20, 0x03	; 3
    12fa:	50 e0       	ldi	r21, 0x00	; 0
    12fc:	6c e5       	ldi	r22, 0x5C	; 92
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	ce 01       	movw	r24, r28
    1302:	0e 94 a5 0a 	call	0x154a	; 0x154a <strncasecmp_P>
    1306:	89 2b       	or	r24, r25
    1308:	c1 f4       	brne	.+48     	; 0x133a <strtod+0x9e>
    130a:	23 96       	adiw	r28, 0x03	; 3
    130c:	45 e0       	ldi	r20, 0x05	; 5
    130e:	50 e0       	ldi	r21, 0x00	; 0
    1310:	67 e5       	ldi	r22, 0x57	; 87
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	ce 01       	movw	r24, r28
    1316:	0e 94 a5 0a 	call	0x154a	; 0x154a <strncasecmp_P>
    131a:	89 2b       	or	r24, r25
    131c:	09 f4       	brne	.+2      	; 0x1320 <strtod+0x84>
    131e:	25 96       	adiw	r28, 0x05	; 5
    1320:	c1 14       	cp	r12, r1
    1322:	d1 04       	cpc	r13, r1
    1324:	19 f0       	breq	.+6      	; 0x132c <strtod+0x90>
    1326:	f6 01       	movw	r30, r12
    1328:	d1 83       	std	Z+1, r29	; 0x01
    132a:	c0 83       	st	Z, r28
    132c:	11 11       	cpse	r17, r1
    132e:	f6 c0       	rjmp	.+492    	; 0x151c <strtod+0x280>
    1330:	60 e0       	ldi	r22, 0x00	; 0
    1332:	70 e0       	ldi	r23, 0x00	; 0
    1334:	80 e8       	ldi	r24, 0x80	; 128
    1336:	9f e7       	ldi	r25, 0x7F	; 127
    1338:	fa c0       	rjmp	.+500    	; 0x152e <strtod+0x292>
    133a:	43 e0       	ldi	r20, 0x03	; 3
    133c:	50 e0       	ldi	r21, 0x00	; 0
    133e:	64 e5       	ldi	r22, 0x54	; 84
    1340:	70 e0       	ldi	r23, 0x00	; 0
    1342:	ce 01       	movw	r24, r28
    1344:	0e 94 a5 0a 	call	0x154a	; 0x154a <strncasecmp_P>
    1348:	89 2b       	or	r24, r25
    134a:	59 f4       	brne	.+22     	; 0x1362 <strtod+0xc6>
    134c:	c1 14       	cp	r12, r1
    134e:	d1 04       	cpc	r13, r1
    1350:	09 f4       	brne	.+2      	; 0x1354 <strtod+0xb8>
    1352:	e9 c0       	rjmp	.+466    	; 0x1526 <strtod+0x28a>
    1354:	f2 e0       	ldi	r31, 0x02	; 2
    1356:	ef 0e       	add	r14, r31
    1358:	f1 1c       	adc	r15, r1
    135a:	f6 01       	movw	r30, r12
    135c:	f1 82       	std	Z+1, r15	; 0x01
    135e:	e0 82       	st	Z, r14
    1360:	e2 c0       	rjmp	.+452    	; 0x1526 <strtod+0x28a>
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	a9 01       	movw	r20, r18
    1368:	c0 e0       	ldi	r28, 0x00	; 0
    136a:	d0 e0       	ldi	r29, 0x00	; 0
    136c:	f7 01       	movw	r30, r14
    136e:	80 ed       	ldi	r24, 0xD0	; 208
    1370:	a8 2e       	mov	r10, r24
    1372:	a0 0e       	add	r10, r16
    1374:	89 e0       	ldi	r24, 0x09	; 9
    1376:	8a 15       	cp	r24, r10
    1378:	30 f1       	brcs	.+76     	; 0x13c6 <strtod+0x12a>
    137a:	91 2f       	mov	r25, r17
    137c:	92 60       	ori	r25, 0x02	; 2
    137e:	b9 2e       	mov	r11, r25
    1380:	81 2f       	mov	r24, r17
    1382:	88 70       	andi	r24, 0x08	; 8
    1384:	12 ff       	sbrs	r17, 2
    1386:	04 c0       	rjmp	.+8      	; 0x1390 <strtod+0xf4>
    1388:	81 11       	cpse	r24, r1
    138a:	24 c0       	rjmp	.+72     	; 0x13d4 <strtod+0x138>
    138c:	21 96       	adiw	r28, 0x01	; 1
    138e:	22 c0       	rjmp	.+68     	; 0x13d4 <strtod+0x138>
    1390:	81 11       	cpse	r24, r1
    1392:	21 97       	sbiw	r28, 0x01	; 1
    1394:	a5 e0       	ldi	r26, 0x05	; 5
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__muluhisi3>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	aa 1f       	adc	r26, r26
    13a6:	bb 1f       	adc	r27, r27
    13a8:	9c 01       	movw	r18, r24
    13aa:	ad 01       	movw	r20, r26
    13ac:	2a 0d       	add	r18, r10
    13ae:	31 1d       	adc	r19, r1
    13b0:	41 1d       	adc	r20, r1
    13b2:	51 1d       	adc	r21, r1
    13b4:	28 39       	cpi	r18, 0x98	; 152
    13b6:	89 e9       	ldi	r24, 0x99	; 153
    13b8:	38 07       	cpc	r19, r24
    13ba:	48 07       	cpc	r20, r24
    13bc:	89 e1       	ldi	r24, 0x19	; 25
    13be:	58 07       	cpc	r21, r24
    13c0:	48 f0       	brcs	.+18     	; 0x13d4 <strtod+0x138>
    13c2:	16 60       	ori	r17, 0x06	; 6
    13c4:	06 c0       	rjmp	.+12     	; 0x13d2 <strtod+0x136>
    13c6:	9e ef       	ldi	r25, 0xFE	; 254
    13c8:	a9 12       	cpse	r10, r25
    13ca:	0a c0       	rjmp	.+20     	; 0x13e0 <strtod+0x144>
    13cc:	13 fd       	sbrc	r17, 3
    13ce:	40 c0       	rjmp	.+128    	; 0x1450 <strtod+0x1b4>
    13d0:	18 60       	ori	r17, 0x08	; 8
    13d2:	b1 2e       	mov	r11, r17
    13d4:	8f ef       	ldi	r24, 0xFF	; 255
    13d6:	e8 1a       	sub	r14, r24
    13d8:	f8 0a       	sbc	r15, r24
    13da:	00 81       	ld	r16, Z
    13dc:	1b 2d       	mov	r17, r11
    13de:	c6 cf       	rjmp	.-116    	; 0x136c <strtod+0xd0>
    13e0:	80 2f       	mov	r24, r16
    13e2:	8f 7d       	andi	r24, 0xDF	; 223
    13e4:	85 34       	cpi	r24, 0x45	; 69
    13e6:	a1 f5       	brne	.+104    	; 0x1450 <strtod+0x1b4>
    13e8:	80 81       	ld	r24, Z
    13ea:	8d 32       	cpi	r24, 0x2D	; 45
    13ec:	11 f4       	brne	.+4      	; 0x13f2 <strtod+0x156>
    13ee:	10 61       	ori	r17, 0x10	; 16
    13f0:	06 c0       	rjmp	.+12     	; 0x13fe <strtod+0x162>
    13f2:	8b 32       	cpi	r24, 0x2B	; 43
    13f4:	21 f0       	breq	.+8      	; 0x13fe <strtod+0x162>
    13f6:	31 96       	adiw	r30, 0x01	; 1
    13f8:	61 e0       	ldi	r22, 0x01	; 1
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	04 c0       	rjmp	.+8      	; 0x1406 <strtod+0x16a>
    13fe:	81 81       	ldd	r24, Z+1	; 0x01
    1400:	32 96       	adiw	r30, 0x02	; 2
    1402:	62 e0       	ldi	r22, 0x02	; 2
    1404:	70 e0       	ldi	r23, 0x00	; 0
    1406:	80 53       	subi	r24, 0x30	; 48
    1408:	8a 30       	cpi	r24, 0x0A	; 10
    140a:	18 f0       	brcs	.+6      	; 0x1412 <strtod+0x176>
    140c:	e6 1b       	sub	r30, r22
    140e:	f7 0b       	sbc	r31, r23
    1410:	1f c0       	rjmp	.+62     	; 0x1450 <strtod+0x1b4>
    1412:	60 e0       	ldi	r22, 0x00	; 0
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	60 38       	cpi	r22, 0x80	; 128
    1418:	9c e0       	ldi	r25, 0x0C	; 12
    141a:	79 07       	cpc	r23, r25
    141c:	5c f4       	brge	.+22     	; 0x1434 <strtod+0x198>
    141e:	db 01       	movw	r26, r22
    1420:	aa 0f       	add	r26, r26
    1422:	bb 1f       	adc	r27, r27
    1424:	aa 0f       	add	r26, r26
    1426:	bb 1f       	adc	r27, r27
    1428:	6a 0f       	add	r22, r26
    142a:	7b 1f       	adc	r23, r27
    142c:	66 0f       	add	r22, r22
    142e:	77 1f       	adc	r23, r23
    1430:	68 0f       	add	r22, r24
    1432:	71 1d       	adc	r23, r1
    1434:	31 96       	adiw	r30, 0x01	; 1
    1436:	df 01       	movw	r26, r30
    1438:	11 97       	sbiw	r26, 0x01	; 1
    143a:	8c 91       	ld	r24, X
    143c:	80 53       	subi	r24, 0x30	; 48
    143e:	8a 30       	cpi	r24, 0x0A	; 10
    1440:	50 f3       	brcs	.-44     	; 0x1416 <strtod+0x17a>
    1442:	14 ff       	sbrs	r17, 4
    1444:	03 c0       	rjmp	.+6      	; 0x144c <strtod+0x1b0>
    1446:	71 95       	neg	r23
    1448:	61 95       	neg	r22
    144a:	71 09       	sbc	r23, r1
    144c:	c6 0f       	add	r28, r22
    144e:	d7 1f       	adc	r29, r23
    1450:	11 ff       	sbrs	r17, 1
    1452:	08 c0       	rjmp	.+16     	; 0x1464 <strtod+0x1c8>
    1454:	c1 14       	cp	r12, r1
    1456:	d1 04       	cpc	r13, r1
    1458:	29 f0       	breq	.+10     	; 0x1464 <strtod+0x1c8>
    145a:	cf 01       	movw	r24, r30
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	f6 01       	movw	r30, r12
    1460:	91 83       	std	Z+1, r25	; 0x01
    1462:	80 83       	st	Z, r24
    1464:	ca 01       	movw	r24, r20
    1466:	b9 01       	movw	r22, r18
    1468:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__floatunsisf>
    146c:	21 2f       	mov	r18, r17
    146e:	23 70       	andi	r18, 0x03	; 3
    1470:	23 30       	cpi	r18, 0x03	; 3
    1472:	19 f0       	breq	.+6      	; 0x147a <strtod+0x1de>
    1474:	4b 01       	movw	r8, r22
    1476:	5c 01       	movw	r10, r24
    1478:	06 c0       	rjmp	.+12     	; 0x1486 <strtod+0x1ea>
    147a:	4b 01       	movw	r8, r22
    147c:	5c 01       	movw	r10, r24
    147e:	b7 fa       	bst	r11, 7
    1480:	b0 94       	com	r11
    1482:	b7 f8       	bld	r11, 7
    1484:	b0 94       	com	r11
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	a9 01       	movw	r20, r18
    148c:	c5 01       	movw	r24, r10
    148e:	b4 01       	movw	r22, r8
    1490:	0e 94 7b 07 	call	0xef6	; 0xef6 <__cmpsf2>
    1494:	88 23       	and	r24, r24
    1496:	09 f4       	brne	.+2      	; 0x149a <strtod+0x1fe>
    1498:	3e c0       	rjmp	.+124    	; 0x1516 <strtod+0x27a>
    149a:	d7 ff       	sbrs	r29, 7
    149c:	06 c0       	rjmp	.+12     	; 0x14aa <strtod+0x20e>
    149e:	d1 95       	neg	r29
    14a0:	c1 95       	neg	r28
    14a2:	d1 09       	sbc	r29, r1
    14a4:	03 e7       	ldi	r16, 0x73	; 115
    14a6:	10 e0       	ldi	r17, 0x00	; 0
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <strtod+0x212>
    14aa:	0b e8       	ldi	r16, 0x8B	; 139
    14ac:	10 e0       	ldi	r17, 0x00	; 0
    14ae:	68 01       	movw	r12, r16
    14b0:	f8 e1       	ldi	r31, 0x18	; 24
    14b2:	cf 1a       	sub	r12, r31
    14b4:	d1 08       	sbc	r13, r1
    14b6:	90 e2       	ldi	r25, 0x20	; 32
    14b8:	e9 2e       	mov	r14, r25
    14ba:	f1 2c       	mov	r15, r1
    14bc:	ce 15       	cp	r28, r14
    14be:	df 05       	cpc	r29, r15
    14c0:	74 f0       	brlt	.+28     	; 0x14de <strtod+0x242>
    14c2:	f8 01       	movw	r30, r16
    14c4:	25 91       	lpm	r18, Z+
    14c6:	35 91       	lpm	r19, Z+
    14c8:	45 91       	lpm	r20, Z+
    14ca:	54 91       	lpm	r21, Z
    14cc:	c5 01       	movw	r24, r10
    14ce:	b4 01       	movw	r22, r8
    14d0:	0e 94 6d 08 	call	0x10da	; 0x10da <__mulsf3>
    14d4:	4b 01       	movw	r8, r22
    14d6:	5c 01       	movw	r10, r24
    14d8:	ce 19       	sub	r28, r14
    14da:	df 09       	sbc	r29, r15
    14dc:	ef cf       	rjmp	.-34     	; 0x14bc <strtod+0x220>
    14de:	04 50       	subi	r16, 0x04	; 4
    14e0:	11 09       	sbc	r17, r1
    14e2:	f5 94       	asr	r15
    14e4:	e7 94       	ror	r14
    14e6:	0c 15       	cp	r16, r12
    14e8:	1d 05       	cpc	r17, r13
    14ea:	41 f7       	brne	.-48     	; 0x14bc <strtod+0x220>
    14ec:	8a 2d       	mov	r24, r10
    14ee:	88 0f       	add	r24, r24
    14f0:	8b 2d       	mov	r24, r11
    14f2:	88 1f       	adc	r24, r24
    14f4:	8f 3f       	cpi	r24, 0xFF	; 255
    14f6:	49 f0       	breq	.+18     	; 0x150a <strtod+0x26e>
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	a9 01       	movw	r20, r18
    14fe:	c5 01       	movw	r24, r10
    1500:	b4 01       	movw	r22, r8
    1502:	0e 94 7b 07 	call	0xef6	; 0xef6 <__cmpsf2>
    1506:	81 11       	cpse	r24, r1
    1508:	06 c0       	rjmp	.+12     	; 0x1516 <strtod+0x27a>
    150a:	82 e2       	ldi	r24, 0x22	; 34
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <errno+0x1>
    1512:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <errno>
    1516:	c5 01       	movw	r24, r10
    1518:	b4 01       	movw	r22, r8
    151a:	09 c0       	rjmp	.+18     	; 0x152e <strtod+0x292>
    151c:	60 e0       	ldi	r22, 0x00	; 0
    151e:	70 e0       	ldi	r23, 0x00	; 0
    1520:	80 e8       	ldi	r24, 0x80	; 128
    1522:	9f ef       	ldi	r25, 0xFF	; 255
    1524:	04 c0       	rjmp	.+8      	; 0x152e <strtod+0x292>
    1526:	60 e0       	ldi	r22, 0x00	; 0
    1528:	70 e0       	ldi	r23, 0x00	; 0
    152a:	80 ec       	ldi	r24, 0xC0	; 192
    152c:	9f e7       	ldi	r25, 0x7F	; 127
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	ec e0       	ldi	r30, 0x0C	; 12
    1534:	0c 94 ed 0a 	jmp	0x15da	; 0x15da <__epilogue_restores__+0xc>

00001538 <isspace>:
    1538:	91 11       	cpse	r25, r1
    153a:	0c 94 bd 0a 	jmp	0x157a	; 0x157a <__ctype_isfalse>
    153e:	80 32       	cpi	r24, 0x20	; 32
    1540:	19 f0       	breq	.+6      	; 0x1548 <isspace+0x10>
    1542:	89 50       	subi	r24, 0x09	; 9
    1544:	85 50       	subi	r24, 0x05	; 5
    1546:	c8 f7       	brcc	.-14     	; 0x153a <isspace+0x2>
    1548:	08 95       	ret

0000154a <strncasecmp_P>:
    154a:	fb 01       	movw	r30, r22
    154c:	dc 01       	movw	r26, r24
    154e:	41 50       	subi	r20, 0x01	; 1
    1550:	50 40       	sbci	r21, 0x00	; 0
    1552:	88 f0       	brcs	.+34     	; 0x1576 <strncasecmp_P+0x2c>
    1554:	8d 91       	ld	r24, X+
    1556:	81 34       	cpi	r24, 0x41	; 65
    1558:	1c f0       	brlt	.+6      	; 0x1560 <strncasecmp_P+0x16>
    155a:	8b 35       	cpi	r24, 0x5B	; 91
    155c:	0c f4       	brge	.+2      	; 0x1560 <strncasecmp_P+0x16>
    155e:	80 5e       	subi	r24, 0xE0	; 224
    1560:	65 91       	lpm	r22, Z+
    1562:	61 34       	cpi	r22, 0x41	; 65
    1564:	1c f0       	brlt	.+6      	; 0x156c <strncasecmp_P+0x22>
    1566:	6b 35       	cpi	r22, 0x5B	; 91
    1568:	0c f4       	brge	.+2      	; 0x156c <strncasecmp_P+0x22>
    156a:	60 5e       	subi	r22, 0xE0	; 224
    156c:	86 1b       	sub	r24, r22
    156e:	61 11       	cpse	r22, r1
    1570:	71 f3       	breq	.-36     	; 0x154e <strncasecmp_P+0x4>
    1572:	99 0b       	sbc	r25, r25
    1574:	08 95       	ret
    1576:	88 1b       	sub	r24, r24
    1578:	fc cf       	rjmp	.-8      	; 0x1572 <strncasecmp_P+0x28>

0000157a <__ctype_isfalse>:
    157a:	99 27       	eor	r25, r25
    157c:	88 27       	eor	r24, r24

0000157e <__ctype_istrue>:
    157e:	08 95       	ret

00001580 <__muluhisi3>:
    1580:	0e 94 02 0b 	call	0x1604	; 0x1604 <__umulhisi3>
    1584:	a5 9f       	mul	r26, r21
    1586:	90 0d       	add	r25, r0
    1588:	b4 9f       	mul	r27, r20
    158a:	90 0d       	add	r25, r0
    158c:	a4 9f       	mul	r26, r20
    158e:	80 0d       	add	r24, r0
    1590:	91 1d       	adc	r25, r1
    1592:	11 24       	eor	r1, r1
    1594:	08 95       	ret

00001596 <__prologue_saves__>:
    1596:	2f 92       	push	r2
    1598:	3f 92       	push	r3
    159a:	4f 92       	push	r4
    159c:	5f 92       	push	r5
    159e:	6f 92       	push	r6
    15a0:	7f 92       	push	r7
    15a2:	8f 92       	push	r8
    15a4:	9f 92       	push	r9
    15a6:	af 92       	push	r10
    15a8:	bf 92       	push	r11
    15aa:	cf 92       	push	r12
    15ac:	df 92       	push	r13
    15ae:	ef 92       	push	r14
    15b0:	ff 92       	push	r15
    15b2:	0f 93       	push	r16
    15b4:	1f 93       	push	r17
    15b6:	cf 93       	push	r28
    15b8:	df 93       	push	r29
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    15be:	ca 1b       	sub	r28, r26
    15c0:	db 0b       	sbc	r29, r27
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	de bf       	out	0x3e, r29	; 62
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	cd bf       	out	0x3d, r28	; 61
    15cc:	09 94       	ijmp

000015ce <__epilogue_restores__>:
    15ce:	2a 88       	ldd	r2, Y+18	; 0x12
    15d0:	39 88       	ldd	r3, Y+17	; 0x11
    15d2:	48 88       	ldd	r4, Y+16	; 0x10
    15d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    15d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    15d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    15da:	8c 84       	ldd	r8, Y+12	; 0x0c
    15dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    15de:	aa 84       	ldd	r10, Y+10	; 0x0a
    15e0:	b9 84       	ldd	r11, Y+9	; 0x09
    15e2:	c8 84       	ldd	r12, Y+8	; 0x08
    15e4:	df 80       	ldd	r13, Y+7	; 0x07
    15e6:	ee 80       	ldd	r14, Y+6	; 0x06
    15e8:	fd 80       	ldd	r15, Y+5	; 0x05
    15ea:	0c 81       	ldd	r16, Y+4	; 0x04
    15ec:	1b 81       	ldd	r17, Y+3	; 0x03
    15ee:	aa 81       	ldd	r26, Y+2	; 0x02
    15f0:	b9 81       	ldd	r27, Y+1	; 0x01
    15f2:	ce 0f       	add	r28, r30
    15f4:	d1 1d       	adc	r29, r1
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	de bf       	out	0x3e, r29	; 62
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	cd bf       	out	0x3d, r28	; 61
    1600:	ed 01       	movw	r28, r26
    1602:	08 95       	ret

00001604 <__umulhisi3>:
    1604:	a2 9f       	mul	r26, r18
    1606:	b0 01       	movw	r22, r0
    1608:	b3 9f       	mul	r27, r19
    160a:	c0 01       	movw	r24, r0
    160c:	a3 9f       	mul	r26, r19
    160e:	70 0d       	add	r23, r0
    1610:	81 1d       	adc	r24, r1
    1612:	11 24       	eor	r1, r1
    1614:	91 1d       	adc	r25, r1
    1616:	b2 9f       	mul	r27, r18
    1618:	70 0d       	add	r23, r0
    161a:	81 1d       	adc	r24, r1
    161c:	11 24       	eor	r1, r1
    161e:	91 1d       	adc	r25, r1
    1620:	08 95       	ret

00001622 <_exit>:
    1622:	f8 94       	cli

00001624 <__stop_program>:
    1624:	ff cf       	rjmp	.-2      	; 0x1624 <__stop_program>
