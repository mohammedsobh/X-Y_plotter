
X-Y_plotter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000108c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00001100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004a  00800060  00800060  00001100  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001100  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001130  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029de  00000000  00000000  0000131c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bdb  00000000  00000000  00003cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015a3  00000000  00000000  000048d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003cc  00000000  00000000  00005e78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063d  00000000  00000000  00006244  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015ec  00000000  00000000  00006881  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00007e6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	20 e0       	ldi	r18, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 3a       	cpi	r26, 0xAA	; 170
      6c:	b2 07       	cpc	r27, r18
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 ff 02 	call	0x5fe	; 0x5fe <main>
      74:	0c 94 44 08 	jmp	0x1088	; 0x1088 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <second_value>:
//***second_value_function***
//this function take one variable, and search in it about the location of ","
//then put the characters after "," in a new array of characters
//then convert string to integer value ,then return it
int second_value (char* String)
{
      7c:	ef 92       	push	r14
      7e:	ff 92       	push	r15
      80:	0f 93       	push	r16
      82:	1f 93       	push	r17
      84:	cf 93       	push	r28
      86:	df 93       	push	r29
      88:	cd b7       	in	r28, 0x3d	; 61
      8a:	de b7       	in	r29, 0x3e	; 62
      8c:	fc 01       	movw	r30, r24
          break;
    }
    for (j=0;j<length;j++)
        h [j] = String[j+i+1];
    return (atoi(h));
}
      8e:	0d b7       	in	r16, 0x3d	; 61
      90:	1e b7       	in	r17, 0x3e	; 62
//then put the characters after "," in a new array of characters
//then convert string to integer value ,then return it
int second_value (char* String)
{
    int i,j;
    int length = strlen (String);
      92:	dc 01       	movw	r26, r24
      94:	0d 90       	ld	r0, X+
      96:	00 20       	and	r0, r0
      98:	e9 f7       	brne	.-6      	; 0x94 <second_value+0x18>
      9a:	11 97       	sbiw	r26, 0x01	; 1
      9c:	bd 01       	movw	r22, r26
      9e:	68 1b       	sub	r22, r24
      a0:	79 0b       	sbc	r23, r25
      a2:	7b 01       	movw	r14, r22
    char h [length];
      a4:	8d b7       	in	r24, 0x3d	; 61
      a6:	9e b7       	in	r25, 0x3e	; 62
      a8:	86 1b       	sub	r24, r22
      aa:	97 0b       	sbc	r25, r23
      ac:	0f b6       	in	r0, 0x3f	; 63
      ae:	f8 94       	cli
      b0:	9e bf       	out	0x3e, r25	; 62
      b2:	0f be       	out	0x3f, r0	; 63
      b4:	8d bf       	out	0x3d, r24	; 61
      b6:	4d b7       	in	r20, 0x3d	; 61
      b8:	5e b7       	in	r21, 0x3e	; 62
      ba:	4f 5f       	subi	r20, 0xFF	; 255
      bc:	5f 4f       	sbci	r21, 0xFF	; 255
    for (i=0;i< length;i++)
      be:	16 16       	cp	r1, r22
      c0:	17 06       	cpc	r1, r23
      c2:	14 f5       	brge	.+68     	; 0x108 <second_value+0x8c>
    {
        if (String [i] == ',')
      c4:	80 81       	ld	r24, Z
      c6:	8c 32       	cpi	r24, 0x2C	; 44
      c8:	a1 f0       	breq	.+40     	; 0xf2 <second_value+0x76>
      ca:	df 01       	movw	r26, r30
      cc:	11 96       	adiw	r26, 0x01	; 1
      ce:	20 e0       	ldi	r18, 0x00	; 0
      d0:	30 e0       	ldi	r19, 0x00	; 0
      d2:	03 c0       	rjmp	.+6      	; 0xda <second_value+0x5e>
      d4:	9d 91       	ld	r25, X+
      d6:	9c 32       	cpi	r25, 0x2C	; 44
      d8:	71 f0       	breq	.+28     	; 0xf6 <second_value+0x7a>
int second_value (char* String)
{
    int i,j;
    int length = strlen (String);
    char h [length];
    for (i=0;i< length;i++)
      da:	2f 5f       	subi	r18, 0xFF	; 255
      dc:	3f 4f       	sbci	r19, 0xFF	; 255
      de:	e2 16       	cp	r14, r18
      e0:	f3 06       	cpc	r15, r19
      e2:	c1 f7       	brne	.-16     	; 0xd4 <second_value+0x58>
      e4:	08 c0       	rjmp	.+16     	; 0xf6 <second_value+0x7a>
    {
        if (String [i] == ',')
          break;
    }
    for (j=0;j<length;j++)
        h [j] = String[j+i+1];
      e6:	91 91       	ld	r25, Z+
      e8:	9d 93       	st	X+, r25
    for (i=0;i< length;i++)
    {
        if (String [i] == ',')
          break;
    }
    for (j=0;j<length;j++)
      ea:	a2 17       	cp	r26, r18
      ec:	b3 07       	cpc	r27, r19
      ee:	d9 f7       	brne	.-10     	; 0xe6 <second_value+0x6a>
      f0:	0b c0       	rjmp	.+22     	; 0x108 <second_value+0x8c>
int second_value (char* String)
{
    int i,j;
    int length = strlen (String);
    char h [length];
    for (i=0;i< length;i++)
      f2:	20 e0       	ldi	r18, 0x00	; 0
      f4:	30 e0       	ldi	r19, 0x00	; 0
      f6:	2f 5f       	subi	r18, 0xFF	; 255
      f8:	3f 4f       	sbci	r19, 0xFF	; 255
      fa:	e2 0f       	add	r30, r18
      fc:	f3 1f       	adc	r31, r19
      fe:	da 01       	movw	r26, r20
     100:	9a 01       	movw	r18, r20
     102:	26 0f       	add	r18, r22
     104:	37 1f       	adc	r19, r23
     106:	ef cf       	rjmp	.-34     	; 0xe6 <second_value+0x6a>
        if (String [i] == ',')
          break;
    }
    for (j=0;j<length;j++)
        h [j] = String[j+i+1];
    return (atoi(h));
     108:	ca 01       	movw	r24, r20
     10a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <atoi>
}
     10e:	0f b6       	in	r0, 0x3f	; 63
     110:	f8 94       	cli
     112:	1e bf       	out	0x3e, r17	; 62
     114:	0f be       	out	0x3f, r0	; 63
     116:	0d bf       	out	0x3d, r16	; 61
     118:	df 91       	pop	r29
     11a:	cf 91       	pop	r28
     11c:	1f 91       	pop	r17
     11e:	0f 91       	pop	r16
     120:	ff 90       	pop	r15
     122:	ef 90       	pop	r14
     124:	08 95       	ret

00000126 <sub_function>:
//call by reference is used to make a change in it, to save the new value
//this function return a value that the motor have to move
//this value could be negative or positive, it realize the direction of movements
int sub_function (int* current_pos, int new_pos)
{
    int x = new_pos - *current_pos;
     126:	fc 01       	movw	r30, r24
     128:	20 81       	ld	r18, Z
     12a:	31 81       	ldd	r19, Z+1	; 0x01
    *current_pos = new_pos;
     12c:	71 83       	std	Z+1, r23	; 0x01
     12e:	60 83       	st	Z, r22
    return x;
     130:	cb 01       	movw	r24, r22
     132:	82 1b       	sub	r24, r18
     134:	93 0b       	sbc	r25, r19
     136:	08 95       	ret

00000138 <pinChange>:
}

void Lcd4_Shift_Left()
{
	Lcd4_Cmd(0x01);
	Lcd4_Cmd(0x08);
     138:	67 2b       	or	r22, r23
     13a:	09 f0       	breq	.+2      	; 0x13e <pinChange+0x6>
     13c:	9f c0       	rjmp	.+318    	; 0x27c <pinChange+0x144>
     13e:	00 97       	sbiw	r24, 0x00	; 0
     140:	11 f4       	brne	.+4      	; 0x146 <pinChange+0xe>
     142:	d8 98       	cbi	0x1b, 0	; 27
     144:	08 95       	ret
     146:	81 30       	cpi	r24, 0x01	; 1
     148:	91 05       	cpc	r25, r1
     14a:	11 f4       	brne	.+4      	; 0x150 <pinChange+0x18>
     14c:	d9 98       	cbi	0x1b, 1	; 27
     14e:	08 95       	ret
     150:	82 30       	cpi	r24, 0x02	; 2
     152:	91 05       	cpc	r25, r1
     154:	11 f4       	brne	.+4      	; 0x15a <pinChange+0x22>
     156:	da 98       	cbi	0x1b, 2	; 27
     158:	08 95       	ret
     15a:	83 30       	cpi	r24, 0x03	; 3
     15c:	91 05       	cpc	r25, r1
     15e:	11 f4       	brne	.+4      	; 0x164 <pinChange+0x2c>
     160:	db 98       	cbi	0x1b, 3	; 27
     162:	08 95       	ret
     164:	84 30       	cpi	r24, 0x04	; 4
     166:	91 05       	cpc	r25, r1
     168:	11 f4       	brne	.+4      	; 0x16e <pinChange+0x36>
     16a:	dc 98       	cbi	0x1b, 4	; 27
     16c:	08 95       	ret
     16e:	85 30       	cpi	r24, 0x05	; 5
     170:	91 05       	cpc	r25, r1
     172:	11 f4       	brne	.+4      	; 0x178 <pinChange+0x40>
     174:	dd 98       	cbi	0x1b, 5	; 27
     176:	08 95       	ret
     178:	86 30       	cpi	r24, 0x06	; 6
     17a:	91 05       	cpc	r25, r1
     17c:	11 f4       	brne	.+4      	; 0x182 <pinChange+0x4a>
     17e:	de 98       	cbi	0x1b, 6	; 27
     180:	08 95       	ret
     182:	87 30       	cpi	r24, 0x07	; 7
     184:	91 05       	cpc	r25, r1
     186:	11 f4       	brne	.+4      	; 0x18c <pinChange+0x54>
     188:	df 98       	cbi	0x1b, 7	; 27
     18a:	08 95       	ret
     18c:	8a 30       	cpi	r24, 0x0A	; 10
     18e:	91 05       	cpc	r25, r1
     190:	11 f4       	brne	.+4      	; 0x196 <pinChange+0x5e>
     192:	c0 98       	cbi	0x18, 0	; 24
     194:	08 95       	ret
     196:	8b 30       	cpi	r24, 0x0B	; 11
     198:	91 05       	cpc	r25, r1
     19a:	11 f4       	brne	.+4      	; 0x1a0 <pinChange+0x68>
     19c:	c1 98       	cbi	0x18, 1	; 24
     19e:	08 95       	ret
     1a0:	8c 30       	cpi	r24, 0x0C	; 12
     1a2:	91 05       	cpc	r25, r1
     1a4:	11 f4       	brne	.+4      	; 0x1aa <pinChange+0x72>
     1a6:	c2 98       	cbi	0x18, 2	; 24
     1a8:	08 95       	ret
     1aa:	8d 30       	cpi	r24, 0x0D	; 13
     1ac:	91 05       	cpc	r25, r1
     1ae:	11 f4       	brne	.+4      	; 0x1b4 <pinChange+0x7c>
     1b0:	c3 98       	cbi	0x18, 3	; 24
     1b2:	08 95       	ret
     1b4:	8e 30       	cpi	r24, 0x0E	; 14
     1b6:	91 05       	cpc	r25, r1
     1b8:	11 f4       	brne	.+4      	; 0x1be <pinChange+0x86>
     1ba:	c4 98       	cbi	0x18, 4	; 24
     1bc:	08 95       	ret
     1be:	8f 30       	cpi	r24, 0x0F	; 15
     1c0:	91 05       	cpc	r25, r1
     1c2:	11 f4       	brne	.+4      	; 0x1c8 <pinChange+0x90>
     1c4:	c5 98       	cbi	0x18, 5	; 24
     1c6:	08 95       	ret
     1c8:	80 31       	cpi	r24, 0x10	; 16
     1ca:	91 05       	cpc	r25, r1
     1cc:	11 f4       	brne	.+4      	; 0x1d2 <pinChange+0x9a>
     1ce:	c6 98       	cbi	0x18, 6	; 24
     1d0:	08 95       	ret
     1d2:	81 31       	cpi	r24, 0x11	; 17
     1d4:	91 05       	cpc	r25, r1
     1d6:	11 f4       	brne	.+4      	; 0x1dc <pinChange+0xa4>
     1d8:	c7 98       	cbi	0x18, 7	; 24
     1da:	08 95       	ret
     1dc:	84 31       	cpi	r24, 0x14	; 20
     1de:	91 05       	cpc	r25, r1
     1e0:	11 f4       	brne	.+4      	; 0x1e6 <pinChange+0xae>
     1e2:	a8 98       	cbi	0x15, 0	; 21
     1e4:	08 95       	ret
     1e6:	85 31       	cpi	r24, 0x15	; 21
     1e8:	91 05       	cpc	r25, r1
     1ea:	11 f4       	brne	.+4      	; 0x1f0 <pinChange+0xb8>
     1ec:	a9 98       	cbi	0x15, 1	; 21
     1ee:	08 95       	ret
     1f0:	86 31       	cpi	r24, 0x16	; 22
     1f2:	91 05       	cpc	r25, r1
     1f4:	11 f4       	brne	.+4      	; 0x1fa <pinChange+0xc2>
     1f6:	aa 98       	cbi	0x15, 2	; 21
     1f8:	08 95       	ret
     1fa:	87 31       	cpi	r24, 0x17	; 23
     1fc:	91 05       	cpc	r25, r1
     1fe:	11 f4       	brne	.+4      	; 0x204 <pinChange+0xcc>
     200:	ab 98       	cbi	0x15, 3	; 21
     202:	08 95       	ret
     204:	88 31       	cpi	r24, 0x18	; 24
     206:	91 05       	cpc	r25, r1
     208:	11 f4       	brne	.+4      	; 0x20e <pinChange+0xd6>
     20a:	ac 98       	cbi	0x15, 4	; 21
     20c:	08 95       	ret
     20e:	89 31       	cpi	r24, 0x19	; 25
     210:	91 05       	cpc	r25, r1
     212:	11 f4       	brne	.+4      	; 0x218 <pinChange+0xe0>
     214:	ad 98       	cbi	0x15, 5	; 21
     216:	08 95       	ret
     218:	8a 31       	cpi	r24, 0x1A	; 26
     21a:	91 05       	cpc	r25, r1
     21c:	11 f4       	brne	.+4      	; 0x222 <pinChange+0xea>
     21e:	ae 98       	cbi	0x15, 6	; 21
     220:	08 95       	ret
     222:	8b 31       	cpi	r24, 0x1B	; 27
     224:	91 05       	cpc	r25, r1
     226:	11 f4       	brne	.+4      	; 0x22c <pinChange+0xf4>
     228:	af 98       	cbi	0x15, 7	; 21
     22a:	08 95       	ret
     22c:	8e 31       	cpi	r24, 0x1E	; 30
     22e:	91 05       	cpc	r25, r1
     230:	11 f4       	brne	.+4      	; 0x236 <pinChange+0xfe>
     232:	90 98       	cbi	0x12, 0	; 18
     234:	08 95       	ret
     236:	8f 31       	cpi	r24, 0x1F	; 31
     238:	91 05       	cpc	r25, r1
     23a:	11 f4       	brne	.+4      	; 0x240 <pinChange+0x108>
     23c:	91 98       	cbi	0x12, 1	; 18
     23e:	08 95       	ret
     240:	80 32       	cpi	r24, 0x20	; 32
     242:	91 05       	cpc	r25, r1
     244:	11 f4       	brne	.+4      	; 0x24a <pinChange+0x112>
     246:	92 98       	cbi	0x12, 2	; 18
     248:	08 95       	ret
     24a:	81 32       	cpi	r24, 0x21	; 33
     24c:	91 05       	cpc	r25, r1
     24e:	11 f4       	brne	.+4      	; 0x254 <pinChange+0x11c>
     250:	93 98       	cbi	0x12, 3	; 18
     252:	08 95       	ret
     254:	82 32       	cpi	r24, 0x22	; 34
     256:	91 05       	cpc	r25, r1
     258:	11 f4       	brne	.+4      	; 0x25e <pinChange+0x126>
     25a:	94 98       	cbi	0x12, 4	; 18
     25c:	08 95       	ret
     25e:	83 32       	cpi	r24, 0x23	; 35
     260:	91 05       	cpc	r25, r1
     262:	11 f4       	brne	.+4      	; 0x268 <pinChange+0x130>
     264:	95 98       	cbi	0x12, 5	; 18
     266:	08 95       	ret
     268:	84 32       	cpi	r24, 0x24	; 36
     26a:	91 05       	cpc	r25, r1
     26c:	11 f4       	brne	.+4      	; 0x272 <pinChange+0x13a>
     26e:	96 98       	cbi	0x12, 6	; 18
     270:	08 95       	ret
     272:	85 97       	sbiw	r24, 0x25	; 37
     274:	09 f0       	breq	.+2      	; 0x278 <pinChange+0x140>
     276:	9f c0       	rjmp	.+318    	; 0x3b6 <pinChange+0x27e>
     278:	97 98       	cbi	0x12, 7	; 18
     27a:	08 95       	ret
     27c:	00 97       	sbiw	r24, 0x00	; 0
     27e:	11 f4       	brne	.+4      	; 0x284 <pinChange+0x14c>
     280:	d8 9a       	sbi	0x1b, 0	; 27
     282:	08 95       	ret
     284:	81 30       	cpi	r24, 0x01	; 1
     286:	91 05       	cpc	r25, r1
     288:	11 f4       	brne	.+4      	; 0x28e <pinChange+0x156>
     28a:	d9 9a       	sbi	0x1b, 1	; 27
     28c:	08 95       	ret
     28e:	82 30       	cpi	r24, 0x02	; 2
     290:	91 05       	cpc	r25, r1
     292:	11 f4       	brne	.+4      	; 0x298 <pinChange+0x160>
     294:	da 9a       	sbi	0x1b, 2	; 27
     296:	08 95       	ret
     298:	83 30       	cpi	r24, 0x03	; 3
     29a:	91 05       	cpc	r25, r1
     29c:	11 f4       	brne	.+4      	; 0x2a2 <pinChange+0x16a>
     29e:	db 9a       	sbi	0x1b, 3	; 27
     2a0:	08 95       	ret
     2a2:	84 30       	cpi	r24, 0x04	; 4
     2a4:	91 05       	cpc	r25, r1
     2a6:	11 f4       	brne	.+4      	; 0x2ac <pinChange+0x174>
     2a8:	dc 9a       	sbi	0x1b, 4	; 27
     2aa:	08 95       	ret
     2ac:	85 30       	cpi	r24, 0x05	; 5
     2ae:	91 05       	cpc	r25, r1
     2b0:	11 f4       	brne	.+4      	; 0x2b6 <pinChange+0x17e>
     2b2:	dd 9a       	sbi	0x1b, 5	; 27
     2b4:	08 95       	ret
     2b6:	86 30       	cpi	r24, 0x06	; 6
     2b8:	91 05       	cpc	r25, r1
     2ba:	11 f4       	brne	.+4      	; 0x2c0 <pinChange+0x188>
     2bc:	de 9a       	sbi	0x1b, 6	; 27
     2be:	08 95       	ret
     2c0:	87 30       	cpi	r24, 0x07	; 7
     2c2:	91 05       	cpc	r25, r1
     2c4:	11 f4       	brne	.+4      	; 0x2ca <pinChange+0x192>
     2c6:	df 9a       	sbi	0x1b, 7	; 27
     2c8:	08 95       	ret
     2ca:	8a 30       	cpi	r24, 0x0A	; 10
     2cc:	91 05       	cpc	r25, r1
     2ce:	11 f4       	brne	.+4      	; 0x2d4 <pinChange+0x19c>
     2d0:	c0 9a       	sbi	0x18, 0	; 24
     2d2:	08 95       	ret
     2d4:	8b 30       	cpi	r24, 0x0B	; 11
     2d6:	91 05       	cpc	r25, r1
     2d8:	11 f4       	brne	.+4      	; 0x2de <pinChange+0x1a6>
     2da:	c1 9a       	sbi	0x18, 1	; 24
     2dc:	08 95       	ret
     2de:	8c 30       	cpi	r24, 0x0C	; 12
     2e0:	91 05       	cpc	r25, r1
     2e2:	11 f4       	brne	.+4      	; 0x2e8 <pinChange+0x1b0>
     2e4:	c2 9a       	sbi	0x18, 2	; 24
     2e6:	08 95       	ret
     2e8:	8d 30       	cpi	r24, 0x0D	; 13
     2ea:	91 05       	cpc	r25, r1
     2ec:	11 f4       	brne	.+4      	; 0x2f2 <pinChange+0x1ba>
     2ee:	c3 9a       	sbi	0x18, 3	; 24
     2f0:	08 95       	ret
     2f2:	8e 30       	cpi	r24, 0x0E	; 14
     2f4:	91 05       	cpc	r25, r1
     2f6:	11 f4       	brne	.+4      	; 0x2fc <pinChange+0x1c4>
     2f8:	c4 9a       	sbi	0x18, 4	; 24
     2fa:	08 95       	ret
     2fc:	8f 30       	cpi	r24, 0x0F	; 15
     2fe:	91 05       	cpc	r25, r1
     300:	11 f4       	brne	.+4      	; 0x306 <pinChange+0x1ce>
     302:	c5 9a       	sbi	0x18, 5	; 24
     304:	08 95       	ret
     306:	80 31       	cpi	r24, 0x10	; 16
     308:	91 05       	cpc	r25, r1
     30a:	11 f4       	brne	.+4      	; 0x310 <pinChange+0x1d8>
     30c:	c6 9a       	sbi	0x18, 6	; 24
     30e:	08 95       	ret
     310:	81 31       	cpi	r24, 0x11	; 17
     312:	91 05       	cpc	r25, r1
     314:	11 f4       	brne	.+4      	; 0x31a <pinChange+0x1e2>
     316:	c7 9a       	sbi	0x18, 7	; 24
     318:	08 95       	ret
     31a:	84 31       	cpi	r24, 0x14	; 20
     31c:	91 05       	cpc	r25, r1
     31e:	11 f4       	brne	.+4      	; 0x324 <pinChange+0x1ec>
     320:	a8 9a       	sbi	0x15, 0	; 21
     322:	08 95       	ret
     324:	85 31       	cpi	r24, 0x15	; 21
     326:	91 05       	cpc	r25, r1
     328:	11 f4       	brne	.+4      	; 0x32e <pinChange+0x1f6>
     32a:	a9 9a       	sbi	0x15, 1	; 21
     32c:	08 95       	ret
     32e:	86 31       	cpi	r24, 0x16	; 22
     330:	91 05       	cpc	r25, r1
     332:	11 f4       	brne	.+4      	; 0x338 <pinChange+0x200>
     334:	aa 9a       	sbi	0x15, 2	; 21
     336:	08 95       	ret
     338:	87 31       	cpi	r24, 0x17	; 23
     33a:	91 05       	cpc	r25, r1
     33c:	11 f4       	brne	.+4      	; 0x342 <pinChange+0x20a>
     33e:	ab 9a       	sbi	0x15, 3	; 21
     340:	08 95       	ret
     342:	88 31       	cpi	r24, 0x18	; 24
     344:	91 05       	cpc	r25, r1
     346:	11 f4       	brne	.+4      	; 0x34c <pinChange+0x214>
     348:	ac 9a       	sbi	0x15, 4	; 21
     34a:	08 95       	ret
     34c:	89 31       	cpi	r24, 0x19	; 25
     34e:	91 05       	cpc	r25, r1
     350:	11 f4       	brne	.+4      	; 0x356 <pinChange+0x21e>
     352:	ad 9a       	sbi	0x15, 5	; 21
     354:	08 95       	ret
     356:	8a 31       	cpi	r24, 0x1A	; 26
     358:	91 05       	cpc	r25, r1
     35a:	11 f4       	brne	.+4      	; 0x360 <pinChange+0x228>
     35c:	ae 9a       	sbi	0x15, 6	; 21
     35e:	08 95       	ret
     360:	8b 31       	cpi	r24, 0x1B	; 27
     362:	91 05       	cpc	r25, r1
     364:	11 f4       	brne	.+4      	; 0x36a <pinChange+0x232>
     366:	af 9a       	sbi	0x15, 7	; 21
     368:	08 95       	ret
     36a:	8e 31       	cpi	r24, 0x1E	; 30
     36c:	91 05       	cpc	r25, r1
     36e:	11 f4       	brne	.+4      	; 0x374 <pinChange+0x23c>
     370:	90 9a       	sbi	0x12, 0	; 18
     372:	08 95       	ret
     374:	8f 31       	cpi	r24, 0x1F	; 31
     376:	91 05       	cpc	r25, r1
     378:	11 f4       	brne	.+4      	; 0x37e <pinChange+0x246>
     37a:	91 9a       	sbi	0x12, 1	; 18
     37c:	08 95       	ret
     37e:	80 32       	cpi	r24, 0x20	; 32
     380:	91 05       	cpc	r25, r1
     382:	11 f4       	brne	.+4      	; 0x388 <pinChange+0x250>
     384:	92 9a       	sbi	0x12, 2	; 18
     386:	08 95       	ret
     388:	81 32       	cpi	r24, 0x21	; 33
     38a:	91 05       	cpc	r25, r1
     38c:	11 f4       	brne	.+4      	; 0x392 <pinChange+0x25a>
     38e:	93 9a       	sbi	0x12, 3	; 18
     390:	08 95       	ret
     392:	82 32       	cpi	r24, 0x22	; 34
     394:	91 05       	cpc	r25, r1
     396:	11 f4       	brne	.+4      	; 0x39c <pinChange+0x264>
     398:	94 9a       	sbi	0x12, 4	; 18
     39a:	08 95       	ret
     39c:	83 32       	cpi	r24, 0x23	; 35
     39e:	91 05       	cpc	r25, r1
     3a0:	11 f4       	brne	.+4      	; 0x3a6 <pinChange+0x26e>
     3a2:	95 9a       	sbi	0x12, 5	; 18
     3a4:	08 95       	ret
     3a6:	84 32       	cpi	r24, 0x24	; 36
     3a8:	91 05       	cpc	r25, r1
     3aa:	11 f4       	brne	.+4      	; 0x3b0 <pinChange+0x278>
     3ac:	96 9a       	sbi	0x12, 6	; 18
     3ae:	08 95       	ret
     3b0:	85 97       	sbiw	r24, 0x25	; 37
     3b2:	09 f4       	brne	.+2      	; 0x3b6 <pinChange+0x27e>
     3b4:	97 9a       	sbi	0x12, 7	; 18
     3b6:	08 95       	ret

000003b8 <Lcd4_Port>:
     3b8:	cf 93       	push	r28
     3ba:	c8 2f       	mov	r28, r24
     3bc:	80 ff       	sbrs	r24, 0
     3be:	07 c0       	rjmp	.+14     	; 0x3ce <Lcd4_Port+0x16>
     3c0:	61 e0       	ldi	r22, 0x01	; 1
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	8a e0       	ldi	r24, 0x0A	; 10
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	0e 94 9c 00 	call	0x138	; 0x138 <pinChange>
     3cc:	06 c0       	rjmp	.+12     	; 0x3da <Lcd4_Port+0x22>
     3ce:	60 e0       	ldi	r22, 0x00	; 0
     3d0:	70 e0       	ldi	r23, 0x00	; 0
     3d2:	8a e0       	ldi	r24, 0x0A	; 10
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0e 94 9c 00 	call	0x138	; 0x138 <pinChange>
     3da:	c1 ff       	sbrs	r28, 1
     3dc:	07 c0       	rjmp	.+14     	; 0x3ec <Lcd4_Port+0x34>
     3de:	61 e0       	ldi	r22, 0x01	; 1
     3e0:	70 e0       	ldi	r23, 0x00	; 0
     3e2:	8b e0       	ldi	r24, 0x0B	; 11
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0e 94 9c 00 	call	0x138	; 0x138 <pinChange>
     3ea:	06 c0       	rjmp	.+12     	; 0x3f8 <Lcd4_Port+0x40>
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	8b e0       	ldi	r24, 0x0B	; 11
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	0e 94 9c 00 	call	0x138	; 0x138 <pinChange>
     3f8:	c2 ff       	sbrs	r28, 2
     3fa:	07 c0       	rjmp	.+14     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3fc:	61 e0       	ldi	r22, 0x01	; 1
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	8c e0       	ldi	r24, 0x0C	; 12
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0e 94 9c 00 	call	0x138	; 0x138 <pinChange>
     408:	06 c0       	rjmp	.+12     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     40a:	60 e0       	ldi	r22, 0x00	; 0
     40c:	70 e0       	ldi	r23, 0x00	; 0
     40e:	8c e0       	ldi	r24, 0x0C	; 12
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	0e 94 9c 00 	call	0x138	; 0x138 <pinChange>
     416:	c3 ff       	sbrs	r28, 3
     418:	07 c0       	rjmp	.+14     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     41a:	61 e0       	ldi	r22, 0x01	; 1
     41c:	70 e0       	ldi	r23, 0x00	; 0
     41e:	8d e0       	ldi	r24, 0x0D	; 13
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 9c 00 	call	0x138	; 0x138 <pinChange>
     426:	06 c0       	rjmp	.+12     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	70 e0       	ldi	r23, 0x00	; 0
     42c:	8d e0       	ldi	r24, 0x0D	; 13
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 9c 00 	call	0x138	; 0x138 <pinChange>
     434:	cf 91       	pop	r28
     436:	08 95       	ret

00000438 <Lcd4_Cmd>:
     438:	cf 93       	push	r28
     43a:	c8 2f       	mov	r28, r24
     43c:	60 e0       	ldi	r22, 0x00	; 0
     43e:	70 e0       	ldi	r23, 0x00	; 0
     440:	8e e0       	ldi	r24, 0x0E	; 14
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	0e 94 9c 00 	call	0x138	; 0x138 <pinChange>
     448:	8c 2f       	mov	r24, r28
     44a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <Lcd4_Port>
     44e:	61 e0       	ldi	r22, 0x01	; 1
     450:	70 e0       	ldi	r23, 0x00	; 0
     452:	8f e0       	ldi	r24, 0x0F	; 15
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	0e 94 9c 00 	call	0x138	; 0x138 <pinChange>
     45a:	8f e9       	ldi	r24, 0x9F	; 159
     45c:	9f e0       	ldi	r25, 0x0F	; 15
     45e:	01 97       	sbiw	r24, 0x01	; 1
     460:	f1 f7       	brne	.-4      	; 0x45e <Lcd4_Cmd+0x26>
     462:	00 c0       	rjmp	.+0      	; 0x464 <__stack+0x5>
     464:	00 00       	nop
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	70 e0       	ldi	r23, 0x00	; 0
     46a:	8f e0       	ldi	r24, 0x0F	; 15
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	0e 94 9c 00 	call	0x138	; 0x138 <pinChange>
     472:	8f e9       	ldi	r24, 0x9F	; 159
     474:	9f e0       	ldi	r25, 0x0F	; 15
     476:	01 97       	sbiw	r24, 0x01	; 1
     478:	f1 f7       	brne	.-4      	; 0x476 <__stack+0x17>
     47a:	00 c0       	rjmp	.+0      	; 0x47c <__stack+0x1d>
     47c:	00 00       	nop
     47e:	cf 91       	pop	r28
     480:	08 95       	ret

00000482 <Lcd4_Clear>:
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	0e 94 1c 02 	call	0x438	; 0x438 <Lcd4_Cmd>
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	0e 94 1c 02 	call	0x438	; 0x438 <Lcd4_Cmd>
     48e:	08 95       	ret

00000490 <Lcd4_Set_Cursor>:
     490:	cf 93       	push	r28
     492:	c6 2f       	mov	r28, r22
     494:	81 30       	cpi	r24, 0x01	; 1
     496:	59 f4       	brne	.+22     	; 0x4ae <Lcd4_Set_Cursor+0x1e>
     498:	80 e8       	ldi	r24, 0x80	; 128
     49a:	86 0f       	add	r24, r22
     49c:	82 95       	swap	r24
     49e:	8f 70       	andi	r24, 0x0F	; 15
     4a0:	0e 94 1c 02 	call	0x438	; 0x438 <Lcd4_Cmd>
     4a4:	8c 2f       	mov	r24, r28
     4a6:	8f 70       	andi	r24, 0x0F	; 15
     4a8:	0e 94 1c 02 	call	0x438	; 0x438 <Lcd4_Cmd>
     4ac:	0c c0       	rjmp	.+24     	; 0x4c6 <Lcd4_Set_Cursor+0x36>
     4ae:	82 30       	cpi	r24, 0x02	; 2
     4b0:	51 f4       	brne	.+20     	; 0x4c6 <Lcd4_Set_Cursor+0x36>
     4b2:	80 ec       	ldi	r24, 0xC0	; 192
     4b4:	86 0f       	add	r24, r22
     4b6:	82 95       	swap	r24
     4b8:	8f 70       	andi	r24, 0x0F	; 15
     4ba:	0e 94 1c 02 	call	0x438	; 0x438 <Lcd4_Cmd>
     4be:	8c 2f       	mov	r24, r28
     4c0:	8f 70       	andi	r24, 0x0F	; 15
     4c2:	0e 94 1c 02 	call	0x438	; 0x438 <Lcd4_Cmd>
     4c6:	cf 91       	pop	r28
     4c8:	08 95       	ret

000004ca <Lcd4_Init>:
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <Lcd4_Port>
     4d0:	2f ef       	ldi	r18, 0xFF	; 255
     4d2:	89 ef       	ldi	r24, 0xF9	; 249
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	21 50       	subi	r18, 0x01	; 1
     4d8:	80 40       	sbci	r24, 0x00	; 0
     4da:	90 40       	sbci	r25, 0x00	; 0
     4dc:	e1 f7       	brne	.-8      	; 0x4d6 <Lcd4_Init+0xc>
     4de:	00 c0       	rjmp	.+0      	; 0x4e0 <Lcd4_Init+0x16>
     4e0:	00 00       	nop
     4e2:	83 e0       	ldi	r24, 0x03	; 3
     4e4:	0e 94 1c 02 	call	0x438	; 0x438 <Lcd4_Cmd>
     4e8:	8f e1       	ldi	r24, 0x1F	; 31
     4ea:	9e e4       	ldi	r25, 0x4E	; 78
     4ec:	01 97       	sbiw	r24, 0x01	; 1
     4ee:	f1 f7       	brne	.-4      	; 0x4ec <Lcd4_Init+0x22>
     4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <Lcd4_Init+0x28>
     4f2:	00 00       	nop
     4f4:	83 e0       	ldi	r24, 0x03	; 3
     4f6:	0e 94 1c 02 	call	0x438	; 0x438 <Lcd4_Cmd>
     4fa:	8f ed       	ldi	r24, 0xDF	; 223
     4fc:	9b ea       	ldi	r25, 0xAB	; 171
     4fe:	01 97       	sbiw	r24, 0x01	; 1
     500:	f1 f7       	brne	.-4      	; 0x4fe <Lcd4_Init+0x34>
     502:	00 c0       	rjmp	.+0      	; 0x504 <Lcd4_Init+0x3a>
     504:	00 00       	nop
     506:	83 e0       	ldi	r24, 0x03	; 3
     508:	0e 94 1c 02 	call	0x438	; 0x438 <Lcd4_Cmd>
     50c:	82 e0       	ldi	r24, 0x02	; 2
     50e:	0e 94 1c 02 	call	0x438	; 0x438 <Lcd4_Cmd>
     512:	82 e0       	ldi	r24, 0x02	; 2
     514:	0e 94 1c 02 	call	0x438	; 0x438 <Lcd4_Cmd>
     518:	88 e0       	ldi	r24, 0x08	; 8
     51a:	0e 94 1c 02 	call	0x438	; 0x438 <Lcd4_Cmd>
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	0e 94 1c 02 	call	0x438	; 0x438 <Lcd4_Cmd>
     524:	8c e0       	ldi	r24, 0x0C	; 12
     526:	0e 94 1c 02 	call	0x438	; 0x438 <Lcd4_Cmd>
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	0e 94 1c 02 	call	0x438	; 0x438 <Lcd4_Cmd>
     530:	86 e0       	ldi	r24, 0x06	; 6
     532:	0e 94 1c 02 	call	0x438	; 0x438 <Lcd4_Cmd>
     536:	08 95       	ret

00000538 <Lcd4_Write_Char>:
     538:	cf 93       	push	r28
     53a:	c8 2f       	mov	r28, r24
     53c:	61 e0       	ldi	r22, 0x01	; 1
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	8e e0       	ldi	r24, 0x0E	; 14
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 9c 00 	call	0x138	; 0x138 <pinChange>
     548:	8c 2f       	mov	r24, r28
     54a:	82 95       	swap	r24
     54c:	8f 70       	andi	r24, 0x0F	; 15
     54e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <Lcd4_Port>
     552:	61 e0       	ldi	r22, 0x01	; 1
     554:	70 e0       	ldi	r23, 0x00	; 0
     556:	8f e0       	ldi	r24, 0x0F	; 15
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	0e 94 9c 00 	call	0x138	; 0x138 <pinChange>
     55e:	8f e9       	ldi	r24, 0x9F	; 159
     560:	9f e0       	ldi	r25, 0x0F	; 15
     562:	01 97       	sbiw	r24, 0x01	; 1
     564:	f1 f7       	brne	.-4      	; 0x562 <Lcd4_Write_Char+0x2a>
     566:	00 c0       	rjmp	.+0      	; 0x568 <Lcd4_Write_Char+0x30>
     568:	00 00       	nop
     56a:	60 e0       	ldi	r22, 0x00	; 0
     56c:	70 e0       	ldi	r23, 0x00	; 0
     56e:	8f e0       	ldi	r24, 0x0F	; 15
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	0e 94 9c 00 	call	0x138	; 0x138 <pinChange>
     576:	8f e9       	ldi	r24, 0x9F	; 159
     578:	9f e0       	ldi	r25, 0x0F	; 15
     57a:	01 97       	sbiw	r24, 0x01	; 1
     57c:	f1 f7       	brne	.-4      	; 0x57a <Lcd4_Write_Char+0x42>
     57e:	00 c0       	rjmp	.+0      	; 0x580 <Lcd4_Write_Char+0x48>
     580:	00 00       	nop
     582:	8c 2f       	mov	r24, r28
     584:	8f 70       	andi	r24, 0x0F	; 15
     586:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <Lcd4_Port>
     58a:	61 e0       	ldi	r22, 0x01	; 1
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	8f e0       	ldi	r24, 0x0F	; 15
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 9c 00 	call	0x138	; 0x138 <pinChange>
     596:	8f e9       	ldi	r24, 0x9F	; 159
     598:	9f e0       	ldi	r25, 0x0F	; 15
     59a:	01 97       	sbiw	r24, 0x01	; 1
     59c:	f1 f7       	brne	.-4      	; 0x59a <Lcd4_Write_Char+0x62>
     59e:	00 c0       	rjmp	.+0      	; 0x5a0 <Lcd4_Write_Char+0x68>
     5a0:	00 00       	nop
     5a2:	60 e0       	ldi	r22, 0x00	; 0
     5a4:	70 e0       	ldi	r23, 0x00	; 0
     5a6:	8f e0       	ldi	r24, 0x0F	; 15
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	0e 94 9c 00 	call	0x138	; 0x138 <pinChange>
     5ae:	8f e9       	ldi	r24, 0x9F	; 159
     5b0:	9f e0       	ldi	r25, 0x0F	; 15
     5b2:	01 97       	sbiw	r24, 0x01	; 1
     5b4:	f1 f7       	brne	.-4      	; 0x5b2 <Lcd4_Write_Char+0x7a>
     5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <Lcd4_Write_Char+0x80>
     5b8:	00 00       	nop
     5ba:	cf 91       	pop	r28
     5bc:	08 95       	ret

000005be <Lcd4_Write_String>:
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	ec 01       	movw	r28, r24
     5c4:	88 81       	ld	r24, Y
     5c6:	88 23       	and	r24, r24
     5c8:	31 f0       	breq	.+12     	; 0x5d6 <Lcd4_Write_String+0x18>
     5ca:	21 96       	adiw	r28, 0x01	; 1
     5cc:	0e 94 9c 02 	call	0x538	; 0x538 <Lcd4_Write_Char>
     5d0:	89 91       	ld	r24, Y+
     5d2:	81 11       	cpse	r24, r1
     5d4:	fb cf       	rjmp	.-10     	; 0x5cc <Lcd4_Write_String+0xe>
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	08 95       	ret

000005dc <Init>:

	}
}
void Init(void)
{
	StepperInit(1,1000);
     5dc:	68 ee       	ldi	r22, 0xE8	; 232
     5de:	73 e0       	ldi	r23, 0x03	; 3
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <StepperInit>
	DDRC |=(1<<PC0)|(1<<PC1)|(1<<PC2)|(1<<PC3)|(1<<PC4)|(1<<PC5)|(1<<PC6);
     5e8:	84 b3       	in	r24, 0x14	; 20
     5ea:	8f 67       	ori	r24, 0x7F	; 127
     5ec:	84 bb       	out	0x14, r24	; 20
	DDRB |=(1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)|(1<<PB4)|(1<<PB5);// use PB0,1,2,3,4,5 as output for LCD
     5ee:	87 b3       	in	r24, 0x17	; 23
     5f0:	8f 63       	ori	r24, 0x3F	; 63
     5f2:	87 bb       	out	0x17, r24	; 23
	//UART_Init(9600);
	UART_INIT();
     5f4:	0e 94 70 06 	call	0xce0	; 0xce0 <UART_INIT>
	Lcd4_Init();
     5f8:	0e 94 65 02 	call	0x4ca	; 0x4ca <Lcd4_Init>
     5fc:	08 95       	ret

000005fe <main>:
char String [8] ;
char s1[20];
char s2[20];
int main(void)
{
	Init();
     5fe:	0e 94 ee 02 	call	0x5dc	; 0x5dc <Init>
	while (1)
	{

		Lcd4_Clear();
     602:	0e 94 41 02 	call	0x482	; 0x482 <Lcd4_Clear>
		//UART_RxString(String);
		Recive_Data();
     606:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <Recive_Data>
		value_1 = atoi(String);           //extract first value
     60a:	8e e6       	ldi	r24, 0x6E	; 110
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <atoi>
     612:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <value_1+0x1>
     616:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <value_1>
		value_2 = second_value (String); //call function to extract second value
     61a:	8e e6       	ldi	r24, 0x6E	; 110
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 3e 00 	call	0x7c	; 0x7c <second_value>
     622:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <value_2+0x1>
     626:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <value_2>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     62a:	4a e0       	ldi	r20, 0x0A	; 10
     62c:	6f e7       	ldi	r22, 0x7F	; 127
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <value_1>
     634:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <value_1+0x1>
     638:	0e 94 07 08 	call	0x100e	; 0x100e <__itoa_ncheck>
     63c:	4a e0       	ldi	r20, 0x0A	; 10
     63e:	63 e9       	ldi	r22, 0x93	; 147
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <value_2>
     646:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <value_2+0x1>
     64a:	0e 94 07 08 	call	0x100e	; 0x100e <__itoa_ncheck>
		itoa(value_1,s1,10);
		itoa(value_2,s2,10);
		Lcd4_Set_Cursor(1,1);
     64e:	61 e0       	ldi	r22, 0x01	; 1
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	0e 94 48 02 	call	0x490	; 0x490 <Lcd4_Set_Cursor>
		Lcd4_Write_String(s1);
     656:	8f e7       	ldi	r24, 0x7F	; 127
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	0e 94 df 02 	call	0x5be	; 0x5be <Lcd4_Write_String>
		Lcd4_Set_Cursor(2,1);
     65e:	61 e0       	ldi	r22, 0x01	; 1
     660:	82 e0       	ldi	r24, 0x02	; 2
     662:	0e 94 48 02 	call	0x490	; 0x490 <Lcd4_Set_Cursor>
		Lcd4_Write_String(s2);		
     666:	83 e9       	ldi	r24, 0x93	; 147
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0e 94 df 02 	call	0x5be	; 0x5be <Lcd4_Write_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     66e:	2f ef       	ldi	r18, 0xFF	; 255
     670:	89 e6       	ldi	r24, 0x69	; 105
     672:	98 e1       	ldi	r25, 0x18	; 24
     674:	21 50       	subi	r18, 0x01	; 1
     676:	80 40       	sbci	r24, 0x00	; 0
     678:	90 40       	sbci	r25, 0x00	; 0
     67a:	e1 f7       	brne	.-8      	; 0x674 <main+0x76>
     67c:	00 c0       	rjmp	.+0      	; 0x67e <main+0x80>
     67e:	00 00       	nop
		_delay_ms(500);
		if (!(value_1>250||value_2>250||value_1<0||value_2<0)) // if the values don't skip the plate ,use it
     680:	60 91 7d 00 	lds	r22, 0x007D	; 0x80007d <value_1>
     684:	70 91 7e 00 	lds	r23, 0x007E	; 0x80007e <value_1+0x1>
     688:	6b 3f       	cpi	r22, 0xFB	; 251
     68a:	71 05       	cpc	r23, r1
     68c:	d8 f4       	brcc	.+54     	; 0x6c4 <main+0xc6>
     68e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <value_2>
     692:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <value_2+0x1>
     696:	8b 3f       	cpi	r24, 0xFB	; 251
     698:	91 05       	cpc	r25, r1
     69a:	a0 f4       	brcc	.+40     	; 0x6c4 <main+0xc6>
		{
			
			step_1 = sub_function (&old_val_1, value_1);     //call function to extract first step
     69c:	82 e6       	ldi	r24, 0x62	; 98
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	0e 94 93 00 	call	0x126	; 0x126 <sub_function>
     6a4:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <step_1+0x1>
     6a8:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <step_1>
			
			step_2 = sub_function (&old_val_2, value_2);    //call function to extract second step
     6ac:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <value_2>
     6b0:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <value_2+0x1>
     6b4:	80 e6       	ldi	r24, 0x60	; 96
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	0e 94 93 00 	call	0x126	; 0x126 <sub_function>
     6bc:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <step_2+0x1>
     6c0:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <step_2>
		}
		double x = step_1; // variable to store the received x axis
     6c4:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <step_1>
     6c8:	70 91 77 00 	lds	r23, 0x0077	; 0x800077 <step_1+0x1>
     6cc:	07 2e       	mov	r0, r23
     6ce:	00 0c       	add	r0, r0
     6d0:	88 0b       	sbc	r24, r24
     6d2:	99 0b       	sbc	r25, r25
     6d4:	0e 94 0c 07 	call	0xe18	; 0xe18 <__floatsisf>
     6d8:	d6 2e       	mov	r13, r22
     6da:	e7 2e       	mov	r14, r23
     6dc:	f8 2e       	mov	r15, r24
     6de:	09 2f       	mov	r16, r25
		double y = step_2; // variable to store the received y axis
     6e0:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <step_2>
     6e4:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <step_2+0x1>
     6e8:	07 2e       	mov	r0, r23
     6ea:	00 0c       	add	r0, r0
     6ec:	88 0b       	sbc	r24, r24
     6ee:	99 0b       	sbc	r25, r25
     6f0:	0e 94 0c 07 	call	0xe18	; 0xe18 <__floatsisf>
     6f4:	16 2f       	mov	r17, r22
     6f6:	d7 2f       	mov	r29, r23
     6f8:	c8 2f       	mov	r28, r24
     6fa:	c9 2e       	mov	r12, r25
		double X ; // variable to control the movement of x axis
		double Y ; // variable to control the movement of x axis
		if (posx == 0)
     6fc:	80 90 68 00 	lds	r8, 0x0068	; 0x800068 <posx>
     700:	90 90 69 00 	lds	r9, 0x0069	; 0x800069 <posx+0x1>
     704:	a0 90 6a 00 	lds	r10, 0x006A	; 0x80006a <posx+0x2>
     708:	b0 90 6b 00 	lds	r11, 0x006B	; 0x80006b <posx+0x3>
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	a9 01       	movw	r20, r18
     712:	c5 01       	movw	r24, r10
     714:	b4 01       	movw	r22, r8
     716:	0e 94 05 07 	call	0xe0a	; 0xe0a <__cmpsf2>
     71a:	88 23       	and	r24, r24
     71c:	59 f0       	breq	.+22     	; 0x734 <main+0x136>
		{
			X = x;
		}
		else
		{
			X = x - posx;
     71e:	a5 01       	movw	r20, r10
     720:	94 01       	movw	r18, r8
     722:	6d 2d       	mov	r22, r13
     724:	7e 2d       	mov	r23, r14
     726:	8f 2d       	mov	r24, r15
     728:	90 2f       	mov	r25, r16
     72a:	0e 94 98 06 	call	0xd30	; 0xd30 <__subsf3>
     72e:	4b 01       	movw	r8, r22
     730:	5c 01       	movw	r10, r24
     732:	04 c0       	rjmp	.+8      	; 0x73c <main+0x13e>
		double y = step_2; // variable to store the received y axis
		double X ; // variable to control the movement of x axis
		double Y ; // variable to control the movement of x axis
		if (posx == 0)
		{
			X = x;
     734:	8d 2c       	mov	r8, r13
     736:	9e 2c       	mov	r9, r14
     738:	af 2c       	mov	r10, r15
     73a:	b0 2e       	mov	r11, r16
		}
		else
		{
			X = x - posx;
		}
		if (posy == 0)
     73c:	40 90 64 00 	lds	r4, 0x0064	; 0x800064 <posy>
     740:	50 90 65 00 	lds	r5, 0x0065	; 0x800065 <posy+0x1>
     744:	60 90 66 00 	lds	r6, 0x0066	; 0x800066 <posy+0x2>
     748:	70 90 67 00 	lds	r7, 0x0067	; 0x800067 <posy+0x3>
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	a9 01       	movw	r20, r18
     752:	c3 01       	movw	r24, r6
     754:	b2 01       	movw	r22, r4
     756:	0e 94 05 07 	call	0xe0a	; 0xe0a <__cmpsf2>
     75a:	88 23       	and	r24, r24
     75c:	59 f0       	breq	.+22     	; 0x774 <main+0x176>
		{
			Y = y;
		}
		else
		{
			Y = y - posy;
     75e:	a3 01       	movw	r20, r6
     760:	92 01       	movw	r18, r4
     762:	61 2f       	mov	r22, r17
     764:	7d 2f       	mov	r23, r29
     766:	8c 2f       	mov	r24, r28
     768:	9c 2d       	mov	r25, r12
     76a:	0e 94 98 06 	call	0xd30	; 0xd30 <__subsf3>
     76e:	2b 01       	movw	r4, r22
     770:	3c 01       	movw	r6, r24
     772:	04 c0       	rjmp	.+8      	; 0x77c <main+0x17e>
		{
			X = x - posx;
		}
		if (posy == 0)
		{
			Y = y;
     774:	41 2e       	mov	r4, r17
     776:	5d 2e       	mov	r5, r29
     778:	6c 2e       	mov	r6, r28
     77a:	7c 2c       	mov	r7, r12
		}
		else
		{
			Y = y - posy;
		}
		if (X < 0 ){ // if the distance give a negative number make it positive and change the direction of motor rotation
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	a9 01       	movw	r20, r18
     782:	c5 01       	movw	r24, r10
     784:	b4 01       	movw	r22, r8
     786:	0e 94 05 07 	call	0xe0a	; 0xe0a <__cmpsf2>
     78a:	88 23       	and	r24, r24
     78c:	3c f4       	brge	.+14     	; 0x79c <main+0x19e>
			X *=-1;
     78e:	b7 fa       	bst	r11, 7
     790:	b0 94       	com	r11
     792:	b7 f8       	bld	r11, 7
     794:	b0 94       	com	r11
			statusx = 1;
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <statusx>
		}
		if (Y < 0 ){
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	a9 01       	movw	r20, r18
     7a2:	c3 01       	movw	r24, r6
     7a4:	b2 01       	movw	r22, r4
     7a6:	0e 94 05 07 	call	0xe0a	; 0xe0a <__cmpsf2>
     7aa:	88 23       	and	r24, r24
     7ac:	3c f4       	brge	.+14     	; 0x7bc <main+0x1be>
			Y *=-1;
     7ae:	77 fa       	bst	r7, 7
     7b0:	70 94       	com	r7
     7b2:	77 f8       	bld	r7, 7
     7b4:	70 94       	com	r7
			statusy = 1;
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <statusy>
		}
		while (X>=0) // go to the received position
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	a9 01       	movw	r20, r18
     7c2:	c5 01       	movw	r24, r10
     7c4:	b4 01       	movw	r22, r8
     7c6:	0e 94 bc 07 	call	0xf78	; 0xf78 <__gesf2>
     7ca:	88 23       	and	r24, r24
     7cc:	c4 f0       	brlt	.+48     	; 0x7fe <main+0x200>
		{
			Stepper_A_rev(statusx,1);
     7ce:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <statusx>
     7d2:	61 e0       	ldi	r22, 0x01	; 1
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	0e 94 12 06 	call	0xc24	; 0xc24 <Stepper_A_rev>
			X--;
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	40 e8       	ldi	r20, 0x80	; 128
     7e2:	5f e3       	ldi	r21, 0x3F	; 63
     7e4:	c5 01       	movw	r24, r10
     7e6:	b4 01       	movw	r22, r8
     7e8:	0e 94 98 06 	call	0xd30	; 0xd30 <__subsf3>
     7ec:	4b 01       	movw	r8, r22
     7ee:	5c 01       	movw	r10, r24
		}
		if (Y < 0 ){
			Y *=-1;
			statusy = 1;
		}
		while (X>=0) // go to the received position
     7f0:	20 e0       	ldi	r18, 0x00	; 0
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	a9 01       	movw	r20, r18
     7f6:	0e 94 bc 07 	call	0xf78	; 0xf78 <__gesf2>
     7fa:	88 23       	and	r24, r24
     7fc:	44 f7       	brge	.-48     	; 0x7ce <main+0x1d0>
		{
			Stepper_A_rev(statusx,1);
			X--;
		}
		while (Y>=0)
     7fe:	20 e0       	ldi	r18, 0x00	; 0
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	a9 01       	movw	r20, r18
     804:	c3 01       	movw	r24, r6
     806:	b2 01       	movw	r22, r4
     808:	0e 94 bc 07 	call	0xf78	; 0xf78 <__gesf2>
     80c:	88 23       	and	r24, r24
     80e:	c4 f0       	brlt	.+48     	; 0x840 <main+0x242>
		{
			Stepper_B_rev(statusy,1);
     810:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <statusy>
     814:	61 e0       	ldi	r22, 0x01	; 1
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 41 06 	call	0xc82	; 0xc82 <Stepper_B_rev>
			Y--;
     81e:	20 e0       	ldi	r18, 0x00	; 0
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	40 e8       	ldi	r20, 0x80	; 128
     824:	5f e3       	ldi	r21, 0x3F	; 63
     826:	c3 01       	movw	r24, r6
     828:	b2 01       	movw	r22, r4
     82a:	0e 94 98 06 	call	0xd30	; 0xd30 <__subsf3>
     82e:	2b 01       	movw	r4, r22
     830:	3c 01       	movw	r6, r24
		while (X>=0) // go to the received position
		{
			Stepper_A_rev(statusx,1);
			X--;
		}
		while (Y>=0)
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	a9 01       	movw	r20, r18
     838:	0e 94 bc 07 	call	0xf78	; 0xf78 <__gesf2>
     83c:	88 23       	and	r24, r24
     83e:	44 f7       	brge	.-48     	; 0x810 <main+0x212>
		{
			Stepper_B_rev(statusy,1);
			Y--;
		}
		posx = x;
     840:	8d 2d       	mov	r24, r13
     842:	9e 2d       	mov	r25, r14
     844:	af 2d       	mov	r26, r15
     846:	b0 2f       	mov	r27, r16
     848:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <posx>
     84c:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <posx+0x1>
     850:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <posx+0x2>
     854:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <posx+0x3>
		posy = y;
     858:	81 2f       	mov	r24, r17
     85a:	9d 2f       	mov	r25, r29
     85c:	ac 2f       	mov	r26, r28
     85e:	bc 2d       	mov	r27, r12
     860:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <posy>
     864:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <posy+0x1>
     868:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <posy+0x2>
     86c:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <posy+0x3>
		x = 0.0;
		y = 0.0;


	}
     870:	c8 ce       	rjmp	.-624    	; 0x602 <main+0x4>

00000872 <STpinChange>:
	if(a & 1024)
	STpinChange(DIRD,1);
	else
	STpinChange(DIRD,0);
	
}
     872:	67 2b       	or	r22, r23
     874:	09 f0       	breq	.+2      	; 0x878 <STpinChange+0x6>
     876:	9f c0       	rjmp	.+318    	; 0x9b6 <STpinChange+0x144>
     878:	00 97       	sbiw	r24, 0x00	; 0
     87a:	11 f4       	brne	.+4      	; 0x880 <STpinChange+0xe>
     87c:	d8 98       	cbi	0x1b, 0	; 27
     87e:	08 95       	ret
     880:	81 30       	cpi	r24, 0x01	; 1
     882:	91 05       	cpc	r25, r1
     884:	11 f4       	brne	.+4      	; 0x88a <STpinChange+0x18>
     886:	d9 98       	cbi	0x1b, 1	; 27
     888:	08 95       	ret
     88a:	82 30       	cpi	r24, 0x02	; 2
     88c:	91 05       	cpc	r25, r1
     88e:	11 f4       	brne	.+4      	; 0x894 <STpinChange+0x22>
     890:	da 98       	cbi	0x1b, 2	; 27
     892:	08 95       	ret
     894:	83 30       	cpi	r24, 0x03	; 3
     896:	91 05       	cpc	r25, r1
     898:	11 f4       	brne	.+4      	; 0x89e <STpinChange+0x2c>
     89a:	db 98       	cbi	0x1b, 3	; 27
     89c:	08 95       	ret
     89e:	84 30       	cpi	r24, 0x04	; 4
     8a0:	91 05       	cpc	r25, r1
     8a2:	11 f4       	brne	.+4      	; 0x8a8 <STpinChange+0x36>
     8a4:	dc 98       	cbi	0x1b, 4	; 27
     8a6:	08 95       	ret
     8a8:	85 30       	cpi	r24, 0x05	; 5
     8aa:	91 05       	cpc	r25, r1
     8ac:	11 f4       	brne	.+4      	; 0x8b2 <STpinChange+0x40>
     8ae:	dd 98       	cbi	0x1b, 5	; 27
     8b0:	08 95       	ret
     8b2:	86 30       	cpi	r24, 0x06	; 6
     8b4:	91 05       	cpc	r25, r1
     8b6:	11 f4       	brne	.+4      	; 0x8bc <STpinChange+0x4a>
     8b8:	de 98       	cbi	0x1b, 6	; 27
     8ba:	08 95       	ret
     8bc:	87 30       	cpi	r24, 0x07	; 7
     8be:	91 05       	cpc	r25, r1
     8c0:	11 f4       	brne	.+4      	; 0x8c6 <STpinChange+0x54>
     8c2:	df 98       	cbi	0x1b, 7	; 27
     8c4:	08 95       	ret
     8c6:	8a 30       	cpi	r24, 0x0A	; 10
     8c8:	91 05       	cpc	r25, r1
     8ca:	11 f4       	brne	.+4      	; 0x8d0 <STpinChange+0x5e>
     8cc:	c0 98       	cbi	0x18, 0	; 24
     8ce:	08 95       	ret
     8d0:	8b 30       	cpi	r24, 0x0B	; 11
     8d2:	91 05       	cpc	r25, r1
     8d4:	11 f4       	brne	.+4      	; 0x8da <STpinChange+0x68>
     8d6:	c1 98       	cbi	0x18, 1	; 24
     8d8:	08 95       	ret
     8da:	8c 30       	cpi	r24, 0x0C	; 12
     8dc:	91 05       	cpc	r25, r1
     8de:	11 f4       	brne	.+4      	; 0x8e4 <STpinChange+0x72>
     8e0:	c2 98       	cbi	0x18, 2	; 24
     8e2:	08 95       	ret
     8e4:	8d 30       	cpi	r24, 0x0D	; 13
     8e6:	91 05       	cpc	r25, r1
     8e8:	11 f4       	brne	.+4      	; 0x8ee <STpinChange+0x7c>
     8ea:	c3 98       	cbi	0x18, 3	; 24
     8ec:	08 95       	ret
     8ee:	8e 30       	cpi	r24, 0x0E	; 14
     8f0:	91 05       	cpc	r25, r1
     8f2:	11 f4       	brne	.+4      	; 0x8f8 <STpinChange+0x86>
     8f4:	c4 98       	cbi	0x18, 4	; 24
     8f6:	08 95       	ret
     8f8:	8f 30       	cpi	r24, 0x0F	; 15
     8fa:	91 05       	cpc	r25, r1
     8fc:	11 f4       	brne	.+4      	; 0x902 <STpinChange+0x90>
     8fe:	c5 98       	cbi	0x18, 5	; 24
     900:	08 95       	ret
     902:	80 31       	cpi	r24, 0x10	; 16
     904:	91 05       	cpc	r25, r1
     906:	11 f4       	brne	.+4      	; 0x90c <STpinChange+0x9a>
     908:	c6 98       	cbi	0x18, 6	; 24
     90a:	08 95       	ret
     90c:	81 31       	cpi	r24, 0x11	; 17
     90e:	91 05       	cpc	r25, r1
     910:	11 f4       	brne	.+4      	; 0x916 <STpinChange+0xa4>
     912:	c7 98       	cbi	0x18, 7	; 24
     914:	08 95       	ret
     916:	84 31       	cpi	r24, 0x14	; 20
     918:	91 05       	cpc	r25, r1
     91a:	11 f4       	brne	.+4      	; 0x920 <STpinChange+0xae>
     91c:	a8 98       	cbi	0x15, 0	; 21
     91e:	08 95       	ret
     920:	85 31       	cpi	r24, 0x15	; 21
     922:	91 05       	cpc	r25, r1
     924:	11 f4       	brne	.+4      	; 0x92a <STpinChange+0xb8>
     926:	a9 98       	cbi	0x15, 1	; 21
     928:	08 95       	ret
     92a:	86 31       	cpi	r24, 0x16	; 22
     92c:	91 05       	cpc	r25, r1
     92e:	11 f4       	brne	.+4      	; 0x934 <STpinChange+0xc2>
     930:	aa 98       	cbi	0x15, 2	; 21
     932:	08 95       	ret
     934:	87 31       	cpi	r24, 0x17	; 23
     936:	91 05       	cpc	r25, r1
     938:	11 f4       	brne	.+4      	; 0x93e <STpinChange+0xcc>
     93a:	ab 98       	cbi	0x15, 3	; 21
     93c:	08 95       	ret
     93e:	88 31       	cpi	r24, 0x18	; 24
     940:	91 05       	cpc	r25, r1
     942:	11 f4       	brne	.+4      	; 0x948 <STpinChange+0xd6>
     944:	ac 98       	cbi	0x15, 4	; 21
     946:	08 95       	ret
     948:	89 31       	cpi	r24, 0x19	; 25
     94a:	91 05       	cpc	r25, r1
     94c:	11 f4       	brne	.+4      	; 0x952 <STpinChange+0xe0>
     94e:	ad 98       	cbi	0x15, 5	; 21
     950:	08 95       	ret
     952:	8a 31       	cpi	r24, 0x1A	; 26
     954:	91 05       	cpc	r25, r1
     956:	11 f4       	brne	.+4      	; 0x95c <STpinChange+0xea>
     958:	ae 98       	cbi	0x15, 6	; 21
     95a:	08 95       	ret
     95c:	8b 31       	cpi	r24, 0x1B	; 27
     95e:	91 05       	cpc	r25, r1
     960:	11 f4       	brne	.+4      	; 0x966 <STpinChange+0xf4>
     962:	af 98       	cbi	0x15, 7	; 21
     964:	08 95       	ret
     966:	8e 31       	cpi	r24, 0x1E	; 30
     968:	91 05       	cpc	r25, r1
     96a:	11 f4       	brne	.+4      	; 0x970 <STpinChange+0xfe>
     96c:	90 98       	cbi	0x12, 0	; 18
     96e:	08 95       	ret
     970:	8f 31       	cpi	r24, 0x1F	; 31
     972:	91 05       	cpc	r25, r1
     974:	11 f4       	brne	.+4      	; 0x97a <STpinChange+0x108>
     976:	91 98       	cbi	0x12, 1	; 18
     978:	08 95       	ret
     97a:	80 32       	cpi	r24, 0x20	; 32
     97c:	91 05       	cpc	r25, r1
     97e:	11 f4       	brne	.+4      	; 0x984 <STpinChange+0x112>
     980:	92 98       	cbi	0x12, 2	; 18
     982:	08 95       	ret
     984:	81 32       	cpi	r24, 0x21	; 33
     986:	91 05       	cpc	r25, r1
     988:	11 f4       	brne	.+4      	; 0x98e <STpinChange+0x11c>
     98a:	93 98       	cbi	0x12, 3	; 18
     98c:	08 95       	ret
     98e:	82 32       	cpi	r24, 0x22	; 34
     990:	91 05       	cpc	r25, r1
     992:	11 f4       	brne	.+4      	; 0x998 <STpinChange+0x126>
     994:	94 98       	cbi	0x12, 4	; 18
     996:	08 95       	ret
     998:	83 32       	cpi	r24, 0x23	; 35
     99a:	91 05       	cpc	r25, r1
     99c:	11 f4       	brne	.+4      	; 0x9a2 <STpinChange+0x130>
     99e:	95 98       	cbi	0x12, 5	; 18
     9a0:	08 95       	ret
     9a2:	84 32       	cpi	r24, 0x24	; 36
     9a4:	91 05       	cpc	r25, r1
     9a6:	11 f4       	brne	.+4      	; 0x9ac <STpinChange+0x13a>
     9a8:	96 98       	cbi	0x12, 6	; 18
     9aa:	08 95       	ret
     9ac:	85 97       	sbiw	r24, 0x25	; 37
     9ae:	09 f0       	breq	.+2      	; 0x9b2 <STpinChange+0x140>
     9b0:	9f c0       	rjmp	.+318    	; 0xaf0 <STpinChange+0x27e>
     9b2:	97 98       	cbi	0x12, 7	; 18
     9b4:	08 95       	ret
     9b6:	00 97       	sbiw	r24, 0x00	; 0
     9b8:	11 f4       	brne	.+4      	; 0x9be <STpinChange+0x14c>
     9ba:	d8 9a       	sbi	0x1b, 0	; 27
     9bc:	08 95       	ret
     9be:	81 30       	cpi	r24, 0x01	; 1
     9c0:	91 05       	cpc	r25, r1
     9c2:	11 f4       	brne	.+4      	; 0x9c8 <STpinChange+0x156>
     9c4:	d9 9a       	sbi	0x1b, 1	; 27
     9c6:	08 95       	ret
     9c8:	82 30       	cpi	r24, 0x02	; 2
     9ca:	91 05       	cpc	r25, r1
     9cc:	11 f4       	brne	.+4      	; 0x9d2 <STpinChange+0x160>
     9ce:	da 9a       	sbi	0x1b, 2	; 27
     9d0:	08 95       	ret
     9d2:	83 30       	cpi	r24, 0x03	; 3
     9d4:	91 05       	cpc	r25, r1
     9d6:	11 f4       	brne	.+4      	; 0x9dc <STpinChange+0x16a>
     9d8:	db 9a       	sbi	0x1b, 3	; 27
     9da:	08 95       	ret
     9dc:	84 30       	cpi	r24, 0x04	; 4
     9de:	91 05       	cpc	r25, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <STpinChange+0x174>
     9e2:	dc 9a       	sbi	0x1b, 4	; 27
     9e4:	08 95       	ret
     9e6:	85 30       	cpi	r24, 0x05	; 5
     9e8:	91 05       	cpc	r25, r1
     9ea:	11 f4       	brne	.+4      	; 0x9f0 <STpinChange+0x17e>
     9ec:	dd 9a       	sbi	0x1b, 5	; 27
     9ee:	08 95       	ret
     9f0:	86 30       	cpi	r24, 0x06	; 6
     9f2:	91 05       	cpc	r25, r1
     9f4:	11 f4       	brne	.+4      	; 0x9fa <STpinChange+0x188>
     9f6:	de 9a       	sbi	0x1b, 6	; 27
     9f8:	08 95       	ret
     9fa:	87 30       	cpi	r24, 0x07	; 7
     9fc:	91 05       	cpc	r25, r1
     9fe:	11 f4       	brne	.+4      	; 0xa04 <STpinChange+0x192>
     a00:	df 9a       	sbi	0x1b, 7	; 27
     a02:	08 95       	ret
     a04:	8a 30       	cpi	r24, 0x0A	; 10
     a06:	91 05       	cpc	r25, r1
     a08:	11 f4       	brne	.+4      	; 0xa0e <STpinChange+0x19c>
     a0a:	c0 9a       	sbi	0x18, 0	; 24
     a0c:	08 95       	ret
     a0e:	8b 30       	cpi	r24, 0x0B	; 11
     a10:	91 05       	cpc	r25, r1
     a12:	11 f4       	brne	.+4      	; 0xa18 <STpinChange+0x1a6>
     a14:	c1 9a       	sbi	0x18, 1	; 24
     a16:	08 95       	ret
     a18:	8c 30       	cpi	r24, 0x0C	; 12
     a1a:	91 05       	cpc	r25, r1
     a1c:	11 f4       	brne	.+4      	; 0xa22 <STpinChange+0x1b0>
     a1e:	c2 9a       	sbi	0x18, 2	; 24
     a20:	08 95       	ret
     a22:	8d 30       	cpi	r24, 0x0D	; 13
     a24:	91 05       	cpc	r25, r1
     a26:	11 f4       	brne	.+4      	; 0xa2c <STpinChange+0x1ba>
     a28:	c3 9a       	sbi	0x18, 3	; 24
     a2a:	08 95       	ret
     a2c:	8e 30       	cpi	r24, 0x0E	; 14
     a2e:	91 05       	cpc	r25, r1
     a30:	11 f4       	brne	.+4      	; 0xa36 <STpinChange+0x1c4>
     a32:	c4 9a       	sbi	0x18, 4	; 24
     a34:	08 95       	ret
     a36:	8f 30       	cpi	r24, 0x0F	; 15
     a38:	91 05       	cpc	r25, r1
     a3a:	11 f4       	brne	.+4      	; 0xa40 <STpinChange+0x1ce>
     a3c:	c5 9a       	sbi	0x18, 5	; 24
     a3e:	08 95       	ret
     a40:	80 31       	cpi	r24, 0x10	; 16
     a42:	91 05       	cpc	r25, r1
     a44:	11 f4       	brne	.+4      	; 0xa4a <STpinChange+0x1d8>
     a46:	c6 9a       	sbi	0x18, 6	; 24
     a48:	08 95       	ret
     a4a:	81 31       	cpi	r24, 0x11	; 17
     a4c:	91 05       	cpc	r25, r1
     a4e:	11 f4       	brne	.+4      	; 0xa54 <STpinChange+0x1e2>
     a50:	c7 9a       	sbi	0x18, 7	; 24
     a52:	08 95       	ret
     a54:	84 31       	cpi	r24, 0x14	; 20
     a56:	91 05       	cpc	r25, r1
     a58:	11 f4       	brne	.+4      	; 0xa5e <STpinChange+0x1ec>
     a5a:	a8 9a       	sbi	0x15, 0	; 21
     a5c:	08 95       	ret
     a5e:	85 31       	cpi	r24, 0x15	; 21
     a60:	91 05       	cpc	r25, r1
     a62:	11 f4       	brne	.+4      	; 0xa68 <STpinChange+0x1f6>
     a64:	a9 9a       	sbi	0x15, 1	; 21
     a66:	08 95       	ret
     a68:	86 31       	cpi	r24, 0x16	; 22
     a6a:	91 05       	cpc	r25, r1
     a6c:	11 f4       	brne	.+4      	; 0xa72 <STpinChange+0x200>
     a6e:	aa 9a       	sbi	0x15, 2	; 21
     a70:	08 95       	ret
     a72:	87 31       	cpi	r24, 0x17	; 23
     a74:	91 05       	cpc	r25, r1
     a76:	11 f4       	brne	.+4      	; 0xa7c <STpinChange+0x20a>
     a78:	ab 9a       	sbi	0x15, 3	; 21
     a7a:	08 95       	ret
     a7c:	88 31       	cpi	r24, 0x18	; 24
     a7e:	91 05       	cpc	r25, r1
     a80:	11 f4       	brne	.+4      	; 0xa86 <STpinChange+0x214>
     a82:	ac 9a       	sbi	0x15, 4	; 21
     a84:	08 95       	ret
     a86:	89 31       	cpi	r24, 0x19	; 25
     a88:	91 05       	cpc	r25, r1
     a8a:	11 f4       	brne	.+4      	; 0xa90 <STpinChange+0x21e>
     a8c:	ad 9a       	sbi	0x15, 5	; 21
     a8e:	08 95       	ret
     a90:	8a 31       	cpi	r24, 0x1A	; 26
     a92:	91 05       	cpc	r25, r1
     a94:	11 f4       	brne	.+4      	; 0xa9a <STpinChange+0x228>
     a96:	ae 9a       	sbi	0x15, 6	; 21
     a98:	08 95       	ret
     a9a:	8b 31       	cpi	r24, 0x1B	; 27
     a9c:	91 05       	cpc	r25, r1
     a9e:	11 f4       	brne	.+4      	; 0xaa4 <STpinChange+0x232>
     aa0:	af 9a       	sbi	0x15, 7	; 21
     aa2:	08 95       	ret
     aa4:	8e 31       	cpi	r24, 0x1E	; 30
     aa6:	91 05       	cpc	r25, r1
     aa8:	11 f4       	brne	.+4      	; 0xaae <STpinChange+0x23c>
     aaa:	90 9a       	sbi	0x12, 0	; 18
     aac:	08 95       	ret
     aae:	8f 31       	cpi	r24, 0x1F	; 31
     ab0:	91 05       	cpc	r25, r1
     ab2:	11 f4       	brne	.+4      	; 0xab8 <STpinChange+0x246>
     ab4:	91 9a       	sbi	0x12, 1	; 18
     ab6:	08 95       	ret
     ab8:	80 32       	cpi	r24, 0x20	; 32
     aba:	91 05       	cpc	r25, r1
     abc:	11 f4       	brne	.+4      	; 0xac2 <STpinChange+0x250>
     abe:	92 9a       	sbi	0x12, 2	; 18
     ac0:	08 95       	ret
     ac2:	81 32       	cpi	r24, 0x21	; 33
     ac4:	91 05       	cpc	r25, r1
     ac6:	11 f4       	brne	.+4      	; 0xacc <STpinChange+0x25a>
     ac8:	93 9a       	sbi	0x12, 3	; 18
     aca:	08 95       	ret
     acc:	82 32       	cpi	r24, 0x22	; 34
     ace:	91 05       	cpc	r25, r1
     ad0:	11 f4       	brne	.+4      	; 0xad6 <STpinChange+0x264>
     ad2:	94 9a       	sbi	0x12, 4	; 18
     ad4:	08 95       	ret
     ad6:	83 32       	cpi	r24, 0x23	; 35
     ad8:	91 05       	cpc	r25, r1
     ada:	11 f4       	brne	.+4      	; 0xae0 <STpinChange+0x26e>
     adc:	95 9a       	sbi	0x12, 5	; 18
     ade:	08 95       	ret
     ae0:	84 32       	cpi	r24, 0x24	; 36
     ae2:	91 05       	cpc	r25, r1
     ae4:	11 f4       	brne	.+4      	; 0xaea <STpinChange+0x278>
     ae6:	96 9a       	sbi	0x12, 6	; 18
     ae8:	08 95       	ret
     aea:	85 97       	sbiw	r24, 0x25	; 37
     aec:	09 f4       	brne	.+2      	; 0xaf0 <STpinChange+0x27e>
     aee:	97 9a       	sbi	0x12, 7	; 18
     af0:	08 95       	ret

00000af2 <steper_1step>:

void steper_1step(){ // to make a full 1 step with 2 phase
	STpinChange(ms1,0);        // ms1 = 0,ms2 = 0,ms3 = 0 from a9488 data sheet
     af2:	60 e0       	ldi	r22, 0x00	; 0
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	84 e1       	ldi	r24, 0x14	; 20
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	0e 94 39 04 	call	0x872	; 0x872 <STpinChange>
	STpinChange(ms2,0);
     afe:	60 e0       	ldi	r22, 0x00	; 0
     b00:	70 e0       	ldi	r23, 0x00	; 0
     b02:	85 e1       	ldi	r24, 0x15	; 21
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	0e 94 39 04 	call	0x872	; 0x872 <STpinChange>
	STpinChange(ms3,0);
     b0a:	60 e0       	ldi	r22, 0x00	; 0
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	86 e1       	ldi	r24, 0x16	; 22
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 39 04 	call	0x872	; 0x872 <STpinChange>
     b16:	08 95       	ret

00000b18 <steper_Hstep>:
}
void steper_Hstep(){// to make a half 1 step with 1-2 phase ms1 = 1,ms2 = 0,ms3 = 0 from a9488 data sheet
	STpinChange(ms1,1);
     b18:	61 e0       	ldi	r22, 0x01	; 1
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	84 e1       	ldi	r24, 0x14	; 20
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	0e 94 39 04 	call	0x872	; 0x872 <STpinChange>
	STpinChange(ms2,0);
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	85 e1       	ldi	r24, 0x15	; 21
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	0e 94 39 04 	call	0x872	; 0x872 <STpinChange>
	STpinChange(ms3,0);
     b30:	60 e0       	ldi	r22, 0x00	; 0
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	86 e1       	ldi	r24, 0x16	; 22
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	0e 94 39 04 	call	0x872	; 0x872 <STpinChange>
     b3c:	08 95       	ret

00000b3e <steper_Qstep>:
}
void steper_Qstep(){// to make a Quarter 1 step with w1-2 phase ms1 = 0,ms2 = 1,ms3 = 0 from a9488 data sheet
	STpinChange(ms1,0);
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	70 e0       	ldi	r23, 0x00	; 0
     b42:	84 e1       	ldi	r24, 0x14	; 20
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	0e 94 39 04 	call	0x872	; 0x872 <STpinChange>
	STpinChange(ms2,1);
     b4a:	61 e0       	ldi	r22, 0x01	; 1
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	85 e1       	ldi	r24, 0x15	; 21
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	0e 94 39 04 	call	0x872	; 0x872 <STpinChange>
	STpinChange(ms3,0);
     b56:	60 e0       	ldi	r22, 0x00	; 0
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	86 e1       	ldi	r24, 0x16	; 22
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	0e 94 39 04 	call	0x872	; 0x872 <STpinChange>
     b62:	08 95       	ret

00000b64 <steper_Estep>:
}
void steper_Estep(){// to make a Eighth 1 step with 2w1-2 phase ms1 = 1,ms2 = 1,ms3 = 0 from a9488 data sheet
	STpinChange(ms1,1);
     b64:	61 e0       	ldi	r22, 0x01	; 1
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	84 e1       	ldi	r24, 0x14	; 20
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 39 04 	call	0x872	; 0x872 <STpinChange>
	STpinChange(ms2,1);
     b70:	61 e0       	ldi	r22, 0x01	; 1
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	85 e1       	ldi	r24, 0x15	; 21
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0e 94 39 04 	call	0x872	; 0x872 <STpinChange>
	STpinChange(ms3,0);
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	86 e1       	ldi	r24, 0x16	; 22
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0e 94 39 04 	call	0x872	; 0x872 <STpinChange>
     b88:	08 95       	ret

00000b8a <steper_Sstep>:
}
void steper_Sstep(){// to make a Sixteenth 1 step with 4w1-2 phase ms1 = 1,ms2 = 1,ms3 = 0 from a9488 data sheet
	STpinChange(ms1,1);
     b8a:	61 e0       	ldi	r22, 0x01	; 1
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	84 e1       	ldi	r24, 0x14	; 20
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	0e 94 39 04 	call	0x872	; 0x872 <STpinChange>
	STpinChange(ms2,1);
     b96:	61 e0       	ldi	r22, 0x01	; 1
     b98:	70 e0       	ldi	r23, 0x00	; 0
     b9a:	85 e1       	ldi	r24, 0x15	; 21
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	0e 94 39 04 	call	0x872	; 0x872 <STpinChange>
	STpinChange(ms3,1);
     ba2:	61 e0       	ldi	r22, 0x01	; 1
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	86 e1       	ldi	r24, 0x16	; 22
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 94 39 04 	call	0x872	; 0x872 <STpinChange>
     bae:	08 95       	ret

00000bb0 <StepperInit>:
}
//library interface description
void StepperInit(int steps,int16_t sp)  //types of steps (1,2,6,8,16),speed of rotation in rpm
{
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
     bb4:	eb 01       	movw	r28, r22
	switch (steps){
     bb6:	86 30       	cpi	r24, 0x06	; 6
     bb8:	91 05       	cpc	r25, r1
     bba:	99 f0       	breq	.+38     	; 0xbe2 <StepperInit+0x32>
     bbc:	34 f4       	brge	.+12     	; 0xbca <StepperInit+0x1a>
     bbe:	81 30       	cpi	r24, 0x01	; 1
     bc0:	91 05       	cpc	r25, r1
     bc2:	49 f0       	breq	.+18     	; 0xbd6 <StepperInit+0x26>
     bc4:	02 97       	sbiw	r24, 0x02	; 2
     bc6:	51 f0       	breq	.+20     	; 0xbdc <StepperInit+0x2c>
     bc8:	14 c0       	rjmp	.+40     	; 0xbf2 <StepperInit+0x42>
     bca:	88 30       	cpi	r24, 0x08	; 8
     bcc:	91 05       	cpc	r25, r1
     bce:	61 f0       	breq	.+24     	; 0xbe8 <StepperInit+0x38>
     bd0:	40 97       	sbiw	r24, 0x10	; 16
     bd2:	69 f0       	breq	.+26     	; 0xbee <StepperInit+0x3e>
     bd4:	0e c0       	rjmp	.+28     	; 0xbf2 <StepperInit+0x42>
		case 1:steper_1step();break;
     bd6:	0e 94 79 05 	call	0xaf2	; 0xaf2 <steper_1step>
     bda:	0b c0       	rjmp	.+22     	; 0xbf2 <StepperInit+0x42>
		case 2:steper_Hstep();break;
     bdc:	0e 94 8c 05 	call	0xb18	; 0xb18 <steper_Hstep>
     be0:	08 c0       	rjmp	.+16     	; 0xbf2 <StepperInit+0x42>
		case 6:steper_Qstep();break;
     be2:	0e 94 9f 05 	call	0xb3e	; 0xb3e <steper_Qstep>
     be6:	05 c0       	rjmp	.+10     	; 0xbf2 <StepperInit+0x42>
		case 8:steper_Estep();break;
     be8:	0e 94 b2 05 	call	0xb64	; 0xb64 <steper_Estep>
     bec:	02 c0       	rjmp	.+4      	; 0xbf2 <StepperInit+0x42>
		case 16:steper_Sstep();break;
     bee:	0e 94 c5 05 	call	0xb8a	; 0xb8a <steper_Sstep>
	}
	speed = sp;
     bf2:	d0 93 a9 00 	sts	0x00A9, r29	; 0x8000a9 <speed+0x1>
     bf6:	c0 93 a8 00 	sts	0x00A8, r28	; 0x8000a8 <speed>
}
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	08 95       	ret

00000c00 <setspeed>:
void setspeed(int sp){
     c00:	bc 01       	movw	r22, r24
	sp=(1000/sp);//1step = 1 mm 
     c02:	88 ee       	ldi	r24, 0xE8	; 232
     c04:	93 e0       	ldi	r25, 0x03	; 3
     c06:	0e 94 c1 07 	call	0xf82	; 0xf82 <__divmodhi4>
	while(sp > 0){
     c0a:	16 16       	cp	r1, r22
     c0c:	17 06       	cpc	r1, r23
     c0e:	4c f4       	brge	.+18     	; 0xc22 <setspeed+0x22>
     c10:	89 ef       	ldi	r24, 0xF9	; 249
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	01 97       	sbiw	r24, 0x01	; 1
     c16:	f1 f7       	brne	.-4      	; 0xc14 <setspeed+0x14>
     c18:	00 c0       	rjmp	.+0      	; 0xc1a <setspeed+0x1a>
     c1a:	00 00       	nop
		_delay_ms(1);
		sp-=1;
     c1c:	61 50       	subi	r22, 0x01	; 1
     c1e:	71 09       	sbc	r23, r1
	}
	speed = sp;
}
void setspeed(int sp){
	sp=(1000/sp);//1step = 1 mm 
	while(sp > 0){
     c20:	b9 f7       	brne	.-18     	; 0xc10 <setspeed+0x10>
     c22:	08 95       	ret

00000c24 <Stepper_A_rev>:
		_delay_ms(1);
		sp-=1;
	}
}
void Stepper_A_rev(bool clockw,uint8_t NuOfSteps){//rotate clockwise or ccw , number of steps for stepperA
     c24:	cf 93       	push	r28
     c26:	c6 2f       	mov	r28, r22
	if (clockw)
     c28:	88 23       	and	r24, r24
     c2a:	39 f0       	breq	.+14     	; 0xc3a <Stepper_A_rev+0x16>
	{
		STpinChange(DIRA,1);
     c2c:	61 e0       	ldi	r22, 0x01	; 1
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	88 e1       	ldi	r24, 0x18	; 24
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 39 04 	call	0x872	; 0x872 <STpinChange>
     c38:	06 c0       	rjmp	.+12     	; 0xc46 <Stepper_A_rev+0x22>
	}
	else
	{
		STpinChange(DIRA,0);
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	88 e1       	ldi	r24, 0x18	; 24
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	0e 94 39 04 	call	0x872	; 0x872 <STpinChange>
	}
	
	while (NuOfSteps > 0)
     c46:	cc 23       	and	r28, r28
     c48:	d1 f0       	breq	.+52     	; 0xc7e <Stepper_A_rev+0x5a>
	{
		STpinChange(StepA,1);
     c4a:	61 e0       	ldi	r22, 0x01	; 1
     c4c:	70 e0       	ldi	r23, 0x00	; 0
     c4e:	87 e1       	ldi	r24, 0x17	; 23
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	0e 94 39 04 	call	0x872	; 0x872 <STpinChange>
     c56:	89 ef       	ldi	r24, 0xF9	; 249
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	f1 f7       	brne	.-4      	; 0xc5a <Stepper_A_rev+0x36>
     c5e:	00 c0       	rjmp	.+0      	; 0xc60 <Stepper_A_rev+0x3c>
     c60:	00 00       	nop
		_delay_ms(1); 
		STpinChange(StepA,0);
     c62:	60 e0       	ldi	r22, 0x00	; 0
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	87 e1       	ldi	r24, 0x17	; 23
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	0e 94 39 04 	call	0x872	; 0x872 <STpinChange>
		setspeed(speed);
     c6e:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <speed>
     c72:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <speed+0x1>
     c76:	0e 94 00 06 	call	0xc00	; 0xc00 <setspeed>
		NuOfSteps -= 1;
     c7a:	c1 50       	subi	r28, 0x01	; 1
	else
	{
		STpinChange(DIRA,0);
	}
	
	while (NuOfSteps > 0)
     c7c:	31 f7       	brne	.-52     	; 0xc4a <Stepper_A_rev+0x26>
		_delay_ms(1); 
		STpinChange(StepA,0);
		setspeed(speed);
		NuOfSteps -= 1;
	}
}
     c7e:	cf 91       	pop	r28
     c80:	08 95       	ret

00000c82 <Stepper_B_rev>:
void Stepper_B_rev(bool clockw,uint8_t NuOfSteps){//rotate clockwise or ccw , number of steps for stepperB
     c82:	cf 93       	push	r28
     c84:	c6 2f       	mov	r28, r22
	if (clockw)
     c86:	88 23       	and	r24, r24
     c88:	39 f0       	breq	.+14     	; 0xc98 <Stepper_B_rev+0x16>
	{
		STpinChange(DIRB,1);
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	8a e1       	ldi	r24, 0x1A	; 26
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	0e 94 39 04 	call	0x872	; 0x872 <STpinChange>
     c96:	06 c0       	rjmp	.+12     	; 0xca4 <Stepper_B_rev+0x22>
	}
	else
	{
		STpinChange(DIRB,0);
     c98:	60 e0       	ldi	r22, 0x00	; 0
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	8a e1       	ldi	r24, 0x1A	; 26
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 39 04 	call	0x872	; 0x872 <STpinChange>
	}
	
	while (NuOfSteps != 0)
     ca4:	cc 23       	and	r28, r28
     ca6:	d1 f0       	breq	.+52     	; 0xcdc <Stepper_B_rev+0x5a>
	{
		STpinChange(StepB,1);
     ca8:	61 e0       	ldi	r22, 0x01	; 1
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	89 e1       	ldi	r24, 0x19	; 25
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	0e 94 39 04 	call	0x872	; 0x872 <STpinChange>
     cb4:	89 ef       	ldi	r24, 0xF9	; 249
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	01 97       	sbiw	r24, 0x01	; 1
     cba:	f1 f7       	brne	.-4      	; 0xcb8 <Stepper_B_rev+0x36>
     cbc:	00 c0       	rjmp	.+0      	; 0xcbe <Stepper_B_rev+0x3c>
     cbe:	00 00       	nop
		_delay_ms(1); //1Hz = 60 rpm & t = 1/f &1s = 1000ms
		STpinChange(StepB,0);
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	89 e1       	ldi	r24, 0x19	; 25
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	0e 94 39 04 	call	0x872	; 0x872 <STpinChange>
		setspeed(speed);
     ccc:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <speed>
     cd0:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <speed+0x1>
     cd4:	0e 94 00 06 	call	0xc00	; 0xc00 <setspeed>
		NuOfSteps -= 1;
     cd8:	c1 50       	subi	r28, 0x01	; 1
	else
	{
		STpinChange(DIRB,0);
	}
	
	while (NuOfSteps != 0)
     cda:	31 f7       	brne	.-52     	; 0xca8 <Stepper_B_rev+0x26>
		_delay_ms(1); //1Hz = 60 rpm & t = 1/f &1s = 1000ms
		STpinChange(StepB,0);
		setspeed(speed);
		NuOfSteps -= 1;
	}
}
     cdc:	cf 91       	pop	r28
     cde:	08 95       	ret

00000ce0 <UART_INIT>:
	for (k=0;k<7;k++)
	{
		Transmit_Char(String[k]);  //Send 6 characters.
		_delay_ms(100);
	}
}
     ce0:	83 e3       	ldi	r24, 0x33	; 51
     ce2:	89 b9       	out	0x09, r24	; 9
     ce4:	10 bc       	out	0x20, r1	; 32
     ce6:	88 e1       	ldi	r24, 0x18	; 24
     ce8:	8a b9       	out	0x0a, r24	; 10
     cea:	86 e0       	ldi	r24, 0x06	; 6
     cec:	80 bd       	out	0x20, r24	; 32
     cee:	08 95       	ret

00000cf0 <Recive_Char>:
     cf0:	5f 9b       	sbis	0x0b, 7	; 11
     cf2:	fe cf       	rjmp	.-4      	; 0xcf0 <Recive_Char>
     cf4:	8c b1       	in	r24, 0x0c	; 12
     cf6:	08 95       	ret

00000cf8 <Recive_Data>:
void Recive_Data()
{   
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
	//int k;
	for  (k=0;k<7;k++)
     cfc:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <k+0x1>
     d00:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <k>
     d04:	c0 e0       	ldi	r28, 0x00	; 0
     d06:	d0 e0       	ldi	r29, 0x00	; 0
	{
		String [k] = Recive_Char();  //Store 6 characters.
     d08:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Recive_Char>
     d0c:	c2 59       	subi	r28, 0x92	; 146
     d0e:	df 4f       	sbci	r29, 0xFF	; 255
     d10:	88 83       	st	Y, r24
	}
}
void Recive_Data()
{   
	//int k;
	for  (k=0;k<7;k++)
     d12:	c0 91 6c 00 	lds	r28, 0x006C	; 0x80006c <k>
     d16:	d0 91 6d 00 	lds	r29, 0x006D	; 0x80006d <k+0x1>
     d1a:	21 96       	adiw	r28, 0x01	; 1
     d1c:	d0 93 6d 00 	sts	0x006D, r29	; 0x80006d <k+0x1>
     d20:	c0 93 6c 00 	sts	0x006C, r28	; 0x80006c <k>
     d24:	c7 30       	cpi	r28, 0x07	; 7
     d26:	d1 05       	cpc	r29, r1
     d28:	7c f3       	brlt	.-34     	; 0xd08 <Recive_Data+0x10>
	{
		String [k] = Recive_Char();  //Store 6 characters.
		
	}
	
}
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	08 95       	ret

00000d30 <__subsf3>:
     d30:	50 58       	subi	r21, 0x80	; 128

00000d32 <__addsf3>:
     d32:	bb 27       	eor	r27, r27
     d34:	aa 27       	eor	r26, r26
     d36:	0e 94 b0 06 	call	0xd60	; 0xd60 <__addsf3x>
     d3a:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__fp_round>
     d3e:	0e 94 74 07 	call	0xee8	; 0xee8 <__fp_pscA>
     d42:	38 f0       	brcs	.+14     	; 0xd52 <__addsf3+0x20>
     d44:	0e 94 7b 07 	call	0xef6	; 0xef6 <__fp_pscB>
     d48:	20 f0       	brcs	.+8      	; 0xd52 <__addsf3+0x20>
     d4a:	39 f4       	brne	.+14     	; 0xd5a <__addsf3+0x28>
     d4c:	9f 3f       	cpi	r25, 0xFF	; 255
     d4e:	19 f4       	brne	.+6      	; 0xd56 <__addsf3+0x24>
     d50:	26 f4       	brtc	.+8      	; 0xd5a <__addsf3+0x28>
     d52:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__fp_nan>
     d56:	0e f4       	brtc	.+2      	; 0xd5a <__addsf3+0x28>
     d58:	e0 95       	com	r30
     d5a:	e7 fb       	bst	r30, 7
     d5c:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <__fp_inf>

00000d60 <__addsf3x>:
     d60:	e9 2f       	mov	r30, r25
     d62:	0e 94 93 07 	call	0xf26	; 0xf26 <__fp_split3>
     d66:	58 f3       	brcs	.-42     	; 0xd3e <__addsf3+0xc>
     d68:	ba 17       	cp	r27, r26
     d6a:	62 07       	cpc	r22, r18
     d6c:	73 07       	cpc	r23, r19
     d6e:	84 07       	cpc	r24, r20
     d70:	95 07       	cpc	r25, r21
     d72:	20 f0       	brcs	.+8      	; 0xd7c <__addsf3x+0x1c>
     d74:	79 f4       	brne	.+30     	; 0xd94 <__addsf3x+0x34>
     d76:	a6 f5       	brtc	.+104    	; 0xde0 <__addsf3x+0x80>
     d78:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_zero>
     d7c:	0e f4       	brtc	.+2      	; 0xd80 <__addsf3x+0x20>
     d7e:	e0 95       	com	r30
     d80:	0b 2e       	mov	r0, r27
     d82:	ba 2f       	mov	r27, r26
     d84:	a0 2d       	mov	r26, r0
     d86:	0b 01       	movw	r0, r22
     d88:	b9 01       	movw	r22, r18
     d8a:	90 01       	movw	r18, r0
     d8c:	0c 01       	movw	r0, r24
     d8e:	ca 01       	movw	r24, r20
     d90:	a0 01       	movw	r20, r0
     d92:	11 24       	eor	r1, r1
     d94:	ff 27       	eor	r31, r31
     d96:	59 1b       	sub	r21, r25
     d98:	99 f0       	breq	.+38     	; 0xdc0 <__addsf3x+0x60>
     d9a:	59 3f       	cpi	r21, 0xF9	; 249
     d9c:	50 f4       	brcc	.+20     	; 0xdb2 <__addsf3x+0x52>
     d9e:	50 3e       	cpi	r21, 0xE0	; 224
     da0:	68 f1       	brcs	.+90     	; 0xdfc <__addsf3x+0x9c>
     da2:	1a 16       	cp	r1, r26
     da4:	f0 40       	sbci	r31, 0x00	; 0
     da6:	a2 2f       	mov	r26, r18
     da8:	23 2f       	mov	r18, r19
     daa:	34 2f       	mov	r19, r20
     dac:	44 27       	eor	r20, r20
     dae:	58 5f       	subi	r21, 0xF8	; 248
     db0:	f3 cf       	rjmp	.-26     	; 0xd98 <__addsf3x+0x38>
     db2:	46 95       	lsr	r20
     db4:	37 95       	ror	r19
     db6:	27 95       	ror	r18
     db8:	a7 95       	ror	r26
     dba:	f0 40       	sbci	r31, 0x00	; 0
     dbc:	53 95       	inc	r21
     dbe:	c9 f7       	brne	.-14     	; 0xdb2 <__addsf3x+0x52>
     dc0:	7e f4       	brtc	.+30     	; 0xde0 <__addsf3x+0x80>
     dc2:	1f 16       	cp	r1, r31
     dc4:	ba 0b       	sbc	r27, r26
     dc6:	62 0b       	sbc	r22, r18
     dc8:	73 0b       	sbc	r23, r19
     dca:	84 0b       	sbc	r24, r20
     dcc:	ba f0       	brmi	.+46     	; 0xdfc <__addsf3x+0x9c>
     dce:	91 50       	subi	r25, 0x01	; 1
     dd0:	a1 f0       	breq	.+40     	; 0xdfa <__addsf3x+0x9a>
     dd2:	ff 0f       	add	r31, r31
     dd4:	bb 1f       	adc	r27, r27
     dd6:	66 1f       	adc	r22, r22
     dd8:	77 1f       	adc	r23, r23
     dda:	88 1f       	adc	r24, r24
     ddc:	c2 f7       	brpl	.-16     	; 0xdce <__addsf3x+0x6e>
     dde:	0e c0       	rjmp	.+28     	; 0xdfc <__addsf3x+0x9c>
     de0:	ba 0f       	add	r27, r26
     de2:	62 1f       	adc	r22, r18
     de4:	73 1f       	adc	r23, r19
     de6:	84 1f       	adc	r24, r20
     de8:	48 f4       	brcc	.+18     	; 0xdfc <__addsf3x+0x9c>
     dea:	87 95       	ror	r24
     dec:	77 95       	ror	r23
     dee:	67 95       	ror	r22
     df0:	b7 95       	ror	r27
     df2:	f7 95       	ror	r31
     df4:	9e 3f       	cpi	r25, 0xFE	; 254
     df6:	08 f0       	brcs	.+2      	; 0xdfa <__addsf3x+0x9a>
     df8:	b0 cf       	rjmp	.-160    	; 0xd5a <__addsf3+0x28>
     dfa:	93 95       	inc	r25
     dfc:	88 0f       	add	r24, r24
     dfe:	08 f0       	brcs	.+2      	; 0xe02 <__addsf3x+0xa2>
     e00:	99 27       	eor	r25, r25
     e02:	ee 0f       	add	r30, r30
     e04:	97 95       	ror	r25
     e06:	87 95       	ror	r24
     e08:	08 95       	ret

00000e0a <__cmpsf2>:
     e0a:	0e 94 47 07 	call	0xe8e	; 0xe8e <__fp_cmp>
     e0e:	08 f4       	brcc	.+2      	; 0xe12 <__cmpsf2+0x8>
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	08 95       	ret

00000e14 <__floatunsisf>:
     e14:	e8 94       	clt
     e16:	09 c0       	rjmp	.+18     	; 0xe2a <__floatsisf+0x12>

00000e18 <__floatsisf>:
     e18:	97 fb       	bst	r25, 7
     e1a:	3e f4       	brtc	.+14     	; 0xe2a <__floatsisf+0x12>
     e1c:	90 95       	com	r25
     e1e:	80 95       	com	r24
     e20:	70 95       	com	r23
     e22:	61 95       	neg	r22
     e24:	7f 4f       	sbci	r23, 0xFF	; 255
     e26:	8f 4f       	sbci	r24, 0xFF	; 255
     e28:	9f 4f       	sbci	r25, 0xFF	; 255
     e2a:	99 23       	and	r25, r25
     e2c:	a9 f0       	breq	.+42     	; 0xe58 <__floatsisf+0x40>
     e2e:	f9 2f       	mov	r31, r25
     e30:	96 e9       	ldi	r25, 0x96	; 150
     e32:	bb 27       	eor	r27, r27
     e34:	93 95       	inc	r25
     e36:	f6 95       	lsr	r31
     e38:	87 95       	ror	r24
     e3a:	77 95       	ror	r23
     e3c:	67 95       	ror	r22
     e3e:	b7 95       	ror	r27
     e40:	f1 11       	cpse	r31, r1
     e42:	f8 cf       	rjmp	.-16     	; 0xe34 <__floatsisf+0x1c>
     e44:	fa f4       	brpl	.+62     	; 0xe84 <__floatsisf+0x6c>
     e46:	bb 0f       	add	r27, r27
     e48:	11 f4       	brne	.+4      	; 0xe4e <__floatsisf+0x36>
     e4a:	60 ff       	sbrs	r22, 0
     e4c:	1b c0       	rjmp	.+54     	; 0xe84 <__floatsisf+0x6c>
     e4e:	6f 5f       	subi	r22, 0xFF	; 255
     e50:	7f 4f       	sbci	r23, 0xFF	; 255
     e52:	8f 4f       	sbci	r24, 0xFF	; 255
     e54:	9f 4f       	sbci	r25, 0xFF	; 255
     e56:	16 c0       	rjmp	.+44     	; 0xe84 <__floatsisf+0x6c>
     e58:	88 23       	and	r24, r24
     e5a:	11 f0       	breq	.+4      	; 0xe60 <__floatsisf+0x48>
     e5c:	96 e9       	ldi	r25, 0x96	; 150
     e5e:	11 c0       	rjmp	.+34     	; 0xe82 <__floatsisf+0x6a>
     e60:	77 23       	and	r23, r23
     e62:	21 f0       	breq	.+8      	; 0xe6c <__floatsisf+0x54>
     e64:	9e e8       	ldi	r25, 0x8E	; 142
     e66:	87 2f       	mov	r24, r23
     e68:	76 2f       	mov	r23, r22
     e6a:	05 c0       	rjmp	.+10     	; 0xe76 <__floatsisf+0x5e>
     e6c:	66 23       	and	r22, r22
     e6e:	71 f0       	breq	.+28     	; 0xe8c <__floatsisf+0x74>
     e70:	96 e8       	ldi	r25, 0x86	; 134
     e72:	86 2f       	mov	r24, r22
     e74:	70 e0       	ldi	r23, 0x00	; 0
     e76:	60 e0       	ldi	r22, 0x00	; 0
     e78:	2a f0       	brmi	.+10     	; 0xe84 <__floatsisf+0x6c>
     e7a:	9a 95       	dec	r25
     e7c:	66 0f       	add	r22, r22
     e7e:	77 1f       	adc	r23, r23
     e80:	88 1f       	adc	r24, r24
     e82:	da f7       	brpl	.-10     	; 0xe7a <__floatsisf+0x62>
     e84:	88 0f       	add	r24, r24
     e86:	96 95       	lsr	r25
     e88:	87 95       	ror	r24
     e8a:	97 f9       	bld	r25, 7
     e8c:	08 95       	ret

00000e8e <__fp_cmp>:
     e8e:	99 0f       	add	r25, r25
     e90:	00 08       	sbc	r0, r0
     e92:	55 0f       	add	r21, r21
     e94:	aa 0b       	sbc	r26, r26
     e96:	e0 e8       	ldi	r30, 0x80	; 128
     e98:	fe ef       	ldi	r31, 0xFE	; 254
     e9a:	16 16       	cp	r1, r22
     e9c:	17 06       	cpc	r1, r23
     e9e:	e8 07       	cpc	r30, r24
     ea0:	f9 07       	cpc	r31, r25
     ea2:	c0 f0       	brcs	.+48     	; 0xed4 <__fp_cmp+0x46>
     ea4:	12 16       	cp	r1, r18
     ea6:	13 06       	cpc	r1, r19
     ea8:	e4 07       	cpc	r30, r20
     eaa:	f5 07       	cpc	r31, r21
     eac:	98 f0       	brcs	.+38     	; 0xed4 <__fp_cmp+0x46>
     eae:	62 1b       	sub	r22, r18
     eb0:	73 0b       	sbc	r23, r19
     eb2:	84 0b       	sbc	r24, r20
     eb4:	95 0b       	sbc	r25, r21
     eb6:	39 f4       	brne	.+14     	; 0xec6 <__fp_cmp+0x38>
     eb8:	0a 26       	eor	r0, r26
     eba:	61 f0       	breq	.+24     	; 0xed4 <__fp_cmp+0x46>
     ebc:	23 2b       	or	r18, r19
     ebe:	24 2b       	or	r18, r20
     ec0:	25 2b       	or	r18, r21
     ec2:	21 f4       	brne	.+8      	; 0xecc <__fp_cmp+0x3e>
     ec4:	08 95       	ret
     ec6:	0a 26       	eor	r0, r26
     ec8:	09 f4       	brne	.+2      	; 0xecc <__fp_cmp+0x3e>
     eca:	a1 40       	sbci	r26, 0x01	; 1
     ecc:	a6 95       	lsr	r26
     ece:	8f ef       	ldi	r24, 0xFF	; 255
     ed0:	81 1d       	adc	r24, r1
     ed2:	81 1d       	adc	r24, r1
     ed4:	08 95       	ret

00000ed6 <__fp_inf>:
     ed6:	97 f9       	bld	r25, 7
     ed8:	9f 67       	ori	r25, 0x7F	; 127
     eda:	80 e8       	ldi	r24, 0x80	; 128
     edc:	70 e0       	ldi	r23, 0x00	; 0
     ede:	60 e0       	ldi	r22, 0x00	; 0
     ee0:	08 95       	ret

00000ee2 <__fp_nan>:
     ee2:	9f ef       	ldi	r25, 0xFF	; 255
     ee4:	80 ec       	ldi	r24, 0xC0	; 192
     ee6:	08 95       	ret

00000ee8 <__fp_pscA>:
     ee8:	00 24       	eor	r0, r0
     eea:	0a 94       	dec	r0
     eec:	16 16       	cp	r1, r22
     eee:	17 06       	cpc	r1, r23
     ef0:	18 06       	cpc	r1, r24
     ef2:	09 06       	cpc	r0, r25
     ef4:	08 95       	ret

00000ef6 <__fp_pscB>:
     ef6:	00 24       	eor	r0, r0
     ef8:	0a 94       	dec	r0
     efa:	12 16       	cp	r1, r18
     efc:	13 06       	cpc	r1, r19
     efe:	14 06       	cpc	r1, r20
     f00:	05 06       	cpc	r0, r21
     f02:	08 95       	ret

00000f04 <__fp_round>:
     f04:	09 2e       	mov	r0, r25
     f06:	03 94       	inc	r0
     f08:	00 0c       	add	r0, r0
     f0a:	11 f4       	brne	.+4      	; 0xf10 <__fp_round+0xc>
     f0c:	88 23       	and	r24, r24
     f0e:	52 f0       	brmi	.+20     	; 0xf24 <__fp_round+0x20>
     f10:	bb 0f       	add	r27, r27
     f12:	40 f4       	brcc	.+16     	; 0xf24 <__fp_round+0x20>
     f14:	bf 2b       	or	r27, r31
     f16:	11 f4       	brne	.+4      	; 0xf1c <__fp_round+0x18>
     f18:	60 ff       	sbrs	r22, 0
     f1a:	04 c0       	rjmp	.+8      	; 0xf24 <__fp_round+0x20>
     f1c:	6f 5f       	subi	r22, 0xFF	; 255
     f1e:	7f 4f       	sbci	r23, 0xFF	; 255
     f20:	8f 4f       	sbci	r24, 0xFF	; 255
     f22:	9f 4f       	sbci	r25, 0xFF	; 255
     f24:	08 95       	ret

00000f26 <__fp_split3>:
     f26:	57 fd       	sbrc	r21, 7
     f28:	90 58       	subi	r25, 0x80	; 128
     f2a:	44 0f       	add	r20, r20
     f2c:	55 1f       	adc	r21, r21
     f2e:	59 f0       	breq	.+22     	; 0xf46 <__fp_splitA+0x10>
     f30:	5f 3f       	cpi	r21, 0xFF	; 255
     f32:	71 f0       	breq	.+28     	; 0xf50 <__fp_splitA+0x1a>
     f34:	47 95       	ror	r20

00000f36 <__fp_splitA>:
     f36:	88 0f       	add	r24, r24
     f38:	97 fb       	bst	r25, 7
     f3a:	99 1f       	adc	r25, r25
     f3c:	61 f0       	breq	.+24     	; 0xf56 <__fp_splitA+0x20>
     f3e:	9f 3f       	cpi	r25, 0xFF	; 255
     f40:	79 f0       	breq	.+30     	; 0xf60 <__fp_splitA+0x2a>
     f42:	87 95       	ror	r24
     f44:	08 95       	ret
     f46:	12 16       	cp	r1, r18
     f48:	13 06       	cpc	r1, r19
     f4a:	14 06       	cpc	r1, r20
     f4c:	55 1f       	adc	r21, r21
     f4e:	f2 cf       	rjmp	.-28     	; 0xf34 <__fp_split3+0xe>
     f50:	46 95       	lsr	r20
     f52:	f1 df       	rcall	.-30     	; 0xf36 <__fp_splitA>
     f54:	08 c0       	rjmp	.+16     	; 0xf66 <__fp_splitA+0x30>
     f56:	16 16       	cp	r1, r22
     f58:	17 06       	cpc	r1, r23
     f5a:	18 06       	cpc	r1, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	f1 cf       	rjmp	.-30     	; 0xf42 <__fp_splitA+0xc>
     f60:	86 95       	lsr	r24
     f62:	71 05       	cpc	r23, r1
     f64:	61 05       	cpc	r22, r1
     f66:	08 94       	sec
     f68:	08 95       	ret

00000f6a <__fp_zero>:
     f6a:	e8 94       	clt

00000f6c <__fp_szero>:
     f6c:	bb 27       	eor	r27, r27
     f6e:	66 27       	eor	r22, r22
     f70:	77 27       	eor	r23, r23
     f72:	cb 01       	movw	r24, r22
     f74:	97 f9       	bld	r25, 7
     f76:	08 95       	ret

00000f78 <__gesf2>:
     f78:	0e 94 47 07 	call	0xe8e	; 0xe8e <__fp_cmp>
     f7c:	08 f4       	brcc	.+2      	; 0xf80 <__gesf2+0x8>
     f7e:	8f ef       	ldi	r24, 0xFF	; 255
     f80:	08 95       	ret

00000f82 <__divmodhi4>:
     f82:	97 fb       	bst	r25, 7
     f84:	07 2e       	mov	r0, r23
     f86:	16 f4       	brtc	.+4      	; 0xf8c <__divmodhi4+0xa>
     f88:	00 94       	com	r0
     f8a:	07 d0       	rcall	.+14     	; 0xf9a <__divmodhi4_neg1>
     f8c:	77 fd       	sbrc	r23, 7
     f8e:	09 d0       	rcall	.+18     	; 0xfa2 <__divmodhi4_neg2>
     f90:	0e 94 d5 07 	call	0xfaa	; 0xfaa <__udivmodhi4>
     f94:	07 fc       	sbrc	r0, 7
     f96:	05 d0       	rcall	.+10     	; 0xfa2 <__divmodhi4_neg2>
     f98:	3e f4       	brtc	.+14     	; 0xfa8 <__divmodhi4_exit>

00000f9a <__divmodhi4_neg1>:
     f9a:	90 95       	com	r25
     f9c:	81 95       	neg	r24
     f9e:	9f 4f       	sbci	r25, 0xFF	; 255
     fa0:	08 95       	ret

00000fa2 <__divmodhi4_neg2>:
     fa2:	70 95       	com	r23
     fa4:	61 95       	neg	r22
     fa6:	7f 4f       	sbci	r23, 0xFF	; 255

00000fa8 <__divmodhi4_exit>:
     fa8:	08 95       	ret

00000faa <__udivmodhi4>:
     faa:	aa 1b       	sub	r26, r26
     fac:	bb 1b       	sub	r27, r27
     fae:	51 e1       	ldi	r21, 0x11	; 17
     fb0:	07 c0       	rjmp	.+14     	; 0xfc0 <__udivmodhi4_ep>

00000fb2 <__udivmodhi4_loop>:
     fb2:	aa 1f       	adc	r26, r26
     fb4:	bb 1f       	adc	r27, r27
     fb6:	a6 17       	cp	r26, r22
     fb8:	b7 07       	cpc	r27, r23
     fba:	10 f0       	brcs	.+4      	; 0xfc0 <__udivmodhi4_ep>
     fbc:	a6 1b       	sub	r26, r22
     fbe:	b7 0b       	sbc	r27, r23

00000fc0 <__udivmodhi4_ep>:
     fc0:	88 1f       	adc	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	5a 95       	dec	r21
     fc6:	a9 f7       	brne	.-22     	; 0xfb2 <__udivmodhi4_loop>
     fc8:	80 95       	com	r24
     fca:	90 95       	com	r25
     fcc:	bc 01       	movw	r22, r24
     fce:	cd 01       	movw	r24, r26
     fd0:	08 95       	ret

00000fd2 <atoi>:
     fd2:	fc 01       	movw	r30, r24
     fd4:	88 27       	eor	r24, r24
     fd6:	99 27       	eor	r25, r25
     fd8:	e8 94       	clt
     fda:	21 91       	ld	r18, Z+
     fdc:	20 32       	cpi	r18, 0x20	; 32
     fde:	e9 f3       	breq	.-6      	; 0xfda <atoi+0x8>
     fe0:	29 30       	cpi	r18, 0x09	; 9
     fe2:	10 f0       	brcs	.+4      	; 0xfe8 <atoi+0x16>
     fe4:	2e 30       	cpi	r18, 0x0E	; 14
     fe6:	c8 f3       	brcs	.-14     	; 0xfda <atoi+0x8>
     fe8:	2b 32       	cpi	r18, 0x2B	; 43
     fea:	41 f0       	breq	.+16     	; 0xffc <atoi+0x2a>
     fec:	2d 32       	cpi	r18, 0x2D	; 45
     fee:	39 f4       	brne	.+14     	; 0xffe <atoi+0x2c>
     ff0:	68 94       	set
     ff2:	04 c0       	rjmp	.+8      	; 0xffc <atoi+0x2a>
     ff4:	0e 94 12 08 	call	0x1024	; 0x1024 <__mulhi_const_10>
     ff8:	82 0f       	add	r24, r18
     ffa:	91 1d       	adc	r25, r1
     ffc:	21 91       	ld	r18, Z+
     ffe:	20 53       	subi	r18, 0x30	; 48
    1000:	2a 30       	cpi	r18, 0x0A	; 10
    1002:	c0 f3       	brcs	.-16     	; 0xff4 <atoi+0x22>
    1004:	1e f4       	brtc	.+6      	; 0x100c <atoi+0x3a>
    1006:	90 95       	com	r25
    1008:	81 95       	neg	r24
    100a:	9f 4f       	sbci	r25, 0xFF	; 255
    100c:	08 95       	ret

0000100e <__itoa_ncheck>:
    100e:	bb 27       	eor	r27, r27
    1010:	4a 30       	cpi	r20, 0x0A	; 10
    1012:	31 f4       	brne	.+12     	; 0x1020 <__itoa_ncheck+0x12>
    1014:	99 23       	and	r25, r25
    1016:	22 f4       	brpl	.+8      	; 0x1020 <__itoa_ncheck+0x12>
    1018:	bd e2       	ldi	r27, 0x2D	; 45
    101a:	90 95       	com	r25
    101c:	81 95       	neg	r24
    101e:	9f 4f       	sbci	r25, 0xFF	; 255
    1020:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <__utoa_common>

00001024 <__mulhi_const_10>:
    1024:	7a e0       	ldi	r23, 0x0A	; 10
    1026:	97 9f       	mul	r25, r23
    1028:	90 2d       	mov	r25, r0
    102a:	87 9f       	mul	r24, r23
    102c:	80 2d       	mov	r24, r0
    102e:	91 0d       	add	r25, r1
    1030:	11 24       	eor	r1, r1
    1032:	08 95       	ret

00001034 <__utoa_ncheck>:
    1034:	bb 27       	eor	r27, r27

00001036 <__utoa_common>:
    1036:	fb 01       	movw	r30, r22
    1038:	55 27       	eor	r21, r21
    103a:	aa 27       	eor	r26, r26
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	aa 1f       	adc	r26, r26
    1042:	a4 17       	cp	r26, r20
    1044:	10 f0       	brcs	.+4      	; 0x104a <__utoa_common+0x14>
    1046:	a4 1b       	sub	r26, r20
    1048:	83 95       	inc	r24
    104a:	50 51       	subi	r21, 0x10	; 16
    104c:	b9 f7       	brne	.-18     	; 0x103c <__utoa_common+0x6>
    104e:	a0 5d       	subi	r26, 0xD0	; 208
    1050:	aa 33       	cpi	r26, 0x3A	; 58
    1052:	08 f0       	brcs	.+2      	; 0x1056 <__utoa_common+0x20>
    1054:	a9 5d       	subi	r26, 0xD9	; 217
    1056:	a1 93       	st	Z+, r26
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	79 f7       	brne	.-34     	; 0x103a <__utoa_common+0x4>
    105c:	b1 11       	cpse	r27, r1
    105e:	b1 93       	st	Z+, r27
    1060:	11 92       	st	Z+, r1
    1062:	cb 01       	movw	r24, r22
    1064:	0c 94 34 08 	jmp	0x1068	; 0x1068 <strrev>

00001068 <strrev>:
    1068:	dc 01       	movw	r26, r24
    106a:	fc 01       	movw	r30, r24
    106c:	67 2f       	mov	r22, r23
    106e:	71 91       	ld	r23, Z+
    1070:	77 23       	and	r23, r23
    1072:	e1 f7       	brne	.-8      	; 0x106c <strrev+0x4>
    1074:	32 97       	sbiw	r30, 0x02	; 2
    1076:	04 c0       	rjmp	.+8      	; 0x1080 <strrev+0x18>
    1078:	7c 91       	ld	r23, X
    107a:	6d 93       	st	X+, r22
    107c:	70 83       	st	Z, r23
    107e:	62 91       	ld	r22, -Z
    1080:	ae 17       	cp	r26, r30
    1082:	bf 07       	cpc	r27, r31
    1084:	c8 f3       	brcs	.-14     	; 0x1078 <strrev+0x10>
    1086:	08 95       	ret

00001088 <_exit>:
    1088:	f8 94       	cli

0000108a <__stop_program>:
    108a:	ff cf       	rjmp	.-2      	; 0x108a <__stop_program>
