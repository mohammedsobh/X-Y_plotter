
X-Y_plotter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000080e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000882  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000074  00800060  00800060  00000882  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000882  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025b9  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b78  00000000  00000000  00003079  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001525  00000000  00000000  00003bf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000458  00000000  00000000  00005118  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066e  00000000  00000000  00005570  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001618  00000000  00000000  00005bde  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  000071f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 3d       	cpi	r26, 0xD4	; 212
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 97 00 	call	0x12e	; 0x12e <main>
  74:	0c 94 05 04 	jmp	0x80a	; 0x80a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <second_value>:
//this function take one variable, and search in it about the location of ","
//then put the characters after "," in a new array of characters
//then convert string to integer value ,then return it

int second_value (char* String)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	c4 56       	subi	r28, 0x64	; 100
  86:	d1 09       	sbc	r29, r1
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	f8 94       	cli
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	0f be       	out	0x3f, r0	; 63
  90:	cd bf       	out	0x3d, r28	; 61
  92:	ac 01       	movw	r20, r24
  94:	fe 01       	movw	r30, r28
  96:	31 96       	adiw	r30, 0x01	; 1
  98:	9e 01       	movw	r18, r28
  9a:	2b 59       	subi	r18, 0x9B	; 155
  9c:	3f 4f       	sbci	r19, 0xFF	; 255
    int i = 0,j=0;
	char second_v[100];
	for (int i = 0 ; i < 100 ;i++)
	{
		second_v [i] = 0;
  9e:	11 92       	st	Z+, r1

int second_value (char* String)
{
    int i = 0,j=0;
	char second_v[100];
	for (int i = 0 ; i < 100 ;i++)
  a0:	e2 17       	cp	r30, r18
  a2:	f3 07       	cpc	r31, r19
  a4:	e1 f7       	brne	.-8      	; 0x9e <second_value+0x22>
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	20 e0       	ldi	r18, 0x00	; 0
  ac:	30 e0       	ldi	r19, 0x00	; 0
	{
		second_v [i] = 0;
	}
    while(1)
    {
        if (String [i] == ','){
  ae:	fa 01       	movw	r30, r20
  b0:	e2 0f       	add	r30, r18
  b2:	f3 1f       	adc	r31, r19
  b4:	90 81       	ld	r25, Z
  b6:	9c 32       	cpi	r25, 0x2C	; 44
  b8:	99 f4       	brne	.+38     	; 0xe0 <second_value+0x64>
				second_v [j] = String[j+i+1];
  ba:	f9 01       	movw	r30, r18
  bc:	e6 0f       	add	r30, r22
  be:	f7 1f       	adc	r31, r23
  c0:	e4 0f       	add	r30, r20
  c2:	f5 1f       	adc	r31, r21
  c4:	81 81       	ldd	r24, Z+1	; 0x01
  c6:	a1 e0       	ldi	r26, 0x01	; 1
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	ac 0f       	add	r26, r28
  cc:	bd 1f       	adc	r27, r29
  ce:	a6 0f       	add	r26, r22
  d0:	b7 1f       	adc	r27, r23
  d2:	8c 93       	st	X, r24
				if (String [j+i+2] == '-')
  d4:	82 81       	ldd	r24, Z+2	; 0x02
  d6:	8d 32       	cpi	r24, 0x2D	; 45
  d8:	31 f0       	breq	.+12     	; 0xe6 <second_value+0x6a>
				break;
				j++;
  da:	6f 5f       	subi	r22, 0xFF	; 255
  dc:	7f 4f       	sbci	r23, 0xFF	; 255
  de:	e7 cf       	rjmp	.-50     	; 0xae <second_value+0x32>
		}
		else
		i++;
  e0:	2f 5f       	subi	r18, 0xFF	; 255
  e2:	3f 4f       	sbci	r19, 0xFF	; 255
  e4:	e4 cf       	rjmp	.-56     	; 0xae <second_value+0x32>
    }
    return (atoi(second_v));
  e6:	ce 01       	movw	r24, r28
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	0e 94 df 03 	call	0x7be	; 0x7be <atoi>
}
  ee:	cc 59       	subi	r28, 0x9C	; 156
  f0:	df 4f       	sbci	r29, 0xFF	; 255
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	f8 94       	cli
  f6:	de bf       	out	0x3e, r29	; 62
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <sub_function>:
//call by reference is used to make a change in it, to save the new value
//this function return a value that the motor have to move
//this value could be negative or positive, it realize the direction of movements
int sub_function (int *current_pos, int new_pos)
{
    int x = new_pos - *current_pos;
 102:	fc 01       	movw	r30, r24
 104:	20 81       	ld	r18, Z
 106:	31 81       	ldd	r19, Z+1	; 0x01
    *current_pos = new_pos;
 108:	71 83       	std	Z+1, r23	; 0x01
 10a:	60 83       	st	Z, r22
    return x;
 10c:	cb 01       	movw	r24, r22
 10e:	82 1b       	sub	r24, r18
 110:	93 0b       	sbc	r25, r19
 112:	08 95       	ret

00000114 <Init>:
		y=0;
	}
}
void Init(void)
{
	StepperInit(16,1000);
 114:	68 ee       	ldi	r22, 0xE8	; 232
 116:	73 e0       	ldi	r23, 0x03	; 3
 118:	80 e1       	ldi	r24, 0x10	; 16
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 cb 02 	call	0x596	; 0x596 <StepperInit>
	DDRC |=0XFF;
 120:	84 b3       	in	r24, 0x14	; 20
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	84 bb       	out	0x14, r24	; 20
	DDRA |= (1<<PA7);
 126:	d7 9a       	sbi	0x1a, 7	; 26
	UART_INIT();
 128:	0e 94 8d 03 	call	0x71a	; 0x71a <UART_INIT>
 12c:	08 95       	ret

0000012e <main>:

char String [100]  ;

int main(void)
{
	Init();
 12e:	0e 94 8a 00 	call	0x114	; 0x114 <Init>
 132:	c2 ed       	ldi	r28, 0xD2	; 210
 134:	d0 e0       	ldi	r29, 0x00	; 0
  			value_1 = 0;
  			value_2 = 0;
		}
		if (x < 0 ){ // if the distance give a negative number make it positive and change the direction of motor rotation
			x *=-1;
			statusx = 1;
 136:	01 e0       	ldi	r16, 0x01	; 1
			y *=-1;
			statusy = 1;
		}
		else
		statusy = 0;
		Stepper_A_rev(statusx,(x*100));
 138:	14 e6       	ldi	r17, 0x64	; 100
 13a:	ee e6       	ldi	r30, 0x6E	; 110
 13c:	f0 e0       	ldi	r31, 0x00	; 0
	Init();
	while (1)
	{
		for (int i = 0 ; i < 100 ;i++)
		{
			String [i] = 0;
 13e:	11 92       	st	Z+, r1
int main(void)
{
	Init();
	while (1)
	{
		for (int i = 0 ; i < 100 ;i++)
 140:	ec 17       	cp	r30, r28
 142:	fd 07       	cpc	r31, r29
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0x10>
		{
			String [i] = 0;
		}
		Recive_Data(String);
 146:	8e e6       	ldi	r24, 0x6E	; 110
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 99 03 	call	0x732	; 0x732 <Recive_Data>
		value_1 = atoi(String);           //extract first value
 14e:	8e e6       	ldi	r24, 0x6E	; 110
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 df 03 	call	0x7be	; 0x7be <atoi>
 156:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <value_1+0x1>
 15a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <value_1>
		value_2 = second_value (String); //call function to extract second value
 15e:	8e e6       	ldi	r24, 0x6E	; 110
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 3e 00 	call	0x7c	; 0x7c <second_value>
 166:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <value_2+0x1>
 16a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <value_2>
		if (!(value_1>250||value_2>250||value_1<0||value_2<0)) // if the values don't skip the plate ,use it
 16e:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <value_1>
 172:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <value_1+0x1>
 176:	6b 3f       	cpi	r22, 0xFB	; 251
 178:	71 05       	cpc	r23, r1
 17a:	f8 f4       	brcc	.+62     	; 0x1ba <main+0x8c>
 17c:	8b 3f       	cpi	r24, 0xFB	; 251
 17e:	91 05       	cpc	r25, r1
 180:	e0 f4       	brcc	.+56     	; 0x1ba <main+0x8c>
		{
			x = sub_function (&old_val_1, value_1);     //call function to extract first step
 182:	82 e6       	ldi	r24, 0x62	; 98
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 81 00 	call	0x102	; 0x102 <sub_function>
 18a:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <x+0x1>
 18e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <x>
			y = sub_function (&old_val_2, value_2);    //call function to extract second stepp
 192:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <value_2>
 196:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <value_2+0x1>
 19a:	80 e6       	ldi	r24, 0x60	; 96
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 81 00 	call	0x102	; 0x102 <sub_function>
 1a2:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <y+0x1>
 1a6:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <y>
  			value_1 = 0;
 1aa:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <value_1+0x1>
 1ae:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <value_1>
  			value_2 = 0;
 1b2:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <value_2+0x1>
 1b6:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <value_2>
		}
		if (x < 0 ){ // if the distance give a negative number make it positive and change the direction of motor rotation
 1ba:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <x>
 1be:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <x+0x1>
 1c2:	99 23       	and	r25, r25
 1c4:	54 f4       	brge	.+20     	; 0x1da <main+0xac>
			x *=-1;
 1c6:	91 95       	neg	r25
 1c8:	81 95       	neg	r24
 1ca:	91 09       	sbc	r25, r1
 1cc:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <x+0x1>
 1d0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <x>
			statusx = 1;
 1d4:	00 93 65 00 	sts	0x0065, r16	; 0x800065 <statusx>
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <main+0xb0>
		}
		else
		statusx = 0;
 1da:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <statusx>
		if (y < 0 ){
 1de:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <y>
 1e2:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <y+0x1>
 1e6:	99 23       	and	r25, r25
 1e8:	54 f4       	brge	.+20     	; 0x1fe <main+0xd0>
			y *=-1;
 1ea:	91 95       	neg	r25
 1ec:	81 95       	neg	r24
 1ee:	91 09       	sbc	r25, r1
 1f0:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <y+0x1>
 1f4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <y>
			statusy = 1;
 1f8:	00 93 64 00 	sts	0x0064, r16	; 0x800064 <statusy>
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <main+0xd4>
		}
		else
		statusy = 0;
 1fe:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <statusy>
		Stepper_A_rev(statusx,(x*100));
 202:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <x>
 206:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <x+0x1>
 20a:	18 9f       	mul	r17, r24
 20c:	a0 01       	movw	r20, r0
 20e:	19 9f       	mul	r17, r25
 210:	50 0d       	add	r21, r0
 212:	11 24       	eor	r1, r1
 214:	05 2e       	mov	r0, r21
 216:	00 0c       	add	r0, r0
 218:	66 0b       	sbc	r22, r22
 21a:	77 0b       	sbc	r23, r23
 21c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <statusx>
 220:	0e 94 37 03 	call	0x66e	; 0x66e <Stepper_A_rev>
		Stepper_B_rev(statusy,(y*100));
 224:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <y>
 228:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <y+0x1>
 22c:	18 9f       	mul	r17, r24
 22e:	a0 01       	movw	r20, r0
 230:	19 9f       	mul	r17, r25
 232:	50 0d       	add	r21, r0
 234:	11 24       	eor	r1, r1
 236:	05 2e       	mov	r0, r21
 238:	00 0c       	add	r0, r0
 23a:	66 0b       	sbc	r22, r22
 23c:	77 0b       	sbc	r23, r23
 23e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <statusy>
 242:	0e 94 62 03 	call	0x6c4	; 0x6c4 <Stepper_B_rev>
		x=0;
 246:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <x+0x1>
 24a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <x>
		y=0;
 24e:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <y+0x1>
 252:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <y>
	}
 256:	71 cf       	rjmp	.-286    	; 0x13a <main+0xc>

00000258 <STpinChange>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 258:	67 2b       	or	r22, r23
 25a:	09 f0       	breq	.+2      	; 0x25e <STpinChange+0x6>
 25c:	9f c0       	rjmp	.+318    	; 0x39c <STpinChange+0x144>
 25e:	00 97       	sbiw	r24, 0x00	; 0
 260:	11 f4       	brne	.+4      	; 0x266 <STpinChange+0xe>
 262:	d8 98       	cbi	0x1b, 0	; 27
 264:	08 95       	ret
 266:	81 30       	cpi	r24, 0x01	; 1
 268:	91 05       	cpc	r25, r1
 26a:	11 f4       	brne	.+4      	; 0x270 <STpinChange+0x18>
 26c:	d9 98       	cbi	0x1b, 1	; 27
 26e:	08 95       	ret
 270:	82 30       	cpi	r24, 0x02	; 2
 272:	91 05       	cpc	r25, r1
 274:	11 f4       	brne	.+4      	; 0x27a <STpinChange+0x22>
 276:	da 98       	cbi	0x1b, 2	; 27
 278:	08 95       	ret
 27a:	83 30       	cpi	r24, 0x03	; 3
 27c:	91 05       	cpc	r25, r1
 27e:	11 f4       	brne	.+4      	; 0x284 <STpinChange+0x2c>
 280:	db 98       	cbi	0x1b, 3	; 27
 282:	08 95       	ret
 284:	84 30       	cpi	r24, 0x04	; 4
 286:	91 05       	cpc	r25, r1
 288:	11 f4       	brne	.+4      	; 0x28e <STpinChange+0x36>
 28a:	dc 98       	cbi	0x1b, 4	; 27
 28c:	08 95       	ret
 28e:	85 30       	cpi	r24, 0x05	; 5
 290:	91 05       	cpc	r25, r1
 292:	11 f4       	brne	.+4      	; 0x298 <STpinChange+0x40>
 294:	dd 98       	cbi	0x1b, 5	; 27
 296:	08 95       	ret
 298:	86 30       	cpi	r24, 0x06	; 6
 29a:	91 05       	cpc	r25, r1
 29c:	11 f4       	brne	.+4      	; 0x2a2 <STpinChange+0x4a>
 29e:	de 98       	cbi	0x1b, 6	; 27
 2a0:	08 95       	ret
 2a2:	87 30       	cpi	r24, 0x07	; 7
 2a4:	91 05       	cpc	r25, r1
 2a6:	11 f4       	brne	.+4      	; 0x2ac <STpinChange+0x54>
 2a8:	df 98       	cbi	0x1b, 7	; 27
 2aa:	08 95       	ret
 2ac:	8a 30       	cpi	r24, 0x0A	; 10
 2ae:	91 05       	cpc	r25, r1
 2b0:	11 f4       	brne	.+4      	; 0x2b6 <STpinChange+0x5e>
 2b2:	c0 98       	cbi	0x18, 0	; 24
 2b4:	08 95       	ret
 2b6:	8b 30       	cpi	r24, 0x0B	; 11
 2b8:	91 05       	cpc	r25, r1
 2ba:	11 f4       	brne	.+4      	; 0x2c0 <STpinChange+0x68>
 2bc:	c1 98       	cbi	0x18, 1	; 24
 2be:	08 95       	ret
 2c0:	8c 30       	cpi	r24, 0x0C	; 12
 2c2:	91 05       	cpc	r25, r1
 2c4:	11 f4       	brne	.+4      	; 0x2ca <STpinChange+0x72>
 2c6:	c2 98       	cbi	0x18, 2	; 24
 2c8:	08 95       	ret
 2ca:	8d 30       	cpi	r24, 0x0D	; 13
 2cc:	91 05       	cpc	r25, r1
 2ce:	11 f4       	brne	.+4      	; 0x2d4 <STpinChange+0x7c>
 2d0:	c3 98       	cbi	0x18, 3	; 24
 2d2:	08 95       	ret
 2d4:	8e 30       	cpi	r24, 0x0E	; 14
 2d6:	91 05       	cpc	r25, r1
 2d8:	11 f4       	brne	.+4      	; 0x2de <STpinChange+0x86>
 2da:	c4 98       	cbi	0x18, 4	; 24
 2dc:	08 95       	ret
 2de:	8f 30       	cpi	r24, 0x0F	; 15
 2e0:	91 05       	cpc	r25, r1
 2e2:	11 f4       	brne	.+4      	; 0x2e8 <STpinChange+0x90>
 2e4:	c5 98       	cbi	0x18, 5	; 24
 2e6:	08 95       	ret
 2e8:	80 31       	cpi	r24, 0x10	; 16
 2ea:	91 05       	cpc	r25, r1
 2ec:	11 f4       	brne	.+4      	; 0x2f2 <STpinChange+0x9a>
 2ee:	c6 98       	cbi	0x18, 6	; 24
 2f0:	08 95       	ret
 2f2:	81 31       	cpi	r24, 0x11	; 17
 2f4:	91 05       	cpc	r25, r1
 2f6:	11 f4       	brne	.+4      	; 0x2fc <STpinChange+0xa4>
 2f8:	c7 98       	cbi	0x18, 7	; 24
 2fa:	08 95       	ret
 2fc:	84 31       	cpi	r24, 0x14	; 20
 2fe:	91 05       	cpc	r25, r1
 300:	11 f4       	brne	.+4      	; 0x306 <STpinChange+0xae>
 302:	a8 98       	cbi	0x15, 0	; 21
 304:	08 95       	ret
 306:	85 31       	cpi	r24, 0x15	; 21
 308:	91 05       	cpc	r25, r1
 30a:	11 f4       	brne	.+4      	; 0x310 <STpinChange+0xb8>
 30c:	a9 98       	cbi	0x15, 1	; 21
 30e:	08 95       	ret
 310:	86 31       	cpi	r24, 0x16	; 22
 312:	91 05       	cpc	r25, r1
 314:	11 f4       	brne	.+4      	; 0x31a <STpinChange+0xc2>
 316:	aa 98       	cbi	0x15, 2	; 21
 318:	08 95       	ret
 31a:	87 31       	cpi	r24, 0x17	; 23
 31c:	91 05       	cpc	r25, r1
 31e:	11 f4       	brne	.+4      	; 0x324 <STpinChange+0xcc>
 320:	ab 98       	cbi	0x15, 3	; 21
 322:	08 95       	ret
 324:	88 31       	cpi	r24, 0x18	; 24
 326:	91 05       	cpc	r25, r1
 328:	11 f4       	brne	.+4      	; 0x32e <STpinChange+0xd6>
 32a:	ac 98       	cbi	0x15, 4	; 21
 32c:	08 95       	ret
 32e:	89 31       	cpi	r24, 0x19	; 25
 330:	91 05       	cpc	r25, r1
 332:	11 f4       	brne	.+4      	; 0x338 <STpinChange+0xe0>
 334:	ad 98       	cbi	0x15, 5	; 21
 336:	08 95       	ret
 338:	8a 31       	cpi	r24, 0x1A	; 26
 33a:	91 05       	cpc	r25, r1
 33c:	11 f4       	brne	.+4      	; 0x342 <STpinChange+0xea>
 33e:	ae 98       	cbi	0x15, 6	; 21
 340:	08 95       	ret
 342:	8b 31       	cpi	r24, 0x1B	; 27
 344:	91 05       	cpc	r25, r1
 346:	11 f4       	brne	.+4      	; 0x34c <STpinChange+0xf4>
 348:	af 98       	cbi	0x15, 7	; 21
 34a:	08 95       	ret
 34c:	8e 31       	cpi	r24, 0x1E	; 30
 34e:	91 05       	cpc	r25, r1
 350:	11 f4       	brne	.+4      	; 0x356 <STpinChange+0xfe>
 352:	90 98       	cbi	0x12, 0	; 18
 354:	08 95       	ret
 356:	8f 31       	cpi	r24, 0x1F	; 31
 358:	91 05       	cpc	r25, r1
 35a:	11 f4       	brne	.+4      	; 0x360 <STpinChange+0x108>
 35c:	91 98       	cbi	0x12, 1	; 18
 35e:	08 95       	ret
 360:	80 32       	cpi	r24, 0x20	; 32
 362:	91 05       	cpc	r25, r1
 364:	11 f4       	brne	.+4      	; 0x36a <STpinChange+0x112>
 366:	92 98       	cbi	0x12, 2	; 18
 368:	08 95       	ret
 36a:	81 32       	cpi	r24, 0x21	; 33
 36c:	91 05       	cpc	r25, r1
 36e:	11 f4       	brne	.+4      	; 0x374 <STpinChange+0x11c>
 370:	93 98       	cbi	0x12, 3	; 18
 372:	08 95       	ret
 374:	82 32       	cpi	r24, 0x22	; 34
 376:	91 05       	cpc	r25, r1
 378:	11 f4       	brne	.+4      	; 0x37e <STpinChange+0x126>
 37a:	94 98       	cbi	0x12, 4	; 18
 37c:	08 95       	ret
 37e:	83 32       	cpi	r24, 0x23	; 35
 380:	91 05       	cpc	r25, r1
 382:	11 f4       	brne	.+4      	; 0x388 <STpinChange+0x130>
 384:	95 98       	cbi	0x12, 5	; 18
 386:	08 95       	ret
 388:	84 32       	cpi	r24, 0x24	; 36
 38a:	91 05       	cpc	r25, r1
 38c:	11 f4       	brne	.+4      	; 0x392 <STpinChange+0x13a>
 38e:	96 98       	cbi	0x12, 6	; 18
 390:	08 95       	ret
 392:	85 97       	sbiw	r24, 0x25	; 37
 394:	09 f0       	breq	.+2      	; 0x398 <STpinChange+0x140>
 396:	9f c0       	rjmp	.+318    	; 0x4d6 <__stack+0x77>
 398:	97 98       	cbi	0x12, 7	; 18
 39a:	08 95       	ret
 39c:	00 97       	sbiw	r24, 0x00	; 0
 39e:	11 f4       	brne	.+4      	; 0x3a4 <STpinChange+0x14c>
 3a0:	d8 9a       	sbi	0x1b, 0	; 27
 3a2:	08 95       	ret
 3a4:	81 30       	cpi	r24, 0x01	; 1
 3a6:	91 05       	cpc	r25, r1
 3a8:	11 f4       	brne	.+4      	; 0x3ae <STpinChange+0x156>
 3aa:	d9 9a       	sbi	0x1b, 1	; 27
 3ac:	08 95       	ret
 3ae:	82 30       	cpi	r24, 0x02	; 2
 3b0:	91 05       	cpc	r25, r1
 3b2:	11 f4       	brne	.+4      	; 0x3b8 <STpinChange+0x160>
 3b4:	da 9a       	sbi	0x1b, 2	; 27
 3b6:	08 95       	ret
 3b8:	83 30       	cpi	r24, 0x03	; 3
 3ba:	91 05       	cpc	r25, r1
 3bc:	11 f4       	brne	.+4      	; 0x3c2 <STpinChange+0x16a>
 3be:	db 9a       	sbi	0x1b, 3	; 27
 3c0:	08 95       	ret
 3c2:	84 30       	cpi	r24, 0x04	; 4
 3c4:	91 05       	cpc	r25, r1
 3c6:	11 f4       	brne	.+4      	; 0x3cc <STpinChange+0x174>
 3c8:	dc 9a       	sbi	0x1b, 4	; 27
 3ca:	08 95       	ret
 3cc:	85 30       	cpi	r24, 0x05	; 5
 3ce:	91 05       	cpc	r25, r1
 3d0:	11 f4       	brne	.+4      	; 0x3d6 <STpinChange+0x17e>
 3d2:	dd 9a       	sbi	0x1b, 5	; 27
 3d4:	08 95       	ret
 3d6:	86 30       	cpi	r24, 0x06	; 6
 3d8:	91 05       	cpc	r25, r1
 3da:	11 f4       	brne	.+4      	; 0x3e0 <STpinChange+0x188>
 3dc:	de 9a       	sbi	0x1b, 6	; 27
 3de:	08 95       	ret
 3e0:	87 30       	cpi	r24, 0x07	; 7
 3e2:	91 05       	cpc	r25, r1
 3e4:	11 f4       	brne	.+4      	; 0x3ea <STpinChange+0x192>
 3e6:	df 9a       	sbi	0x1b, 7	; 27
 3e8:	08 95       	ret
 3ea:	8a 30       	cpi	r24, 0x0A	; 10
 3ec:	91 05       	cpc	r25, r1
 3ee:	11 f4       	brne	.+4      	; 0x3f4 <STpinChange+0x19c>
 3f0:	c0 9a       	sbi	0x18, 0	; 24
 3f2:	08 95       	ret
 3f4:	8b 30       	cpi	r24, 0x0B	; 11
 3f6:	91 05       	cpc	r25, r1
 3f8:	11 f4       	brne	.+4      	; 0x3fe <STpinChange+0x1a6>
 3fa:	c1 9a       	sbi	0x18, 1	; 24
 3fc:	08 95       	ret
 3fe:	8c 30       	cpi	r24, 0x0C	; 12
 400:	91 05       	cpc	r25, r1
 402:	11 f4       	brne	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 404:	c2 9a       	sbi	0x18, 2	; 24
 406:	08 95       	ret
 408:	8d 30       	cpi	r24, 0x0D	; 13
 40a:	91 05       	cpc	r25, r1
 40c:	11 f4       	brne	.+4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 40e:	c3 9a       	sbi	0x18, 3	; 24
 410:	08 95       	ret
 412:	8e 30       	cpi	r24, 0x0E	; 14
 414:	91 05       	cpc	r25, r1
 416:	11 f4       	brne	.+4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 418:	c4 9a       	sbi	0x18, 4	; 24
 41a:	08 95       	ret
 41c:	8f 30       	cpi	r24, 0x0F	; 15
 41e:	91 05       	cpc	r25, r1
 420:	11 f4       	brne	.+4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 422:	c5 9a       	sbi	0x18, 5	; 24
 424:	08 95       	ret
 426:	80 31       	cpi	r24, 0x10	; 16
 428:	91 05       	cpc	r25, r1
 42a:	11 f4       	brne	.+4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42c:	c6 9a       	sbi	0x18, 6	; 24
 42e:	08 95       	ret
 430:	81 31       	cpi	r24, 0x11	; 17
 432:	91 05       	cpc	r25, r1
 434:	11 f4       	brne	.+4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 436:	c7 9a       	sbi	0x18, 7	; 24
 438:	08 95       	ret
 43a:	84 31       	cpi	r24, 0x14	; 20
 43c:	91 05       	cpc	r25, r1
 43e:	11 f4       	brne	.+4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 440:	a8 9a       	sbi	0x15, 0	; 21
 442:	08 95       	ret
 444:	85 31       	cpi	r24, 0x15	; 21
 446:	91 05       	cpc	r25, r1
 448:	11 f4       	brne	.+4      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44a:	a9 9a       	sbi	0x15, 1	; 21
 44c:	08 95       	ret
 44e:	86 31       	cpi	r24, 0x16	; 22
 450:	91 05       	cpc	r25, r1
 452:	11 f4       	brne	.+4      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 454:	aa 9a       	sbi	0x15, 2	; 21
 456:	08 95       	ret
 458:	87 31       	cpi	r24, 0x17	; 23
 45a:	91 05       	cpc	r25, r1
 45c:	11 f4       	brne	.+4      	; 0x462 <__stack+0x3>
 45e:	ab 9a       	sbi	0x15, 3	; 21
 460:	08 95       	ret
 462:	88 31       	cpi	r24, 0x18	; 24
 464:	91 05       	cpc	r25, r1
 466:	11 f4       	brne	.+4      	; 0x46c <__stack+0xd>
 468:	ac 9a       	sbi	0x15, 4	; 21
 46a:	08 95       	ret
 46c:	89 31       	cpi	r24, 0x19	; 25
 46e:	91 05       	cpc	r25, r1
 470:	11 f4       	brne	.+4      	; 0x476 <__stack+0x17>
 472:	ad 9a       	sbi	0x15, 5	; 21
 474:	08 95       	ret
 476:	8a 31       	cpi	r24, 0x1A	; 26
 478:	91 05       	cpc	r25, r1
 47a:	11 f4       	brne	.+4      	; 0x480 <__stack+0x21>
 47c:	ae 9a       	sbi	0x15, 6	; 21
 47e:	08 95       	ret
 480:	8b 31       	cpi	r24, 0x1B	; 27
 482:	91 05       	cpc	r25, r1
 484:	11 f4       	brne	.+4      	; 0x48a <__stack+0x2b>
 486:	af 9a       	sbi	0x15, 7	; 21
 488:	08 95       	ret
 48a:	8e 31       	cpi	r24, 0x1E	; 30
 48c:	91 05       	cpc	r25, r1
 48e:	11 f4       	brne	.+4      	; 0x494 <__stack+0x35>
 490:	90 9a       	sbi	0x12, 0	; 18
 492:	08 95       	ret
 494:	8f 31       	cpi	r24, 0x1F	; 31
 496:	91 05       	cpc	r25, r1
 498:	11 f4       	brne	.+4      	; 0x49e <__stack+0x3f>
 49a:	91 9a       	sbi	0x12, 1	; 18
 49c:	08 95       	ret
 49e:	80 32       	cpi	r24, 0x20	; 32
 4a0:	91 05       	cpc	r25, r1
 4a2:	11 f4       	brne	.+4      	; 0x4a8 <__stack+0x49>
 4a4:	92 9a       	sbi	0x12, 2	; 18
 4a6:	08 95       	ret
 4a8:	81 32       	cpi	r24, 0x21	; 33
 4aa:	91 05       	cpc	r25, r1
 4ac:	11 f4       	brne	.+4      	; 0x4b2 <__stack+0x53>
 4ae:	93 9a       	sbi	0x12, 3	; 18
 4b0:	08 95       	ret
 4b2:	82 32       	cpi	r24, 0x22	; 34
 4b4:	91 05       	cpc	r25, r1
 4b6:	11 f4       	brne	.+4      	; 0x4bc <__stack+0x5d>
 4b8:	94 9a       	sbi	0x12, 4	; 18
 4ba:	08 95       	ret
 4bc:	83 32       	cpi	r24, 0x23	; 35
 4be:	91 05       	cpc	r25, r1
 4c0:	11 f4       	brne	.+4      	; 0x4c6 <__stack+0x67>
 4c2:	95 9a       	sbi	0x12, 5	; 18
 4c4:	08 95       	ret
 4c6:	84 32       	cpi	r24, 0x24	; 36
 4c8:	91 05       	cpc	r25, r1
 4ca:	11 f4       	brne	.+4      	; 0x4d0 <__stack+0x71>
 4cc:	96 9a       	sbi	0x12, 6	; 18
 4ce:	08 95       	ret
 4d0:	85 97       	sbiw	r24, 0x25	; 37
 4d2:	09 f4       	brne	.+2      	; 0x4d6 <__stack+0x77>
 4d4:	97 9a       	sbi	0x12, 7	; 18
 4d6:	08 95       	ret

000004d8 <steper_1step>:
 4d8:	60 e0       	ldi	r22, 0x00	; 0
 4da:	70 e0       	ldi	r23, 0x00	; 0
 4dc:	84 e1       	ldi	r24, 0x14	; 20
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 2c 01 	call	0x258	; 0x258 <STpinChange>
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	85 e1       	ldi	r24, 0x15	; 21
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 2c 01 	call	0x258	; 0x258 <STpinChange>
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	70 e0       	ldi	r23, 0x00	; 0
 4f4:	86 e1       	ldi	r24, 0x16	; 22
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	0e 94 2c 01 	call	0x258	; 0x258 <STpinChange>
 4fc:	08 95       	ret

000004fe <steper_Hstep>:
 4fe:	61 e0       	ldi	r22, 0x01	; 1
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	84 e1       	ldi	r24, 0x14	; 20
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 2c 01 	call	0x258	; 0x258 <STpinChange>
 50a:	60 e0       	ldi	r22, 0x00	; 0
 50c:	70 e0       	ldi	r23, 0x00	; 0
 50e:	85 e1       	ldi	r24, 0x15	; 21
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	0e 94 2c 01 	call	0x258	; 0x258 <STpinChange>
 516:	60 e0       	ldi	r22, 0x00	; 0
 518:	70 e0       	ldi	r23, 0x00	; 0
 51a:	86 e1       	ldi	r24, 0x16	; 22
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	0e 94 2c 01 	call	0x258	; 0x258 <STpinChange>
 522:	08 95       	ret

00000524 <steper_Qstep>:
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	70 e0       	ldi	r23, 0x00	; 0
 528:	84 e1       	ldi	r24, 0x14	; 20
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	0e 94 2c 01 	call	0x258	; 0x258 <STpinChange>
 530:	61 e0       	ldi	r22, 0x01	; 1
 532:	70 e0       	ldi	r23, 0x00	; 0
 534:	85 e1       	ldi	r24, 0x15	; 21
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	0e 94 2c 01 	call	0x258	; 0x258 <STpinChange>
 53c:	60 e0       	ldi	r22, 0x00	; 0
 53e:	70 e0       	ldi	r23, 0x00	; 0
 540:	86 e1       	ldi	r24, 0x16	; 22
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 2c 01 	call	0x258	; 0x258 <STpinChange>
 548:	08 95       	ret

0000054a <steper_Estep>:
 54a:	61 e0       	ldi	r22, 0x01	; 1
 54c:	70 e0       	ldi	r23, 0x00	; 0
 54e:	84 e1       	ldi	r24, 0x14	; 20
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	0e 94 2c 01 	call	0x258	; 0x258 <STpinChange>
 556:	61 e0       	ldi	r22, 0x01	; 1
 558:	70 e0       	ldi	r23, 0x00	; 0
 55a:	85 e1       	ldi	r24, 0x15	; 21
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	0e 94 2c 01 	call	0x258	; 0x258 <STpinChange>
 562:	60 e0       	ldi	r22, 0x00	; 0
 564:	70 e0       	ldi	r23, 0x00	; 0
 566:	86 e1       	ldi	r24, 0x16	; 22
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0e 94 2c 01 	call	0x258	; 0x258 <STpinChange>
 56e:	08 95       	ret

00000570 <steper_Sstep>:
 570:	61 e0       	ldi	r22, 0x01	; 1
 572:	70 e0       	ldi	r23, 0x00	; 0
 574:	84 e1       	ldi	r24, 0x14	; 20
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	0e 94 2c 01 	call	0x258	; 0x258 <STpinChange>
 57c:	61 e0       	ldi	r22, 0x01	; 1
 57e:	70 e0       	ldi	r23, 0x00	; 0
 580:	85 e1       	ldi	r24, 0x15	; 21
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	0e 94 2c 01 	call	0x258	; 0x258 <STpinChange>
 588:	61 e0       	ldi	r22, 0x01	; 1
 58a:	70 e0       	ldi	r23, 0x00	; 0
 58c:	86 e1       	ldi	r24, 0x16	; 22
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	0e 94 2c 01 	call	0x258	; 0x258 <STpinChange>
 594:	08 95       	ret

00000596 <StepperInit>:
 596:	cf 93       	push	r28
 598:	df 93       	push	r29
 59a:	eb 01       	movw	r28, r22
 59c:	86 30       	cpi	r24, 0x06	; 6
 59e:	91 05       	cpc	r25, r1
 5a0:	99 f0       	breq	.+38     	; 0x5c8 <StepperInit+0x32>
 5a2:	34 f4       	brge	.+12     	; 0x5b0 <StepperInit+0x1a>
 5a4:	81 30       	cpi	r24, 0x01	; 1
 5a6:	91 05       	cpc	r25, r1
 5a8:	49 f0       	breq	.+18     	; 0x5bc <StepperInit+0x26>
 5aa:	02 97       	sbiw	r24, 0x02	; 2
 5ac:	51 f0       	breq	.+20     	; 0x5c2 <StepperInit+0x2c>
 5ae:	14 c0       	rjmp	.+40     	; 0x5d8 <StepperInit+0x42>
 5b0:	88 30       	cpi	r24, 0x08	; 8
 5b2:	91 05       	cpc	r25, r1
 5b4:	61 f0       	breq	.+24     	; 0x5ce <StepperInit+0x38>
 5b6:	40 97       	sbiw	r24, 0x10	; 16
 5b8:	69 f0       	breq	.+26     	; 0x5d4 <StepperInit+0x3e>
 5ba:	0e c0       	rjmp	.+28     	; 0x5d8 <StepperInit+0x42>
 5bc:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <steper_1step>
 5c0:	0b c0       	rjmp	.+22     	; 0x5d8 <StepperInit+0x42>
 5c2:	0e 94 7f 02 	call	0x4fe	; 0x4fe <steper_Hstep>
 5c6:	08 c0       	rjmp	.+16     	; 0x5d8 <StepperInit+0x42>
 5c8:	0e 94 92 02 	call	0x524	; 0x524 <steper_Qstep>
 5cc:	05 c0       	rjmp	.+10     	; 0x5d8 <StepperInit+0x42>
 5ce:	0e 94 a5 02 	call	0x54a	; 0x54a <steper_Estep>
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <StepperInit+0x42>
 5d4:	0e 94 b8 02 	call	0x570	; 0x570 <steper_Sstep>
 5d8:	d0 93 d3 00 	sts	0x00D3, r29	; 0x8000d3 <speed+0x1>
 5dc:	c0 93 d2 00 	sts	0x00D2, r28	; 0x8000d2 <speed>
 5e0:	df 91       	pop	r29
 5e2:	cf 91       	pop	r28
 5e4:	08 95       	ret

000005e6 <setspeed>:
 5e6:	bc 01       	movw	r22, r24
 5e8:	88 ee       	ldi	r24, 0xE8	; 232
 5ea:	93 e0       	ldi	r25, 0x03	; 3
 5ec:	0e 94 b7 03 	call	0x76e	; 0x76e <__divmodhi4>
 5f0:	16 16       	cp	r1, r22
 5f2:	17 06       	cpc	r1, r23
 5f4:	4c f4       	brge	.+18     	; 0x608 <setspeed+0x22>
 5f6:	8f ec       	ldi	r24, 0xCF	; 207
 5f8:	97 e0       	ldi	r25, 0x07	; 7
 5fa:	01 97       	sbiw	r24, 0x01	; 1
 5fc:	f1 f7       	brne	.-4      	; 0x5fa <setspeed+0x14>
 5fe:	00 c0       	rjmp	.+0      	; 0x600 <setspeed+0x1a>
 600:	00 00       	nop
 602:	61 50       	subi	r22, 0x01	; 1
 604:	71 09       	sbc	r23, r1
 606:	b9 f7       	brne	.-18     	; 0x5f6 <setspeed+0x10>
 608:	08 95       	ret

0000060a <Stepper_A_onerev>:
 60a:	61 e0       	ldi	r22, 0x01	; 1
 60c:	70 e0       	ldi	r23, 0x00	; 0
 60e:	87 e1       	ldi	r24, 0x17	; 23
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	0e 94 2c 01 	call	0x258	; 0x258 <STpinChange>
 616:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <speed>
 61a:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <speed+0x1>
 61e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <setspeed>
 622:	60 e0       	ldi	r22, 0x00	; 0
 624:	70 e0       	ldi	r23, 0x00	; 0
 626:	87 e1       	ldi	r24, 0x17	; 23
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 94 2c 01 	call	0x258	; 0x258 <STpinChange>
 62e:	87 ec       	ldi	r24, 0xC7	; 199
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	01 97       	sbiw	r24, 0x01	; 1
 634:	f1 f7       	brne	.-4      	; 0x632 <Stepper_A_onerev+0x28>
 636:	00 c0       	rjmp	.+0      	; 0x638 <Stepper_A_onerev+0x2e>
 638:	00 00       	nop
 63a:	08 95       	ret

0000063c <Stepper_B_onerev>:
 63c:	61 e0       	ldi	r22, 0x01	; 1
 63e:	70 e0       	ldi	r23, 0x00	; 0
 640:	89 e1       	ldi	r24, 0x19	; 25
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	0e 94 2c 01 	call	0x258	; 0x258 <STpinChange>
 648:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <speed>
 64c:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <speed+0x1>
 650:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <setspeed>
 654:	60 e0       	ldi	r22, 0x00	; 0
 656:	70 e0       	ldi	r23, 0x00	; 0
 658:	89 e1       	ldi	r24, 0x19	; 25
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	0e 94 2c 01 	call	0x258	; 0x258 <STpinChange>
 660:	87 ec       	ldi	r24, 0xC7	; 199
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	01 97       	sbiw	r24, 0x01	; 1
 666:	f1 f7       	brne	.-4      	; 0x664 <Stepper_B_onerev+0x28>
 668:	00 c0       	rjmp	.+0      	; 0x66a <Stepper_B_onerev+0x2e>
 66a:	00 00       	nop
 66c:	08 95       	ret

0000066e <Stepper_A_rev>:
	STpinChange(StepD,1);
	setspeed(speed);
	STpinChange(StepD,0);
	_delay_us (50);
}
void Stepper_A_rev(bool clockw,long NuOfSteps){//rotate clockwise or ccw , number of steps for stepperA
 66e:	cf 92       	push	r12
 670:	df 92       	push	r13
 672:	ef 92       	push	r14
 674:	ff 92       	push	r15
 676:	cf 93       	push	r28
 678:	c8 2f       	mov	r28, r24
 67a:	6a 01       	movw	r12, r20
 67c:	7b 01       	movw	r14, r22
	if (clockw)
 67e:	88 23       	and	r24, r24
 680:	39 f0       	breq	.+14     	; 0x690 <Stepper_A_rev+0x22>
	{
		STpinChange(DIRA,1);
 682:	61 e0       	ldi	r22, 0x01	; 1
 684:	70 e0       	ldi	r23, 0x00	; 0
 686:	88 e1       	ldi	r24, 0x18	; 24
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	0e 94 2c 01 	call	0x258	; 0x258 <STpinChange>
 68e:	06 c0       	rjmp	.+12     	; 0x69c <Stepper_A_rev+0x2e>
	}
	else
	{
		STpinChange(DIRA,0);
 690:	60 e0       	ldi	r22, 0x00	; 0
 692:	70 e0       	ldi	r23, 0x00	; 0
 694:	88 e1       	ldi	r24, 0x18	; 24
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	0e 94 2c 01 	call	0x258	; 0x258 <STpinChange>
	}
	
	while (NuOfSteps > 0)
 69c:	1c 14       	cp	r1, r12
 69e:	1d 04       	cpc	r1, r13
 6a0:	1e 04       	cpc	r1, r14
 6a2:	1f 04       	cpc	r1, r15
 6a4:	4c f4       	brge	.+18     	; 0x6b8 <Stepper_A_rev+0x4a>
	{
		Stepper_A_onerev(clockw);
 6a6:	8c 2f       	mov	r24, r28
 6a8:	0e 94 05 03 	call	0x60a	; 0x60a <Stepper_A_onerev>
		NuOfSteps -= 1;
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	c8 1a       	sub	r12, r24
 6b0:	d1 08       	sbc	r13, r1
 6b2:	e1 08       	sbc	r14, r1
 6b4:	f1 08       	sbc	r15, r1
	else
	{
		STpinChange(DIRA,0);
	}
	
	while (NuOfSteps > 0)
 6b6:	b9 f7       	brne	.-18     	; 0x6a6 <Stepper_A_rev+0x38>
	{
		Stepper_A_onerev(clockw);
		NuOfSteps -= 1;
	}
}
 6b8:	cf 91       	pop	r28
 6ba:	ff 90       	pop	r15
 6bc:	ef 90       	pop	r14
 6be:	df 90       	pop	r13
 6c0:	cf 90       	pop	r12
 6c2:	08 95       	ret

000006c4 <Stepper_B_rev>:
void Stepper_B_rev(bool clockw,long NuOfSteps){//rotate clockwise or ccw , number of steps for stepperB
 6c4:	cf 92       	push	r12
 6c6:	df 92       	push	r13
 6c8:	ef 92       	push	r14
 6ca:	ff 92       	push	r15
 6cc:	cf 93       	push	r28
 6ce:	c8 2f       	mov	r28, r24
 6d0:	6a 01       	movw	r12, r20
 6d2:	7b 01       	movw	r14, r22
	if (clockw)
 6d4:	88 23       	and	r24, r24
 6d6:	39 f0       	breq	.+14     	; 0x6e6 <Stepper_B_rev+0x22>
	{
		STpinChange(DIRB,1);
 6d8:	61 e0       	ldi	r22, 0x01	; 1
 6da:	70 e0       	ldi	r23, 0x00	; 0
 6dc:	8a e1       	ldi	r24, 0x1A	; 26
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	0e 94 2c 01 	call	0x258	; 0x258 <STpinChange>
 6e4:	06 c0       	rjmp	.+12     	; 0x6f2 <Stepper_B_rev+0x2e>
	}
	else
	{
		STpinChange(DIRB,0);
 6e6:	60 e0       	ldi	r22, 0x00	; 0
 6e8:	70 e0       	ldi	r23, 0x00	; 0
 6ea:	8a e1       	ldi	r24, 0x1A	; 26
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	0e 94 2c 01 	call	0x258	; 0x258 <STpinChange>
	}
	
	while (NuOfSteps > 0)
 6f2:	1c 14       	cp	r1, r12
 6f4:	1d 04       	cpc	r1, r13
 6f6:	1e 04       	cpc	r1, r14
 6f8:	1f 04       	cpc	r1, r15
 6fa:	4c f4       	brge	.+18     	; 0x70e <Stepper_B_rev+0x4a>
	{
		Stepper_B_onerev(clockw);
 6fc:	8c 2f       	mov	r24, r28
 6fe:	0e 94 1e 03 	call	0x63c	; 0x63c <Stepper_B_onerev>
		NuOfSteps -= 1;
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	c8 1a       	sub	r12, r24
 706:	d1 08       	sbc	r13, r1
 708:	e1 08       	sbc	r14, r1
 70a:	f1 08       	sbc	r15, r1
	else
	{
		STpinChange(DIRB,0);
	}
	
	while (NuOfSteps > 0)
 70c:	b9 f7       	brne	.-18     	; 0x6fc <Stepper_B_rev+0x38>
	{
		Stepper_B_onerev(clockw);
		NuOfSteps -= 1;
	}
}
 70e:	cf 91       	pop	r28
 710:	ff 90       	pop	r15
 712:	ef 90       	pop	r14
 714:	df 90       	pop	r13
 716:	cf 90       	pop	r12
 718:	08 95       	ret

0000071a <UART_INIT>:
	for (int k=0;k<7;k++)
	{
		Transmit_Char(ptr_string[k]);  //Send 6 characters.
		_delay_ms(100);
	}
}
 71a:	87 e6       	ldi	r24, 0x67	; 103
 71c:	89 b9       	out	0x09, r24	; 9
 71e:	10 bc       	out	0x20, r1	; 32
 720:	88 e1       	ldi	r24, 0x18	; 24
 722:	8a b9       	out	0x0a, r24	; 10
 724:	86 e8       	ldi	r24, 0x86	; 134
 726:	80 bd       	out	0x20, r24	; 32
 728:	08 95       	ret

0000072a <Recive_Char>:
 72a:	5f 9b       	sbis	0x0b, 7	; 11
 72c:	fe cf       	rjmp	.-4      	; 0x72a <Recive_Char>
 72e:	8c b1       	in	r24, 0x0c	; 12
 730:	08 95       	ret

00000732 <Recive_Data>:
void Recive_Data(char *ptr_string)
{   
 732:	0f 93       	push	r16
 734:	1f 93       	push	r17
 736:	cf 93       	push	r28
 738:	8c 01       	movw	r16, r24
	 	char ch;
	     uint8_t len = 0;
 73a:	c0 e0       	ldi	r28, 0x00	; 0
	 	while(1)
	 	{
	 		ch=Recive_Char();    //Receive a char
 73c:	0e 94 95 03 	call	0x72a	; 0x72a <Recive_Char>
	 		if((ch==';')) //read till enter key is pressed
 740:	8b 33       	cpi	r24, 0x3B	; 59
 742:	29 f4       	brne	.+10     	; 0x74e <Recive_Data+0x1c>
	 		{						     //once enter key is pressed null terminate the string
	 			ptr_string[len]=';';
 744:	f8 01       	movw	r30, r16
 746:	ec 0f       	add	r30, r28
 748:	f1 1d       	adc	r31, r1
 74a:	80 83       	st	Z, r24
	             len++;
	         }
	 	}

	
}
 74c:	0c c0       	rjmp	.+24     	; 0x766 <Recive_Data+0x34>
	 		if((ch==';')) //read till enter key is pressed
	 		{						     //once enter key is pressed null terminate the string
	 			ptr_string[len]=';';
	 			break;           //and break the loop
	 		}
	         else if((ch=='\b') && (len!=0))
 74e:	88 30       	cpi	r24, 0x08	; 8
 750:	21 f4       	brne	.+8      	; 0x75a <Recive_Data+0x28>
 752:	cc 23       	and	r28, r28
 754:	11 f0       	breq	.+4      	; 0x75a <Recive_Data+0x28>
	         {
	 		    len--;    //If backspace is pressed then decrement the index to remove the old char
 756:	c1 50       	subi	r28, 0x01	; 1
 758:	f1 cf       	rjmp	.-30     	; 0x73c <Recive_Data+0xa>
	         }
	         else
	         {
	             ptr_string[len]=ch; //copy the char into string and increment the index
 75a:	f8 01       	movw	r30, r16
 75c:	ec 0f       	add	r30, r28
 75e:	f1 1d       	adc	r31, r1
 760:	80 83       	st	Z, r24
	             len++;
 762:	cf 5f       	subi	r28, 0xFF	; 255
 764:	eb cf       	rjmp	.-42     	; 0x73c <Recive_Data+0xa>
	         }
	 	}

	
}
 766:	cf 91       	pop	r28
 768:	1f 91       	pop	r17
 76a:	0f 91       	pop	r16
 76c:	08 95       	ret

0000076e <__divmodhi4>:
 76e:	97 fb       	bst	r25, 7
 770:	07 2e       	mov	r0, r23
 772:	16 f4       	brtc	.+4      	; 0x778 <__divmodhi4+0xa>
 774:	00 94       	com	r0
 776:	07 d0       	rcall	.+14     	; 0x786 <__divmodhi4_neg1>
 778:	77 fd       	sbrc	r23, 7
 77a:	09 d0       	rcall	.+18     	; 0x78e <__divmodhi4_neg2>
 77c:	0e 94 cb 03 	call	0x796	; 0x796 <__udivmodhi4>
 780:	07 fc       	sbrc	r0, 7
 782:	05 d0       	rcall	.+10     	; 0x78e <__divmodhi4_neg2>
 784:	3e f4       	brtc	.+14     	; 0x794 <__divmodhi4_exit>

00000786 <__divmodhi4_neg1>:
 786:	90 95       	com	r25
 788:	81 95       	neg	r24
 78a:	9f 4f       	sbci	r25, 0xFF	; 255
 78c:	08 95       	ret

0000078e <__divmodhi4_neg2>:
 78e:	70 95       	com	r23
 790:	61 95       	neg	r22
 792:	7f 4f       	sbci	r23, 0xFF	; 255

00000794 <__divmodhi4_exit>:
 794:	08 95       	ret

00000796 <__udivmodhi4>:
 796:	aa 1b       	sub	r26, r26
 798:	bb 1b       	sub	r27, r27
 79a:	51 e1       	ldi	r21, 0x11	; 17
 79c:	07 c0       	rjmp	.+14     	; 0x7ac <__udivmodhi4_ep>

0000079e <__udivmodhi4_loop>:
 79e:	aa 1f       	adc	r26, r26
 7a0:	bb 1f       	adc	r27, r27
 7a2:	a6 17       	cp	r26, r22
 7a4:	b7 07       	cpc	r27, r23
 7a6:	10 f0       	brcs	.+4      	; 0x7ac <__udivmodhi4_ep>
 7a8:	a6 1b       	sub	r26, r22
 7aa:	b7 0b       	sbc	r27, r23

000007ac <__udivmodhi4_ep>:
 7ac:	88 1f       	adc	r24, r24
 7ae:	99 1f       	adc	r25, r25
 7b0:	5a 95       	dec	r21
 7b2:	a9 f7       	brne	.-22     	; 0x79e <__udivmodhi4_loop>
 7b4:	80 95       	com	r24
 7b6:	90 95       	com	r25
 7b8:	bc 01       	movw	r22, r24
 7ba:	cd 01       	movw	r24, r26
 7bc:	08 95       	ret

000007be <atoi>:
 7be:	fc 01       	movw	r30, r24
 7c0:	88 27       	eor	r24, r24
 7c2:	99 27       	eor	r25, r25
 7c4:	e8 94       	clt
 7c6:	21 91       	ld	r18, Z+
 7c8:	20 32       	cpi	r18, 0x20	; 32
 7ca:	e9 f3       	breq	.-6      	; 0x7c6 <atoi+0x8>
 7cc:	29 30       	cpi	r18, 0x09	; 9
 7ce:	10 f0       	brcs	.+4      	; 0x7d4 <atoi+0x16>
 7d0:	2e 30       	cpi	r18, 0x0E	; 14
 7d2:	c8 f3       	brcs	.-14     	; 0x7c6 <atoi+0x8>
 7d4:	2b 32       	cpi	r18, 0x2B	; 43
 7d6:	41 f0       	breq	.+16     	; 0x7e8 <atoi+0x2a>
 7d8:	2d 32       	cpi	r18, 0x2D	; 45
 7da:	39 f4       	brne	.+14     	; 0x7ea <atoi+0x2c>
 7dc:	68 94       	set
 7de:	04 c0       	rjmp	.+8      	; 0x7e8 <atoi+0x2a>
 7e0:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__mulhi_const_10>
 7e4:	82 0f       	add	r24, r18
 7e6:	91 1d       	adc	r25, r1
 7e8:	21 91       	ld	r18, Z+
 7ea:	20 53       	subi	r18, 0x30	; 48
 7ec:	2a 30       	cpi	r18, 0x0A	; 10
 7ee:	c0 f3       	brcs	.-16     	; 0x7e0 <atoi+0x22>
 7f0:	1e f4       	brtc	.+6      	; 0x7f8 <atoi+0x3a>
 7f2:	90 95       	com	r25
 7f4:	81 95       	neg	r24
 7f6:	9f 4f       	sbci	r25, 0xFF	; 255
 7f8:	08 95       	ret

000007fa <__mulhi_const_10>:
 7fa:	7a e0       	ldi	r23, 0x0A	; 10
 7fc:	97 9f       	mul	r25, r23
 7fe:	90 2d       	mov	r25, r0
 800:	87 9f       	mul	r24, r23
 802:	80 2d       	mov	r24, r0
 804:	91 0d       	add	r25, r1
 806:	11 24       	eor	r1, r1
 808:	08 95       	ret

0000080a <_exit>:
 80a:	f8 94       	cli

0000080c <__stop_program>:
 80c:	ff cf       	rjmp	.-2      	; 0x80c <__stop_program>
