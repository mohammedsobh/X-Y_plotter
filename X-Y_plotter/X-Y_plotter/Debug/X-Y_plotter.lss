
X-Y_plotter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b8e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000c02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800060  00800060  00000c02  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c02  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001af8  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a8b  00000000  00000000  00002898  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ff3  00000000  00000000  00003323  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000344  00000000  00000000  00004318  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000658  00000000  00000000  0000465c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001369  00000000  00000000  00004cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000601d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 38       	cpi	r26, 0x80	; 128
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ac 00 	call	0x158	; 0x158 <main>
  74:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <second_value>:
//***second_value_function***
//this function take one variable, and search in it about the location of ","
//then put the characters after "," in a new array of characters
//then convert string to integer value ,then return it
int second_value (char* String)
{
  7c:	ef 92       	push	r14
  7e:	ff 92       	push	r15
  80:	0f 93       	push	r16
  82:	1f 93       	push	r17
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	fc 01       	movw	r30, r24
          break;
    }
    for (j=0;j<length;j++)
        h [j] = String[j+i+1];
    return (atoi(h));
}
  8e:	0d b7       	in	r16, 0x3d	; 61
  90:	1e b7       	in	r17, 0x3e	; 62
//then put the characters after "," in a new array of characters
//then convert string to integer value ,then return it
int second_value (char* String)
{
    int i,j;
    int length = strlen (String);
  92:	dc 01       	movw	r26, r24
  94:	0d 90       	ld	r0, X+
  96:	00 20       	and	r0, r0
  98:	e9 f7       	brne	.-6      	; 0x94 <second_value+0x18>
  9a:	11 97       	sbiw	r26, 0x01	; 1
  9c:	bd 01       	movw	r22, r26
  9e:	68 1b       	sub	r22, r24
  a0:	79 0b       	sbc	r23, r25
  a2:	7b 01       	movw	r14, r22
    char h [length];
  a4:	8d b7       	in	r24, 0x3d	; 61
  a6:	9e b7       	in	r25, 0x3e	; 62
  a8:	86 1b       	sub	r24, r22
  aa:	97 0b       	sbc	r25, r23
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	f8 94       	cli
  b0:	9e bf       	out	0x3e, r25	; 62
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	8d bf       	out	0x3d, r24	; 61
  b6:	4d b7       	in	r20, 0x3d	; 61
  b8:	5e b7       	in	r21, 0x3e	; 62
  ba:	4f 5f       	subi	r20, 0xFF	; 255
  bc:	5f 4f       	sbci	r21, 0xFF	; 255
    for (i=0;i< length;i++)
  be:	16 16       	cp	r1, r22
  c0:	17 06       	cpc	r1, r23
  c2:	14 f5       	brge	.+68     	; 0x108 <second_value+0x8c>
    {
        if (String [i] == ',')
  c4:	80 81       	ld	r24, Z
  c6:	8c 32       	cpi	r24, 0x2C	; 44
  c8:	a1 f0       	breq	.+40     	; 0xf2 <second_value+0x76>
  ca:	df 01       	movw	r26, r30
  cc:	11 96       	adiw	r26, 0x01	; 1
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	03 c0       	rjmp	.+6      	; 0xda <second_value+0x5e>
  d4:	9d 91       	ld	r25, X+
  d6:	9c 32       	cpi	r25, 0x2C	; 44
  d8:	71 f0       	breq	.+28     	; 0xf6 <second_value+0x7a>
int second_value (char* String)
{
    int i,j;
    int length = strlen (String);
    char h [length];
    for (i=0;i< length;i++)
  da:	2f 5f       	subi	r18, 0xFF	; 255
  dc:	3f 4f       	sbci	r19, 0xFF	; 255
  de:	e2 16       	cp	r14, r18
  e0:	f3 06       	cpc	r15, r19
  e2:	c1 f7       	brne	.-16     	; 0xd4 <second_value+0x58>
  e4:	08 c0       	rjmp	.+16     	; 0xf6 <second_value+0x7a>
    {
        if (String [i] == ',')
          break;
    }
    for (j=0;j<length;j++)
        h [j] = String[j+i+1];
  e6:	91 91       	ld	r25, Z+
  e8:	9d 93       	st	X+, r25
    for (i=0;i< length;i++)
    {
        if (String [i] == ',')
          break;
    }
    for (j=0;j<length;j++)
  ea:	a2 17       	cp	r26, r18
  ec:	b3 07       	cpc	r27, r19
  ee:	d9 f7       	brne	.-10     	; 0xe6 <second_value+0x6a>
  f0:	0b c0       	rjmp	.+22     	; 0x108 <second_value+0x8c>
int second_value (char* String)
{
    int i,j;
    int length = strlen (String);
    char h [length];
    for (i=0;i< length;i++)
  f2:	20 e0       	ldi	r18, 0x00	; 0
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	2f 5f       	subi	r18, 0xFF	; 255
  f8:	3f 4f       	sbci	r19, 0xFF	; 255
  fa:	e2 0f       	add	r30, r18
  fc:	f3 1f       	adc	r31, r19
  fe:	da 01       	movw	r26, r20
 100:	9a 01       	movw	r18, r20
 102:	26 0f       	add	r18, r22
 104:	37 1f       	adc	r19, r23
 106:	ef cf       	rjmp	.-34     	; 0xe6 <second_value+0x6a>
        if (String [i] == ',')
          break;
    }
    for (j=0;j<length;j++)
        h [j] = String[j+i+1];
    return (atoi(h));
 108:	ca 01       	movw	r24, r20
 10a:	0e 94 9f 05 	call	0xb3e	; 0xb3e <atoi>
}
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	f8 94       	cli
 112:	1e bf       	out	0x3e, r17	; 62
 114:	0f be       	out	0x3f, r0	; 63
 116:	0d bf       	out	0x3d, r16	; 61
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	1f 91       	pop	r17
 11e:	0f 91       	pop	r16
 120:	ff 90       	pop	r15
 122:	ef 90       	pop	r14
 124:	08 95       	ret

00000126 <sub_function>:
//call by reference is used to make a change in it, to save the new value
//this function return a value that the motor have to move
//this value could be negative or positive, it realize the direction of movements
int sub_function (int* current_pos, int new_pos)
{
    int x = new_pos - *current_pos;
 126:	fc 01       	movw	r30, r24
 128:	20 81       	ld	r18, Z
 12a:	31 81       	ldd	r19, Z+1	; 0x01
    *current_pos = new_pos;
 12c:	71 83       	std	Z+1, r23	; 0x01
 12e:	60 83       	st	Z, r22
    return x;
 130:	cb 01       	movw	r24, r22
 132:	82 1b       	sub	r24, r18
 134:	93 0b       	sbc	r25, r19
 136:	08 95       	ret

00000138 <Init>:
		y = 0.0;
	}
}
void Init(void)
{
	StepperInit(16,1000);
 138:	68 ee       	ldi	r22, 0xE8	; 232
 13a:	73 e0       	ldi	r23, 0x03	; 3
 13c:	80 e1       	ldi	r24, 0x10	; 16
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 56 03 	call	0x6ac	; 0x6ac <StepperInit>
	DDRC |=(1<<PC0)|(1<<PC1)|(1<<PC2)|(1<<PC3)|(1<<PC4)|(1<<PC5)|(1<<PC6);
 144:	84 b3       	in	r24, 0x14	; 20
 146:	8f 67       	ori	r24, 0x7F	; 127
 148:	84 bb       	out	0x14, r24	; 20
	UART_Init(9600);
 14a:	60 e8       	ldi	r22, 0x80	; 128
 14c:	75 e2       	ldi	r23, 0x25	; 37
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 02 04 	call	0x804	; 0x804 <UART_Init>
 156:	08 95       	ret

00000158 <main>:
int step_1;
int step_2;
char String [8] ;
int main(void)
{
	Init();
 158:	0e 94 9c 00 	call	0x138	; 0x138 <Init>
		{
			Y = y - posy;
		}
		if (X < 0 ){ // if the distance give a negative number make it positive and change the direction of motor rotation
			X *=-1;
			statusx = 1;
 15c:	33 24       	eor	r3, r3
 15e:	33 94       	inc	r3
int main(void)
{
	Init();
	while (1)
	{
		UART_RxString(String);
 160:	85 e7       	ldi	r24, 0x75	; 117
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 0e 04 	call	0x81c	; 0x81c <UART_RxString>
		value_1 = atoi(String);           //extract first value
 168:	85 e7       	ldi	r24, 0x75	; 117
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 9f 05 	call	0xb3e	; 0xb3e <atoi>
 170:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <value_1+0x1>
 174:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <value_1>
		value_2 = second_value (String); //call function to extract second value
 178:	85 e7       	ldi	r24, 0x75	; 117
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 3e 00 	call	0x7c	; 0x7c <second_value>
 180:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <value_2+0x1>
 184:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <value_2>

		if (!(value_1>250||value_2>250||value_1<0||value_2<0)) // if the values don't skip the plate ,use it
 188:	60 91 73 00 	lds	r22, 0x0073	; 0x800073 <value_1>
 18c:	70 91 74 00 	lds	r23, 0x0074	; 0x800074 <value_1+0x1>
 190:	6b 3f       	cpi	r22, 0xFB	; 251
 192:	71 05       	cpc	r23, r1
 194:	b8 f4       	brcc	.+46     	; 0x1c4 <main+0x6c>
 196:	8b 3f       	cpi	r24, 0xFB	; 251
 198:	91 05       	cpc	r25, r1
 19a:	a0 f4       	brcc	.+40     	; 0x1c4 <main+0x6c>
		{
			
			step_1 = sub_function (&old_val_1, value_1);     //call function to extract first step
 19c:	82 e6       	ldi	r24, 0x62	; 98
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 93 00 	call	0x126	; 0x126 <sub_function>
 1a4:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <step_1+0x1>
 1a8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <step_1>
			
			step_2 = sub_function (&old_val_2, value_2);    //call function to extract second step
 1ac:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <value_2>
 1b0:	70 91 71 00 	lds	r23, 0x0071	; 0x800071 <value_2+0x1>
 1b4:	80 e6       	ldi	r24, 0x60	; 96
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 93 00 	call	0x126	; 0x126 <sub_function>
 1bc:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <step_2+0x1>
 1c0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <step_2>
		}
		double x = step_1; // variable to store the received x axis
 1c4:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <step_1>
 1c8:	70 91 6d 00 	lds	r23, 0x006D	; 0x80006d <step_1+0x1>
 1cc:	07 2e       	mov	r0, r23
 1ce:	00 0c       	add	r0, r0
 1d0:	88 0b       	sbc	r24, r24
 1d2:	99 0b       	sbc	r25, r25
 1d4:	0e 94 a0 04 	call	0x940	; 0x940 <__floatsisf>
 1d8:	d6 2e       	mov	r13, r22
 1da:	e7 2e       	mov	r14, r23
 1dc:	f8 2e       	mov	r15, r24
 1de:	09 2f       	mov	r16, r25
		double y = step_2; // variable to store the received y axis
 1e0:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <step_2>
 1e4:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <step_2+0x1>
 1e8:	07 2e       	mov	r0, r23
 1ea:	00 0c       	add	r0, r0
 1ec:	88 0b       	sbc	r24, r24
 1ee:	99 0b       	sbc	r25, r25
 1f0:	0e 94 a0 04 	call	0x940	; 0x940 <__floatsisf>
 1f4:	16 2f       	mov	r17, r22
 1f6:	d7 2f       	mov	r29, r23
 1f8:	c8 2f       	mov	r28, r24
 1fa:	c9 2e       	mov	r12, r25
		double X ; // variable to control the movement of x axis
		double Y ; // variable to control the movement of x axis
		if (posx == 0)
 1fc:	80 90 68 00 	lds	r8, 0x0068	; 0x800068 <posx>
 200:	90 90 69 00 	lds	r9, 0x0069	; 0x800069 <posx+0x1>
 204:	a0 90 6a 00 	lds	r10, 0x006A	; 0x80006a <posx+0x2>
 208:	b0 90 6b 00 	lds	r11, 0x006B	; 0x80006b <posx+0x3>
 20c:	20 e0       	ldi	r18, 0x00	; 0
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	a9 01       	movw	r20, r18
 212:	c5 01       	movw	r24, r10
 214:	b4 01       	movw	r22, r8
 216:	0e 94 99 04 	call	0x932	; 0x932 <__cmpsf2>
 21a:	88 23       	and	r24, r24
 21c:	59 f0       	breq	.+22     	; 0x234 <main+0xdc>
		{
			X = x;
		}
		else
		{
			X = x - posx;
 21e:	a5 01       	movw	r20, r10
 220:	94 01       	movw	r18, r8
 222:	6d 2d       	mov	r22, r13
 224:	7e 2d       	mov	r23, r14
 226:	8f 2d       	mov	r24, r15
 228:	90 2f       	mov	r25, r16
 22a:	0e 94 2c 04 	call	0x858	; 0x858 <__subsf3>
 22e:	4b 01       	movw	r8, r22
 230:	5c 01       	movw	r10, r24
 232:	04 c0       	rjmp	.+8      	; 0x23c <main+0xe4>
		double y = step_2; // variable to store the received y axis
		double X ; // variable to control the movement of x axis
		double Y ; // variable to control the movement of x axis
		if (posx == 0)
		{
			X = x;
 234:	8d 2c       	mov	r8, r13
 236:	9e 2c       	mov	r9, r14
 238:	af 2c       	mov	r10, r15
 23a:	b0 2e       	mov	r11, r16
		}
		else
		{
			X = x - posx;
		}
		if (posy == 0)
 23c:	40 90 64 00 	lds	r4, 0x0064	; 0x800064 <posy>
 240:	50 90 65 00 	lds	r5, 0x0065	; 0x800065 <posy+0x1>
 244:	60 90 66 00 	lds	r6, 0x0066	; 0x800066 <posy+0x2>
 248:	70 90 67 00 	lds	r7, 0x0067	; 0x800067 <posy+0x3>
 24c:	20 e0       	ldi	r18, 0x00	; 0
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	a9 01       	movw	r20, r18
 252:	c3 01       	movw	r24, r6
 254:	b2 01       	movw	r22, r4
 256:	0e 94 99 04 	call	0x932	; 0x932 <__cmpsf2>
 25a:	88 23       	and	r24, r24
 25c:	59 f0       	breq	.+22     	; 0x274 <main+0x11c>
		{
			Y = y;
		}
		else
		{
			Y = y - posy;
 25e:	a3 01       	movw	r20, r6
 260:	92 01       	movw	r18, r4
 262:	61 2f       	mov	r22, r17
 264:	7d 2f       	mov	r23, r29
 266:	8c 2f       	mov	r24, r28
 268:	9c 2d       	mov	r25, r12
 26a:	0e 94 2c 04 	call	0x858	; 0x858 <__subsf3>
 26e:	2b 01       	movw	r4, r22
 270:	3c 01       	movw	r6, r24
 272:	04 c0       	rjmp	.+8      	; 0x27c <main+0x124>
		{
			X = x - posx;
		}
		if (posy == 0)
		{
			Y = y;
 274:	41 2e       	mov	r4, r17
 276:	5d 2e       	mov	r5, r29
 278:	6c 2e       	mov	r6, r28
 27a:	7c 2c       	mov	r7, r12
		}
		else
		{
			Y = y - posy;
		}
		if (X < 0 ){ // if the distance give a negative number make it positive and change the direction of motor rotation
 27c:	20 e0       	ldi	r18, 0x00	; 0
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	a9 01       	movw	r20, r18
 282:	c5 01       	movw	r24, r10
 284:	b4 01       	movw	r22, r8
 286:	0e 94 99 04 	call	0x932	; 0x932 <__cmpsf2>
 28a:	88 23       	and	r24, r24
 28c:	34 f4       	brge	.+12     	; 0x29a <main+0x142>
			X *=-1;
 28e:	b7 fa       	bst	r11, 7
 290:	b0 94       	com	r11
 292:	b7 f8       	bld	r11, 7
 294:	b0 94       	com	r11
			statusx = 1;
 296:	30 92 72 00 	sts	0x0072, r3	; 0x800072 <statusx>
		}
		if (Y < 0 ){
 29a:	20 e0       	ldi	r18, 0x00	; 0
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	a9 01       	movw	r20, r18
 2a0:	c3 01       	movw	r24, r6
 2a2:	b2 01       	movw	r22, r4
 2a4:	0e 94 99 04 	call	0x932	; 0x932 <__cmpsf2>
 2a8:	88 23       	and	r24, r24
 2aa:	34 f4       	brge	.+12     	; 0x2b8 <main+0x160>
			Y *=-1;
 2ac:	77 fa       	bst	r7, 7
 2ae:	70 94       	com	r7
 2b0:	77 f8       	bld	r7, 7
 2b2:	70 94       	com	r7
			statusy = 1;
 2b4:	30 92 7d 00 	sts	0x007D, r3	; 0x80007d <statusy>
		}
		while (X>=0) // go to the received position
 2b8:	20 e0       	ldi	r18, 0x00	; 0
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	a9 01       	movw	r20, r18
 2be:	c5 01       	movw	r24, r10
 2c0:	b4 01       	movw	r22, r8
 2c2:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__gesf2>
 2c6:	88 23       	and	r24, r24
 2c8:	c4 f0       	brlt	.+48     	; 0x2fa <main+0x1a2>
		{
			Stepper_A_rev(statusx,1);
 2ca:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <statusx>
 2ce:	61 e0       	ldi	r22, 0x01	; 1
 2d0:	70 e0       	ldi	r23, 0x00	; 0
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 90 03 	call	0x720	; 0x720 <Stepper_A_rev>
			X--;
 2d8:	20 e0       	ldi	r18, 0x00	; 0
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	40 e8       	ldi	r20, 0x80	; 128
 2de:	5f e3       	ldi	r21, 0x3F	; 63
 2e0:	c5 01       	movw	r24, r10
 2e2:	b4 01       	movw	r22, r8
 2e4:	0e 94 2c 04 	call	0x858	; 0x858 <__subsf3>
 2e8:	4b 01       	movw	r8, r22
 2ea:	5c 01       	movw	r10, r24
		}
		if (Y < 0 ){
			Y *=-1;
			statusy = 1;
		}
		while (X>=0) // go to the received position
 2ec:	20 e0       	ldi	r18, 0x00	; 0
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	a9 01       	movw	r20, r18
 2f2:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__gesf2>
 2f6:	88 23       	and	r24, r24
 2f8:	44 f7       	brge	.-48     	; 0x2ca <main+0x172>
		{
			Stepper_A_rev(statusx,1);
			X--;
		}
		while (Y>=0)
 2fa:	20 e0       	ldi	r18, 0x00	; 0
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	a9 01       	movw	r20, r18
 300:	c3 01       	movw	r24, r6
 302:	b2 01       	movw	r22, r4
 304:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__gesf2>
 308:	88 23       	and	r24, r24
 30a:	c4 f0       	brlt	.+48     	; 0x33c <main+0x1e4>
		{
			Stepper_A_rev(statusy,1);
 30c:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <statusy>
 310:	61 e0       	ldi	r22, 0x01	; 1
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 90 03 	call	0x720	; 0x720 <Stepper_A_rev>
			Y--;
 31a:	20 e0       	ldi	r18, 0x00	; 0
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	40 e8       	ldi	r20, 0x80	; 128
 320:	5f e3       	ldi	r21, 0x3F	; 63
 322:	c3 01       	movw	r24, r6
 324:	b2 01       	movw	r22, r4
 326:	0e 94 2c 04 	call	0x858	; 0x858 <__subsf3>
 32a:	2b 01       	movw	r4, r22
 32c:	3c 01       	movw	r6, r24
		while (X>=0) // go to the received position
		{
			Stepper_A_rev(statusx,1);
			X--;
		}
		while (Y>=0)
 32e:	20 e0       	ldi	r18, 0x00	; 0
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	a9 01       	movw	r20, r18
 334:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__gesf2>
 338:	88 23       	and	r24, r24
 33a:	44 f7       	brge	.-48     	; 0x30c <main+0x1b4>
		{
			Stepper_A_rev(statusy,1);
			Y--;
		}
		posx = x;
 33c:	8d 2d       	mov	r24, r13
 33e:	9e 2d       	mov	r25, r14
 340:	af 2d       	mov	r26, r15
 342:	b0 2f       	mov	r27, r16
 344:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <posx>
 348:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <posx+0x1>
 34c:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <posx+0x2>
 350:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <posx+0x3>
		posy = y;
 354:	81 2f       	mov	r24, r17
 356:	9d 2f       	mov	r25, r29
 358:	ac 2f       	mov	r26, r28
 35a:	bc 2d       	mov	r27, r12
 35c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <posy>
 360:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <posy+0x1>
 364:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <posy+0x2>
 368:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <posy+0x3>
		x = 0.0;
		y = 0.0;
	}
 36c:	f9 ce       	rjmp	.-526    	; 0x160 <main+0x8>

0000036e <STpinChange>:
	if(a & 1024)
	STpinChange(DIRD,1);
	else
	STpinChange(DIRD,0);
	
}
 36e:	67 2b       	or	r22, r23
 370:	09 f0       	breq	.+2      	; 0x374 <STpinChange+0x6>
 372:	9f c0       	rjmp	.+318    	; 0x4b2 <__stack+0x53>
 374:	00 97       	sbiw	r24, 0x00	; 0
 376:	11 f4       	brne	.+4      	; 0x37c <STpinChange+0xe>
 378:	d8 98       	cbi	0x1b, 0	; 27
 37a:	08 95       	ret
 37c:	81 30       	cpi	r24, 0x01	; 1
 37e:	91 05       	cpc	r25, r1
 380:	11 f4       	brne	.+4      	; 0x386 <STpinChange+0x18>
 382:	d9 98       	cbi	0x1b, 1	; 27
 384:	08 95       	ret
 386:	82 30       	cpi	r24, 0x02	; 2
 388:	91 05       	cpc	r25, r1
 38a:	11 f4       	brne	.+4      	; 0x390 <STpinChange+0x22>
 38c:	da 98       	cbi	0x1b, 2	; 27
 38e:	08 95       	ret
 390:	83 30       	cpi	r24, 0x03	; 3
 392:	91 05       	cpc	r25, r1
 394:	11 f4       	brne	.+4      	; 0x39a <STpinChange+0x2c>
 396:	db 98       	cbi	0x1b, 3	; 27
 398:	08 95       	ret
 39a:	84 30       	cpi	r24, 0x04	; 4
 39c:	91 05       	cpc	r25, r1
 39e:	11 f4       	brne	.+4      	; 0x3a4 <STpinChange+0x36>
 3a0:	dc 98       	cbi	0x1b, 4	; 27
 3a2:	08 95       	ret
 3a4:	85 30       	cpi	r24, 0x05	; 5
 3a6:	91 05       	cpc	r25, r1
 3a8:	11 f4       	brne	.+4      	; 0x3ae <STpinChange+0x40>
 3aa:	dd 98       	cbi	0x1b, 5	; 27
 3ac:	08 95       	ret
 3ae:	86 30       	cpi	r24, 0x06	; 6
 3b0:	91 05       	cpc	r25, r1
 3b2:	11 f4       	brne	.+4      	; 0x3b8 <STpinChange+0x4a>
 3b4:	de 98       	cbi	0x1b, 6	; 27
 3b6:	08 95       	ret
 3b8:	87 30       	cpi	r24, 0x07	; 7
 3ba:	91 05       	cpc	r25, r1
 3bc:	11 f4       	brne	.+4      	; 0x3c2 <STpinChange+0x54>
 3be:	df 98       	cbi	0x1b, 7	; 27
 3c0:	08 95       	ret
 3c2:	8a 30       	cpi	r24, 0x0A	; 10
 3c4:	91 05       	cpc	r25, r1
 3c6:	11 f4       	brne	.+4      	; 0x3cc <STpinChange+0x5e>
 3c8:	c0 98       	cbi	0x18, 0	; 24
 3ca:	08 95       	ret
 3cc:	8b 30       	cpi	r24, 0x0B	; 11
 3ce:	91 05       	cpc	r25, r1
 3d0:	11 f4       	brne	.+4      	; 0x3d6 <STpinChange+0x68>
 3d2:	c1 98       	cbi	0x18, 1	; 24
 3d4:	08 95       	ret
 3d6:	8c 30       	cpi	r24, 0x0C	; 12
 3d8:	91 05       	cpc	r25, r1
 3da:	11 f4       	brne	.+4      	; 0x3e0 <STpinChange+0x72>
 3dc:	c2 98       	cbi	0x18, 2	; 24
 3de:	08 95       	ret
 3e0:	8d 30       	cpi	r24, 0x0D	; 13
 3e2:	91 05       	cpc	r25, r1
 3e4:	11 f4       	brne	.+4      	; 0x3ea <STpinChange+0x7c>
 3e6:	c3 98       	cbi	0x18, 3	; 24
 3e8:	08 95       	ret
 3ea:	8e 30       	cpi	r24, 0x0E	; 14
 3ec:	91 05       	cpc	r25, r1
 3ee:	11 f4       	brne	.+4      	; 0x3f4 <STpinChange+0x86>
 3f0:	c4 98       	cbi	0x18, 4	; 24
 3f2:	08 95       	ret
 3f4:	8f 30       	cpi	r24, 0x0F	; 15
 3f6:	91 05       	cpc	r25, r1
 3f8:	11 f4       	brne	.+4      	; 0x3fe <STpinChange+0x90>
 3fa:	c5 98       	cbi	0x18, 5	; 24
 3fc:	08 95       	ret
 3fe:	80 31       	cpi	r24, 0x10	; 16
 400:	91 05       	cpc	r25, r1
 402:	11 f4       	brne	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 404:	c6 98       	cbi	0x18, 6	; 24
 406:	08 95       	ret
 408:	81 31       	cpi	r24, 0x11	; 17
 40a:	91 05       	cpc	r25, r1
 40c:	11 f4       	brne	.+4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 40e:	c7 98       	cbi	0x18, 7	; 24
 410:	08 95       	ret
 412:	84 31       	cpi	r24, 0x14	; 20
 414:	91 05       	cpc	r25, r1
 416:	11 f4       	brne	.+4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 418:	a8 98       	cbi	0x15, 0	; 21
 41a:	08 95       	ret
 41c:	85 31       	cpi	r24, 0x15	; 21
 41e:	91 05       	cpc	r25, r1
 420:	11 f4       	brne	.+4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 422:	a9 98       	cbi	0x15, 1	; 21
 424:	08 95       	ret
 426:	86 31       	cpi	r24, 0x16	; 22
 428:	91 05       	cpc	r25, r1
 42a:	11 f4       	brne	.+4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42c:	aa 98       	cbi	0x15, 2	; 21
 42e:	08 95       	ret
 430:	87 31       	cpi	r24, 0x17	; 23
 432:	91 05       	cpc	r25, r1
 434:	11 f4       	brne	.+4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 436:	ab 98       	cbi	0x15, 3	; 21
 438:	08 95       	ret
 43a:	88 31       	cpi	r24, 0x18	; 24
 43c:	91 05       	cpc	r25, r1
 43e:	11 f4       	brne	.+4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 440:	ac 98       	cbi	0x15, 4	; 21
 442:	08 95       	ret
 444:	89 31       	cpi	r24, 0x19	; 25
 446:	91 05       	cpc	r25, r1
 448:	11 f4       	brne	.+4      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44a:	ad 98       	cbi	0x15, 5	; 21
 44c:	08 95       	ret
 44e:	8a 31       	cpi	r24, 0x1A	; 26
 450:	91 05       	cpc	r25, r1
 452:	11 f4       	brne	.+4      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 454:	ae 98       	cbi	0x15, 6	; 21
 456:	08 95       	ret
 458:	8b 31       	cpi	r24, 0x1B	; 27
 45a:	91 05       	cpc	r25, r1
 45c:	11 f4       	brne	.+4      	; 0x462 <__stack+0x3>
 45e:	af 98       	cbi	0x15, 7	; 21
 460:	08 95       	ret
 462:	8e 31       	cpi	r24, 0x1E	; 30
 464:	91 05       	cpc	r25, r1
 466:	11 f4       	brne	.+4      	; 0x46c <__stack+0xd>
 468:	90 98       	cbi	0x12, 0	; 18
 46a:	08 95       	ret
 46c:	8f 31       	cpi	r24, 0x1F	; 31
 46e:	91 05       	cpc	r25, r1
 470:	11 f4       	brne	.+4      	; 0x476 <__stack+0x17>
 472:	91 98       	cbi	0x12, 1	; 18
 474:	08 95       	ret
 476:	80 32       	cpi	r24, 0x20	; 32
 478:	91 05       	cpc	r25, r1
 47a:	11 f4       	brne	.+4      	; 0x480 <__stack+0x21>
 47c:	92 98       	cbi	0x12, 2	; 18
 47e:	08 95       	ret
 480:	81 32       	cpi	r24, 0x21	; 33
 482:	91 05       	cpc	r25, r1
 484:	11 f4       	brne	.+4      	; 0x48a <__stack+0x2b>
 486:	93 98       	cbi	0x12, 3	; 18
 488:	08 95       	ret
 48a:	82 32       	cpi	r24, 0x22	; 34
 48c:	91 05       	cpc	r25, r1
 48e:	11 f4       	brne	.+4      	; 0x494 <__stack+0x35>
 490:	94 98       	cbi	0x12, 4	; 18
 492:	08 95       	ret
 494:	83 32       	cpi	r24, 0x23	; 35
 496:	91 05       	cpc	r25, r1
 498:	11 f4       	brne	.+4      	; 0x49e <__stack+0x3f>
 49a:	95 98       	cbi	0x12, 5	; 18
 49c:	08 95       	ret
 49e:	84 32       	cpi	r24, 0x24	; 36
 4a0:	91 05       	cpc	r25, r1
 4a2:	11 f4       	brne	.+4      	; 0x4a8 <__stack+0x49>
 4a4:	96 98       	cbi	0x12, 6	; 18
 4a6:	08 95       	ret
 4a8:	85 97       	sbiw	r24, 0x25	; 37
 4aa:	09 f0       	breq	.+2      	; 0x4ae <__stack+0x4f>
 4ac:	9f c0       	rjmp	.+318    	; 0x5ec <__stack+0x18d>
 4ae:	97 98       	cbi	0x12, 7	; 18
 4b0:	08 95       	ret
 4b2:	00 97       	sbiw	r24, 0x00	; 0
 4b4:	11 f4       	brne	.+4      	; 0x4ba <__stack+0x5b>
 4b6:	d8 9a       	sbi	0x1b, 0	; 27
 4b8:	08 95       	ret
 4ba:	81 30       	cpi	r24, 0x01	; 1
 4bc:	91 05       	cpc	r25, r1
 4be:	11 f4       	brne	.+4      	; 0x4c4 <__stack+0x65>
 4c0:	d9 9a       	sbi	0x1b, 1	; 27
 4c2:	08 95       	ret
 4c4:	82 30       	cpi	r24, 0x02	; 2
 4c6:	91 05       	cpc	r25, r1
 4c8:	11 f4       	brne	.+4      	; 0x4ce <__stack+0x6f>
 4ca:	da 9a       	sbi	0x1b, 2	; 27
 4cc:	08 95       	ret
 4ce:	83 30       	cpi	r24, 0x03	; 3
 4d0:	91 05       	cpc	r25, r1
 4d2:	11 f4       	brne	.+4      	; 0x4d8 <__stack+0x79>
 4d4:	db 9a       	sbi	0x1b, 3	; 27
 4d6:	08 95       	ret
 4d8:	84 30       	cpi	r24, 0x04	; 4
 4da:	91 05       	cpc	r25, r1
 4dc:	11 f4       	brne	.+4      	; 0x4e2 <__stack+0x83>
 4de:	dc 9a       	sbi	0x1b, 4	; 27
 4e0:	08 95       	ret
 4e2:	85 30       	cpi	r24, 0x05	; 5
 4e4:	91 05       	cpc	r25, r1
 4e6:	11 f4       	brne	.+4      	; 0x4ec <__stack+0x8d>
 4e8:	dd 9a       	sbi	0x1b, 5	; 27
 4ea:	08 95       	ret
 4ec:	86 30       	cpi	r24, 0x06	; 6
 4ee:	91 05       	cpc	r25, r1
 4f0:	11 f4       	brne	.+4      	; 0x4f6 <__stack+0x97>
 4f2:	de 9a       	sbi	0x1b, 6	; 27
 4f4:	08 95       	ret
 4f6:	87 30       	cpi	r24, 0x07	; 7
 4f8:	91 05       	cpc	r25, r1
 4fa:	11 f4       	brne	.+4      	; 0x500 <__stack+0xa1>
 4fc:	df 9a       	sbi	0x1b, 7	; 27
 4fe:	08 95       	ret
 500:	8a 30       	cpi	r24, 0x0A	; 10
 502:	91 05       	cpc	r25, r1
 504:	11 f4       	brne	.+4      	; 0x50a <__stack+0xab>
 506:	c0 9a       	sbi	0x18, 0	; 24
 508:	08 95       	ret
 50a:	8b 30       	cpi	r24, 0x0B	; 11
 50c:	91 05       	cpc	r25, r1
 50e:	11 f4       	brne	.+4      	; 0x514 <__stack+0xb5>
 510:	c1 9a       	sbi	0x18, 1	; 24
 512:	08 95       	ret
 514:	8c 30       	cpi	r24, 0x0C	; 12
 516:	91 05       	cpc	r25, r1
 518:	11 f4       	brne	.+4      	; 0x51e <__stack+0xbf>
 51a:	c2 9a       	sbi	0x18, 2	; 24
 51c:	08 95       	ret
 51e:	8d 30       	cpi	r24, 0x0D	; 13
 520:	91 05       	cpc	r25, r1
 522:	11 f4       	brne	.+4      	; 0x528 <__stack+0xc9>
 524:	c3 9a       	sbi	0x18, 3	; 24
 526:	08 95       	ret
 528:	8e 30       	cpi	r24, 0x0E	; 14
 52a:	91 05       	cpc	r25, r1
 52c:	11 f4       	brne	.+4      	; 0x532 <__stack+0xd3>
 52e:	c4 9a       	sbi	0x18, 4	; 24
 530:	08 95       	ret
 532:	8f 30       	cpi	r24, 0x0F	; 15
 534:	91 05       	cpc	r25, r1
 536:	11 f4       	brne	.+4      	; 0x53c <__stack+0xdd>
 538:	c5 9a       	sbi	0x18, 5	; 24
 53a:	08 95       	ret
 53c:	80 31       	cpi	r24, 0x10	; 16
 53e:	91 05       	cpc	r25, r1
 540:	11 f4       	brne	.+4      	; 0x546 <__stack+0xe7>
 542:	c6 9a       	sbi	0x18, 6	; 24
 544:	08 95       	ret
 546:	81 31       	cpi	r24, 0x11	; 17
 548:	91 05       	cpc	r25, r1
 54a:	11 f4       	brne	.+4      	; 0x550 <__stack+0xf1>
 54c:	c7 9a       	sbi	0x18, 7	; 24
 54e:	08 95       	ret
 550:	84 31       	cpi	r24, 0x14	; 20
 552:	91 05       	cpc	r25, r1
 554:	11 f4       	brne	.+4      	; 0x55a <__stack+0xfb>
 556:	a8 9a       	sbi	0x15, 0	; 21
 558:	08 95       	ret
 55a:	85 31       	cpi	r24, 0x15	; 21
 55c:	91 05       	cpc	r25, r1
 55e:	11 f4       	brne	.+4      	; 0x564 <__stack+0x105>
 560:	a9 9a       	sbi	0x15, 1	; 21
 562:	08 95       	ret
 564:	86 31       	cpi	r24, 0x16	; 22
 566:	91 05       	cpc	r25, r1
 568:	11 f4       	brne	.+4      	; 0x56e <__stack+0x10f>
 56a:	aa 9a       	sbi	0x15, 2	; 21
 56c:	08 95       	ret
 56e:	87 31       	cpi	r24, 0x17	; 23
 570:	91 05       	cpc	r25, r1
 572:	11 f4       	brne	.+4      	; 0x578 <__stack+0x119>
 574:	ab 9a       	sbi	0x15, 3	; 21
 576:	08 95       	ret
 578:	88 31       	cpi	r24, 0x18	; 24
 57a:	91 05       	cpc	r25, r1
 57c:	11 f4       	brne	.+4      	; 0x582 <__stack+0x123>
 57e:	ac 9a       	sbi	0x15, 4	; 21
 580:	08 95       	ret
 582:	89 31       	cpi	r24, 0x19	; 25
 584:	91 05       	cpc	r25, r1
 586:	11 f4       	brne	.+4      	; 0x58c <__stack+0x12d>
 588:	ad 9a       	sbi	0x15, 5	; 21
 58a:	08 95       	ret
 58c:	8a 31       	cpi	r24, 0x1A	; 26
 58e:	91 05       	cpc	r25, r1
 590:	11 f4       	brne	.+4      	; 0x596 <__stack+0x137>
 592:	ae 9a       	sbi	0x15, 6	; 21
 594:	08 95       	ret
 596:	8b 31       	cpi	r24, 0x1B	; 27
 598:	91 05       	cpc	r25, r1
 59a:	11 f4       	brne	.+4      	; 0x5a0 <__stack+0x141>
 59c:	af 9a       	sbi	0x15, 7	; 21
 59e:	08 95       	ret
 5a0:	8e 31       	cpi	r24, 0x1E	; 30
 5a2:	91 05       	cpc	r25, r1
 5a4:	11 f4       	brne	.+4      	; 0x5aa <__stack+0x14b>
 5a6:	90 9a       	sbi	0x12, 0	; 18
 5a8:	08 95       	ret
 5aa:	8f 31       	cpi	r24, 0x1F	; 31
 5ac:	91 05       	cpc	r25, r1
 5ae:	11 f4       	brne	.+4      	; 0x5b4 <__stack+0x155>
 5b0:	91 9a       	sbi	0x12, 1	; 18
 5b2:	08 95       	ret
 5b4:	80 32       	cpi	r24, 0x20	; 32
 5b6:	91 05       	cpc	r25, r1
 5b8:	11 f4       	brne	.+4      	; 0x5be <__stack+0x15f>
 5ba:	92 9a       	sbi	0x12, 2	; 18
 5bc:	08 95       	ret
 5be:	81 32       	cpi	r24, 0x21	; 33
 5c0:	91 05       	cpc	r25, r1
 5c2:	11 f4       	brne	.+4      	; 0x5c8 <__stack+0x169>
 5c4:	93 9a       	sbi	0x12, 3	; 18
 5c6:	08 95       	ret
 5c8:	82 32       	cpi	r24, 0x22	; 34
 5ca:	91 05       	cpc	r25, r1
 5cc:	11 f4       	brne	.+4      	; 0x5d2 <__stack+0x173>
 5ce:	94 9a       	sbi	0x12, 4	; 18
 5d0:	08 95       	ret
 5d2:	83 32       	cpi	r24, 0x23	; 35
 5d4:	91 05       	cpc	r25, r1
 5d6:	11 f4       	brne	.+4      	; 0x5dc <__stack+0x17d>
 5d8:	95 9a       	sbi	0x12, 5	; 18
 5da:	08 95       	ret
 5dc:	84 32       	cpi	r24, 0x24	; 36
 5de:	91 05       	cpc	r25, r1
 5e0:	11 f4       	brne	.+4      	; 0x5e6 <__stack+0x187>
 5e2:	96 9a       	sbi	0x12, 6	; 18
 5e4:	08 95       	ret
 5e6:	85 97       	sbiw	r24, 0x25	; 37
 5e8:	09 f4       	brne	.+2      	; 0x5ec <__stack+0x18d>
 5ea:	97 9a       	sbi	0x12, 7	; 18
 5ec:	08 95       	ret

000005ee <steper_1step>:

void steper_1step(){ // to make a full 1 step with 2 phase
	STpinChange(ms1,0);        // ms1 = 0,ms2 = 0,ms3 = 0 from a9488 data sheet
 5ee:	60 e0       	ldi	r22, 0x00	; 0
 5f0:	70 e0       	ldi	r23, 0x00	; 0
 5f2:	84 e1       	ldi	r24, 0x14	; 20
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0e 94 b7 01 	call	0x36e	; 0x36e <STpinChange>
	STpinChange(ms2,0);
 5fa:	60 e0       	ldi	r22, 0x00	; 0
 5fc:	70 e0       	ldi	r23, 0x00	; 0
 5fe:	85 e1       	ldi	r24, 0x15	; 21
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	0e 94 b7 01 	call	0x36e	; 0x36e <STpinChange>
	STpinChange(ms3,0);
 606:	60 e0       	ldi	r22, 0x00	; 0
 608:	70 e0       	ldi	r23, 0x00	; 0
 60a:	86 e1       	ldi	r24, 0x16	; 22
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	0e 94 b7 01 	call	0x36e	; 0x36e <STpinChange>
 612:	08 95       	ret

00000614 <steper_Hstep>:
}
void steper_Hstep(){// to make a half 1 step with 1-2 phase ms1 = 1,ms2 = 0,ms3 = 0 from a9488 data sheet
	STpinChange(ms1,1);
 614:	61 e0       	ldi	r22, 0x01	; 1
 616:	70 e0       	ldi	r23, 0x00	; 0
 618:	84 e1       	ldi	r24, 0x14	; 20
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	0e 94 b7 01 	call	0x36e	; 0x36e <STpinChange>
	STpinChange(ms2,0);
 620:	60 e0       	ldi	r22, 0x00	; 0
 622:	70 e0       	ldi	r23, 0x00	; 0
 624:	85 e1       	ldi	r24, 0x15	; 21
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	0e 94 b7 01 	call	0x36e	; 0x36e <STpinChange>
	STpinChange(ms3,0);
 62c:	60 e0       	ldi	r22, 0x00	; 0
 62e:	70 e0       	ldi	r23, 0x00	; 0
 630:	86 e1       	ldi	r24, 0x16	; 22
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	0e 94 b7 01 	call	0x36e	; 0x36e <STpinChange>
 638:	08 95       	ret

0000063a <steper_Qstep>:
}
void steper_Qstep(){// to make a Quarter 1 step with w1-2 phase ms1 = 0,ms2 = 1,ms3 = 0 from a9488 data sheet
	STpinChange(ms1,0);
 63a:	60 e0       	ldi	r22, 0x00	; 0
 63c:	70 e0       	ldi	r23, 0x00	; 0
 63e:	84 e1       	ldi	r24, 0x14	; 20
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	0e 94 b7 01 	call	0x36e	; 0x36e <STpinChange>
	STpinChange(ms2,1);
 646:	61 e0       	ldi	r22, 0x01	; 1
 648:	70 e0       	ldi	r23, 0x00	; 0
 64a:	85 e1       	ldi	r24, 0x15	; 21
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	0e 94 b7 01 	call	0x36e	; 0x36e <STpinChange>
	STpinChange(ms3,0);
 652:	60 e0       	ldi	r22, 0x00	; 0
 654:	70 e0       	ldi	r23, 0x00	; 0
 656:	86 e1       	ldi	r24, 0x16	; 22
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	0e 94 b7 01 	call	0x36e	; 0x36e <STpinChange>
 65e:	08 95       	ret

00000660 <steper_Estep>:
}
void steper_Estep(){// to make a Eighth 1 step with 2w1-2 phase ms1 = 1,ms2 = 1,ms3 = 0 from a9488 data sheet
	STpinChange(ms1,1);
 660:	61 e0       	ldi	r22, 0x01	; 1
 662:	70 e0       	ldi	r23, 0x00	; 0
 664:	84 e1       	ldi	r24, 0x14	; 20
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	0e 94 b7 01 	call	0x36e	; 0x36e <STpinChange>
	STpinChange(ms2,1);
 66c:	61 e0       	ldi	r22, 0x01	; 1
 66e:	70 e0       	ldi	r23, 0x00	; 0
 670:	85 e1       	ldi	r24, 0x15	; 21
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	0e 94 b7 01 	call	0x36e	; 0x36e <STpinChange>
	STpinChange(ms3,0);
 678:	60 e0       	ldi	r22, 0x00	; 0
 67a:	70 e0       	ldi	r23, 0x00	; 0
 67c:	86 e1       	ldi	r24, 0x16	; 22
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	0e 94 b7 01 	call	0x36e	; 0x36e <STpinChange>
 684:	08 95       	ret

00000686 <steper_Sstep>:
}
void steper_Sstep(){// to make a Sixteenth 1 step with 4w1-2 phase ms1 = 1,ms2 = 1,ms3 = 0 from a9488 data sheet
	STpinChange(ms1,1);
 686:	61 e0       	ldi	r22, 0x01	; 1
 688:	70 e0       	ldi	r23, 0x00	; 0
 68a:	84 e1       	ldi	r24, 0x14	; 20
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	0e 94 b7 01 	call	0x36e	; 0x36e <STpinChange>
	STpinChange(ms2,1);
 692:	61 e0       	ldi	r22, 0x01	; 1
 694:	70 e0       	ldi	r23, 0x00	; 0
 696:	85 e1       	ldi	r24, 0x15	; 21
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	0e 94 b7 01 	call	0x36e	; 0x36e <STpinChange>
	STpinChange(ms3,1);
 69e:	61 e0       	ldi	r22, 0x01	; 1
 6a0:	70 e0       	ldi	r23, 0x00	; 0
 6a2:	86 e1       	ldi	r24, 0x16	; 22
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	0e 94 b7 01 	call	0x36e	; 0x36e <STpinChange>
 6aa:	08 95       	ret

000006ac <StepperInit>:
}
//library interface description
void StepperInit(int steps,int16_t sp)  //types of steps (1,2,6,8,16),speed of rotation in rpm
{
 6ac:	cf 93       	push	r28
 6ae:	df 93       	push	r29
 6b0:	eb 01       	movw	r28, r22
	switch (steps){
 6b2:	86 30       	cpi	r24, 0x06	; 6
 6b4:	91 05       	cpc	r25, r1
 6b6:	99 f0       	breq	.+38     	; 0x6de <StepperInit+0x32>
 6b8:	34 f4       	brge	.+12     	; 0x6c6 <StepperInit+0x1a>
 6ba:	81 30       	cpi	r24, 0x01	; 1
 6bc:	91 05       	cpc	r25, r1
 6be:	49 f0       	breq	.+18     	; 0x6d2 <StepperInit+0x26>
 6c0:	02 97       	sbiw	r24, 0x02	; 2
 6c2:	51 f0       	breq	.+20     	; 0x6d8 <StepperInit+0x2c>
 6c4:	14 c0       	rjmp	.+40     	; 0x6ee <StepperInit+0x42>
 6c6:	88 30       	cpi	r24, 0x08	; 8
 6c8:	91 05       	cpc	r25, r1
 6ca:	61 f0       	breq	.+24     	; 0x6e4 <StepperInit+0x38>
 6cc:	40 97       	sbiw	r24, 0x10	; 16
 6ce:	69 f0       	breq	.+26     	; 0x6ea <StepperInit+0x3e>
 6d0:	0e c0       	rjmp	.+28     	; 0x6ee <StepperInit+0x42>
		case 1:steper_1step();break;
 6d2:	0e 94 f7 02 	call	0x5ee	; 0x5ee <steper_1step>
 6d6:	0b c0       	rjmp	.+22     	; 0x6ee <StepperInit+0x42>
		case 2:steper_Hstep();break;
 6d8:	0e 94 0a 03 	call	0x614	; 0x614 <steper_Hstep>
 6dc:	08 c0       	rjmp	.+16     	; 0x6ee <StepperInit+0x42>
		case 6:steper_Qstep();break;
 6de:	0e 94 1d 03 	call	0x63a	; 0x63a <steper_Qstep>
 6e2:	05 c0       	rjmp	.+10     	; 0x6ee <StepperInit+0x42>
		case 8:steper_Estep();break;
 6e4:	0e 94 30 03 	call	0x660	; 0x660 <steper_Estep>
 6e8:	02 c0       	rjmp	.+4      	; 0x6ee <StepperInit+0x42>
		case 16:steper_Sstep();break;
 6ea:	0e 94 43 03 	call	0x686	; 0x686 <steper_Sstep>
	}
	speed = sp;
 6ee:	d0 93 7f 00 	sts	0x007F, r29	; 0x80007f <speed+0x1>
 6f2:	c0 93 7e 00 	sts	0x007E, r28	; 0x80007e <speed>
}
 6f6:	df 91       	pop	r29
 6f8:	cf 91       	pop	r28
 6fa:	08 95       	ret

000006fc <setspeed>:
void setspeed(int sp){
 6fc:	bc 01       	movw	r22, r24
	sp=(1000/sp);//1step = 1 mm 
 6fe:	88 ee       	ldi	r24, 0xE8	; 232
 700:	93 e0       	ldi	r25, 0x03	; 3
 702:	0e 94 55 05 	call	0xaaa	; 0xaaa <__divmodhi4>
	while(sp > 0){
 706:	16 16       	cp	r1, r22
 708:	17 06       	cpc	r1, r23
 70a:	4c f4       	brge	.+18     	; 0x71e <setspeed+0x22>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 70c:	89 ef       	ldi	r24, 0xF9	; 249
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	01 97       	sbiw	r24, 0x01	; 1
 712:	f1 f7       	brne	.-4      	; 0x710 <setspeed+0x14>
 714:	00 c0       	rjmp	.+0      	; 0x716 <setspeed+0x1a>
 716:	00 00       	nop
		_delay_ms(1);
		sp-=1;
 718:	61 50       	subi	r22, 0x01	; 1
 71a:	71 09       	sbc	r23, r1
	}
	speed = sp;
}
void setspeed(int sp){
	sp=(1000/sp);//1step = 1 mm 
	while(sp > 0){
 71c:	b9 f7       	brne	.-18     	; 0x70c <setspeed+0x10>
 71e:	08 95       	ret

00000720 <Stepper_A_rev>:
		_delay_ms(1);
		sp-=1;
	}
}
void Stepper_A_rev(bool clockw,uint8_t NuOfSteps){//rotate clockwise or ccw , number of steps for stepperA
 720:	cf 93       	push	r28
 722:	c6 2f       	mov	r28, r22
	if (clockw)
 724:	88 23       	and	r24, r24
 726:	39 f0       	breq	.+14     	; 0x736 <Stepper_A_rev+0x16>
	{
		STpinChange(DIRA,1);
 728:	61 e0       	ldi	r22, 0x01	; 1
 72a:	70 e0       	ldi	r23, 0x00	; 0
 72c:	88 e1       	ldi	r24, 0x18	; 24
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	0e 94 b7 01 	call	0x36e	; 0x36e <STpinChange>
 734:	06 c0       	rjmp	.+12     	; 0x742 <Stepper_A_rev+0x22>
	}
	else
	{
		STpinChange(DIRA,0);
 736:	60 e0       	ldi	r22, 0x00	; 0
 738:	70 e0       	ldi	r23, 0x00	; 0
 73a:	88 e1       	ldi	r24, 0x18	; 24
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	0e 94 b7 01 	call	0x36e	; 0x36e <STpinChange>
	}
	
	while (NuOfSteps > 0)
 742:	cc 23       	and	r28, r28
 744:	d1 f0       	breq	.+52     	; 0x77a <Stepper_A_rev+0x5a>
	{
		STpinChange(StepA,1);
 746:	61 e0       	ldi	r22, 0x01	; 1
 748:	70 e0       	ldi	r23, 0x00	; 0
 74a:	87 e1       	ldi	r24, 0x17	; 23
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	0e 94 b7 01 	call	0x36e	; 0x36e <STpinChange>
 752:	89 ef       	ldi	r24, 0xF9	; 249
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	01 97       	sbiw	r24, 0x01	; 1
 758:	f1 f7       	brne	.-4      	; 0x756 <Stepper_A_rev+0x36>
 75a:	00 c0       	rjmp	.+0      	; 0x75c <Stepper_A_rev+0x3c>
 75c:	00 00       	nop
		_delay_ms(1); 
		STpinChange(StepA,0);
 75e:	60 e0       	ldi	r22, 0x00	; 0
 760:	70 e0       	ldi	r23, 0x00	; 0
 762:	87 e1       	ldi	r24, 0x17	; 23
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	0e 94 b7 01 	call	0x36e	; 0x36e <STpinChange>
		setspeed(speed);
 76a:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <speed>
 76e:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <speed+0x1>
 772:	0e 94 7e 03 	call	0x6fc	; 0x6fc <setspeed>
		NuOfSteps -= 1;
 776:	c1 50       	subi	r28, 0x01	; 1
	else
	{
		STpinChange(DIRA,0);
	}
	
	while (NuOfSteps > 0)
 778:	31 f7       	brne	.-52     	; 0x746 <Stepper_A_rev+0x26>
		_delay_ms(1); 
		STpinChange(StepA,0);
		setspeed(speed);
		NuOfSteps -= 1;
	}
}
 77a:	cf 91       	pop	r28
 77c:	08 95       	ret

0000077e <UART_SetBaudRate>:
#if ((Enable_UART_TxString==1)|| (Enable_UART_Printf == 1))
void UART_TxString(char *ptr_string)
{
	while(*ptr_string)
		UART_TxChar(*ptr_string++);// Loop through the string and transmit char by char
}
 77e:	0f 93       	push	r16
 780:	1f 93       	push	r17
 782:	8b 01       	movw	r16, r22
 784:	9c 01       	movw	r18, r24
 786:	dc 01       	movw	r26, r24
 788:	cb 01       	movw	r24, r22
 78a:	80 56       	subi	r24, 0x60	; 96
 78c:	99 40       	sbci	r25, 0x09	; 9
 78e:	a1 09       	sbc	r26, r1
 790:	b1 09       	sbc	r27, r1
 792:	81 3a       	cpi	r24, 0xA1	; 161
 794:	98 4b       	sbci	r25, 0xB8	; 184
 796:	a1 40       	sbci	r26, 0x01	; 1
 798:	b1 05       	cpc	r27, r1
 79a:	68 f5       	brcc	.+90     	; 0x7f6 <UART_SetBaudRate+0x78>
 79c:	80 e0       	ldi	r24, 0x00	; 0
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	dc 01       	movw	r26, r24
 7a2:	80 1b       	sub	r24, r16
 7a4:	91 0b       	sbc	r25, r17
 7a6:	a2 0b       	sbc	r26, r18
 7a8:	b3 0b       	sbc	r27, r19
 7aa:	88 0f       	add	r24, r24
 7ac:	99 1f       	adc	r25, r25
 7ae:	aa 1f       	adc	r26, r26
 7b0:	bb 1f       	adc	r27, r27
 7b2:	88 0f       	add	r24, r24
 7b4:	99 1f       	adc	r25, r25
 7b6:	aa 1f       	adc	r26, r26
 7b8:	bb 1f       	adc	r27, r27
 7ba:	88 0f       	add	r24, r24
 7bc:	99 1f       	adc	r25, r25
 7be:	aa 1f       	adc	r26, r26
 7c0:	bb 1f       	adc	r27, r27
 7c2:	bc 01       	movw	r22, r24
 7c4:	cd 01       	movw	r24, r26
 7c6:	7c 5d       	subi	r23, 0xDC	; 220
 7c8:	8b 40       	sbci	r24, 0x0B	; 11
 7ca:	9f 4f       	sbci	r25, 0xFF	; 255
 7cc:	00 0f       	add	r16, r16
 7ce:	11 1f       	adc	r17, r17
 7d0:	22 1f       	adc	r18, r18
 7d2:	33 1f       	adc	r19, r19
 7d4:	00 0f       	add	r16, r16
 7d6:	11 1f       	adc	r17, r17
 7d8:	22 1f       	adc	r18, r18
 7da:	33 1f       	adc	r19, r19
 7dc:	a9 01       	movw	r20, r18
 7de:	98 01       	movw	r18, r16
 7e0:	22 0f       	add	r18, r18
 7e2:	33 1f       	adc	r19, r19
 7e4:	44 1f       	adc	r20, r20
 7e6:	55 1f       	adc	r21, r21
 7e8:	22 0f       	add	r18, r18
 7ea:	33 1f       	adc	r19, r19
 7ec:	44 1f       	adc	r20, r20
 7ee:	55 1f       	adc	r21, r21
 7f0:	0e 94 69 05 	call	0xad2	; 0xad2 <__udivmodsi4>
 7f4:	02 c0       	rjmp	.+4      	; 0x7fa <UART_SetBaudRate+0x7c>
 7f6:	27 e6       	ldi	r18, 0x67	; 103
 7f8:	30 e0       	ldi	r19, 0x00	; 0
 7fa:	29 b9       	out	0x09, r18	; 9
 7fc:	30 bd       	out	0x20, r19	; 32
 7fe:	1f 91       	pop	r17
 800:	0f 91       	pop	r16
 802:	08 95       	ret

00000804 <UART_Init>:
 804:	28 e1       	ldi	r18, 0x18	; 24
 806:	2a b9       	out	0x0a, r18	; 10
 808:	26 e8       	ldi	r18, 0x86	; 134
 80a:	20 bd       	out	0x20, r18	; 32
 80c:	1b b8       	out	0x0b, r1	; 11
 80e:	0e 94 bf 03 	call	0x77e	; 0x77e <UART_SetBaudRate>
 812:	08 95       	ret

00000814 <UART_RxChar>:
 814:	5f 9b       	sbis	0x0b, 7	; 11
 816:	fe cf       	rjmp	.-4      	; 0x814 <UART_RxChar>
 818:	8c b1       	in	r24, 0x0c	; 12
 81a:	08 95       	ret

0000081c <UART_RxString>:
    if not required then comment UART_TxChar(ch) in the code.
  2.BackSlash is not taken care.
***************************************************************************************************/
#if (Enable_UART_RxString==1)
void UART_RxString(char *ptr_string)
{
 81c:	0f 93       	push	r16
 81e:	1f 93       	push	r17
 820:	cf 93       	push	r28
 822:	8c 01       	movw	r16, r24
	char ch;
    uint8_t len = 0;
 824:	c0 e0       	ldi	r28, 0x00	; 0
	while(1)
	{
		ch=UART_RxChar();    //Receive a char
 826:	0e 94 0a 04 	call	0x814	; 0x814 <UART_RxChar>
// 		UART_TxChar(ch);     //Echo back the received char
		if((ch==';')) //read till enter key is pressed
 82a:	8b 33       	cpi	r24, 0x3B	; 59
 82c:	29 f4       	brne	.+10     	; 0x838 <UART_RxString+0x1c>
		{						     //once enter key is pressed null terminate the string
			ptr_string[len]=';';
 82e:	f8 01       	movw	r30, r16
 830:	ec 0f       	add	r30, r28
 832:	f1 1d       	adc	r31, r1
 834:	80 83       	st	Z, r24
            ptr_string[len]=ch; //copy the char into string and increment the index
            len++;
        }
	}
//   return len;   
}
 836:	0c c0       	rjmp	.+24     	; 0x850 <UART_RxString+0x34>
		if((ch==';')) //read till enter key is pressed
		{						     //once enter key is pressed null terminate the string
			ptr_string[len]=';';
			break;           //and break the loop				  
		}
        else if((ch=='\b') && (len!=0))
 838:	88 30       	cpi	r24, 0x08	; 8
 83a:	21 f4       	brne	.+8      	; 0x844 <UART_RxString+0x28>
 83c:	cc 23       	and	r28, r28
 83e:	11 f0       	breq	.+4      	; 0x844 <UART_RxString+0x28>
        {
		    len--;    //If backspace is pressed then decrement the index to remove the old char
 840:	c1 50       	subi	r28, 0x01	; 1
 842:	f1 cf       	rjmp	.-30     	; 0x826 <UART_RxString+0xa>
        }
        else
        {
            ptr_string[len]=ch; //copy the char into string and increment the index
 844:	f8 01       	movw	r30, r16
 846:	ec 0f       	add	r30, r28
 848:	f1 1d       	adc	r31, r1
 84a:	80 83       	st	Z, r24
            len++;
 84c:	cf 5f       	subi	r28, 0xFF	; 255
 84e:	eb cf       	rjmp	.-42     	; 0x826 <UART_RxString+0xa>
        }
	}
//   return len;   
}
 850:	cf 91       	pop	r28
 852:	1f 91       	pop	r17
 854:	0f 91       	pop	r16
 856:	08 95       	ret

00000858 <__subsf3>:
 858:	50 58       	subi	r21, 0x80	; 128

0000085a <__addsf3>:
 85a:	bb 27       	eor	r27, r27
 85c:	aa 27       	eor	r26, r26
 85e:	0e 94 44 04 	call	0x888	; 0x888 <__addsf3x>
 862:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__fp_round>
 866:	0e 94 08 05 	call	0xa10	; 0xa10 <__fp_pscA>
 86a:	38 f0       	brcs	.+14     	; 0x87a <__addsf3+0x20>
 86c:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__fp_pscB>
 870:	20 f0       	brcs	.+8      	; 0x87a <__addsf3+0x20>
 872:	39 f4       	brne	.+14     	; 0x882 <__addsf3+0x28>
 874:	9f 3f       	cpi	r25, 0xFF	; 255
 876:	19 f4       	brne	.+6      	; 0x87e <__addsf3+0x24>
 878:	26 f4       	brtc	.+8      	; 0x882 <__addsf3+0x28>
 87a:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_nan>
 87e:	0e f4       	brtc	.+2      	; 0x882 <__addsf3+0x28>
 880:	e0 95       	com	r30
 882:	e7 fb       	bst	r30, 7
 884:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_inf>

00000888 <__addsf3x>:
 888:	e9 2f       	mov	r30, r25
 88a:	0e 94 27 05 	call	0xa4e	; 0xa4e <__fp_split3>
 88e:	58 f3       	brcs	.-42     	; 0x866 <__addsf3+0xc>
 890:	ba 17       	cp	r27, r26
 892:	62 07       	cpc	r22, r18
 894:	73 07       	cpc	r23, r19
 896:	84 07       	cpc	r24, r20
 898:	95 07       	cpc	r25, r21
 89a:	20 f0       	brcs	.+8      	; 0x8a4 <__addsf3x+0x1c>
 89c:	79 f4       	brne	.+30     	; 0x8bc <__addsf3x+0x34>
 89e:	a6 f5       	brtc	.+104    	; 0x908 <__addsf3x+0x80>
 8a0:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_zero>
 8a4:	0e f4       	brtc	.+2      	; 0x8a8 <__addsf3x+0x20>
 8a6:	e0 95       	com	r30
 8a8:	0b 2e       	mov	r0, r27
 8aa:	ba 2f       	mov	r27, r26
 8ac:	a0 2d       	mov	r26, r0
 8ae:	0b 01       	movw	r0, r22
 8b0:	b9 01       	movw	r22, r18
 8b2:	90 01       	movw	r18, r0
 8b4:	0c 01       	movw	r0, r24
 8b6:	ca 01       	movw	r24, r20
 8b8:	a0 01       	movw	r20, r0
 8ba:	11 24       	eor	r1, r1
 8bc:	ff 27       	eor	r31, r31
 8be:	59 1b       	sub	r21, r25
 8c0:	99 f0       	breq	.+38     	; 0x8e8 <__addsf3x+0x60>
 8c2:	59 3f       	cpi	r21, 0xF9	; 249
 8c4:	50 f4       	brcc	.+20     	; 0x8da <__addsf3x+0x52>
 8c6:	50 3e       	cpi	r21, 0xE0	; 224
 8c8:	68 f1       	brcs	.+90     	; 0x924 <__addsf3x+0x9c>
 8ca:	1a 16       	cp	r1, r26
 8cc:	f0 40       	sbci	r31, 0x00	; 0
 8ce:	a2 2f       	mov	r26, r18
 8d0:	23 2f       	mov	r18, r19
 8d2:	34 2f       	mov	r19, r20
 8d4:	44 27       	eor	r20, r20
 8d6:	58 5f       	subi	r21, 0xF8	; 248
 8d8:	f3 cf       	rjmp	.-26     	; 0x8c0 <__addsf3x+0x38>
 8da:	46 95       	lsr	r20
 8dc:	37 95       	ror	r19
 8de:	27 95       	ror	r18
 8e0:	a7 95       	ror	r26
 8e2:	f0 40       	sbci	r31, 0x00	; 0
 8e4:	53 95       	inc	r21
 8e6:	c9 f7       	brne	.-14     	; 0x8da <__addsf3x+0x52>
 8e8:	7e f4       	brtc	.+30     	; 0x908 <__addsf3x+0x80>
 8ea:	1f 16       	cp	r1, r31
 8ec:	ba 0b       	sbc	r27, r26
 8ee:	62 0b       	sbc	r22, r18
 8f0:	73 0b       	sbc	r23, r19
 8f2:	84 0b       	sbc	r24, r20
 8f4:	ba f0       	brmi	.+46     	; 0x924 <__addsf3x+0x9c>
 8f6:	91 50       	subi	r25, 0x01	; 1
 8f8:	a1 f0       	breq	.+40     	; 0x922 <__addsf3x+0x9a>
 8fa:	ff 0f       	add	r31, r31
 8fc:	bb 1f       	adc	r27, r27
 8fe:	66 1f       	adc	r22, r22
 900:	77 1f       	adc	r23, r23
 902:	88 1f       	adc	r24, r24
 904:	c2 f7       	brpl	.-16     	; 0x8f6 <__addsf3x+0x6e>
 906:	0e c0       	rjmp	.+28     	; 0x924 <__addsf3x+0x9c>
 908:	ba 0f       	add	r27, r26
 90a:	62 1f       	adc	r22, r18
 90c:	73 1f       	adc	r23, r19
 90e:	84 1f       	adc	r24, r20
 910:	48 f4       	brcc	.+18     	; 0x924 <__addsf3x+0x9c>
 912:	87 95       	ror	r24
 914:	77 95       	ror	r23
 916:	67 95       	ror	r22
 918:	b7 95       	ror	r27
 91a:	f7 95       	ror	r31
 91c:	9e 3f       	cpi	r25, 0xFE	; 254
 91e:	08 f0       	brcs	.+2      	; 0x922 <__addsf3x+0x9a>
 920:	b0 cf       	rjmp	.-160    	; 0x882 <__addsf3+0x28>
 922:	93 95       	inc	r25
 924:	88 0f       	add	r24, r24
 926:	08 f0       	brcs	.+2      	; 0x92a <__addsf3x+0xa2>
 928:	99 27       	eor	r25, r25
 92a:	ee 0f       	add	r30, r30
 92c:	97 95       	ror	r25
 92e:	87 95       	ror	r24
 930:	08 95       	ret

00000932 <__cmpsf2>:
 932:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fp_cmp>
 936:	08 f4       	brcc	.+2      	; 0x93a <__cmpsf2+0x8>
 938:	81 e0       	ldi	r24, 0x01	; 1
 93a:	08 95       	ret

0000093c <__floatunsisf>:
 93c:	e8 94       	clt
 93e:	09 c0       	rjmp	.+18     	; 0x952 <__floatsisf+0x12>

00000940 <__floatsisf>:
 940:	97 fb       	bst	r25, 7
 942:	3e f4       	brtc	.+14     	; 0x952 <__floatsisf+0x12>
 944:	90 95       	com	r25
 946:	80 95       	com	r24
 948:	70 95       	com	r23
 94a:	61 95       	neg	r22
 94c:	7f 4f       	sbci	r23, 0xFF	; 255
 94e:	8f 4f       	sbci	r24, 0xFF	; 255
 950:	9f 4f       	sbci	r25, 0xFF	; 255
 952:	99 23       	and	r25, r25
 954:	a9 f0       	breq	.+42     	; 0x980 <__floatsisf+0x40>
 956:	f9 2f       	mov	r31, r25
 958:	96 e9       	ldi	r25, 0x96	; 150
 95a:	bb 27       	eor	r27, r27
 95c:	93 95       	inc	r25
 95e:	f6 95       	lsr	r31
 960:	87 95       	ror	r24
 962:	77 95       	ror	r23
 964:	67 95       	ror	r22
 966:	b7 95       	ror	r27
 968:	f1 11       	cpse	r31, r1
 96a:	f8 cf       	rjmp	.-16     	; 0x95c <__floatsisf+0x1c>
 96c:	fa f4       	brpl	.+62     	; 0x9ac <__floatsisf+0x6c>
 96e:	bb 0f       	add	r27, r27
 970:	11 f4       	brne	.+4      	; 0x976 <__floatsisf+0x36>
 972:	60 ff       	sbrs	r22, 0
 974:	1b c0       	rjmp	.+54     	; 0x9ac <__floatsisf+0x6c>
 976:	6f 5f       	subi	r22, 0xFF	; 255
 978:	7f 4f       	sbci	r23, 0xFF	; 255
 97a:	8f 4f       	sbci	r24, 0xFF	; 255
 97c:	9f 4f       	sbci	r25, 0xFF	; 255
 97e:	16 c0       	rjmp	.+44     	; 0x9ac <__floatsisf+0x6c>
 980:	88 23       	and	r24, r24
 982:	11 f0       	breq	.+4      	; 0x988 <__floatsisf+0x48>
 984:	96 e9       	ldi	r25, 0x96	; 150
 986:	11 c0       	rjmp	.+34     	; 0x9aa <__floatsisf+0x6a>
 988:	77 23       	and	r23, r23
 98a:	21 f0       	breq	.+8      	; 0x994 <__floatsisf+0x54>
 98c:	9e e8       	ldi	r25, 0x8E	; 142
 98e:	87 2f       	mov	r24, r23
 990:	76 2f       	mov	r23, r22
 992:	05 c0       	rjmp	.+10     	; 0x99e <__floatsisf+0x5e>
 994:	66 23       	and	r22, r22
 996:	71 f0       	breq	.+28     	; 0x9b4 <__floatsisf+0x74>
 998:	96 e8       	ldi	r25, 0x86	; 134
 99a:	86 2f       	mov	r24, r22
 99c:	70 e0       	ldi	r23, 0x00	; 0
 99e:	60 e0       	ldi	r22, 0x00	; 0
 9a0:	2a f0       	brmi	.+10     	; 0x9ac <__floatsisf+0x6c>
 9a2:	9a 95       	dec	r25
 9a4:	66 0f       	add	r22, r22
 9a6:	77 1f       	adc	r23, r23
 9a8:	88 1f       	adc	r24, r24
 9aa:	da f7       	brpl	.-10     	; 0x9a2 <__floatsisf+0x62>
 9ac:	88 0f       	add	r24, r24
 9ae:	96 95       	lsr	r25
 9b0:	87 95       	ror	r24
 9b2:	97 f9       	bld	r25, 7
 9b4:	08 95       	ret

000009b6 <__fp_cmp>:
 9b6:	99 0f       	add	r25, r25
 9b8:	00 08       	sbc	r0, r0
 9ba:	55 0f       	add	r21, r21
 9bc:	aa 0b       	sbc	r26, r26
 9be:	e0 e8       	ldi	r30, 0x80	; 128
 9c0:	fe ef       	ldi	r31, 0xFE	; 254
 9c2:	16 16       	cp	r1, r22
 9c4:	17 06       	cpc	r1, r23
 9c6:	e8 07       	cpc	r30, r24
 9c8:	f9 07       	cpc	r31, r25
 9ca:	c0 f0       	brcs	.+48     	; 0x9fc <__fp_cmp+0x46>
 9cc:	12 16       	cp	r1, r18
 9ce:	13 06       	cpc	r1, r19
 9d0:	e4 07       	cpc	r30, r20
 9d2:	f5 07       	cpc	r31, r21
 9d4:	98 f0       	brcs	.+38     	; 0x9fc <__fp_cmp+0x46>
 9d6:	62 1b       	sub	r22, r18
 9d8:	73 0b       	sbc	r23, r19
 9da:	84 0b       	sbc	r24, r20
 9dc:	95 0b       	sbc	r25, r21
 9de:	39 f4       	brne	.+14     	; 0x9ee <__fp_cmp+0x38>
 9e0:	0a 26       	eor	r0, r26
 9e2:	61 f0       	breq	.+24     	; 0x9fc <__fp_cmp+0x46>
 9e4:	23 2b       	or	r18, r19
 9e6:	24 2b       	or	r18, r20
 9e8:	25 2b       	or	r18, r21
 9ea:	21 f4       	brne	.+8      	; 0x9f4 <__fp_cmp+0x3e>
 9ec:	08 95       	ret
 9ee:	0a 26       	eor	r0, r26
 9f0:	09 f4       	brne	.+2      	; 0x9f4 <__fp_cmp+0x3e>
 9f2:	a1 40       	sbci	r26, 0x01	; 1
 9f4:	a6 95       	lsr	r26
 9f6:	8f ef       	ldi	r24, 0xFF	; 255
 9f8:	81 1d       	adc	r24, r1
 9fa:	81 1d       	adc	r24, r1
 9fc:	08 95       	ret

000009fe <__fp_inf>:
 9fe:	97 f9       	bld	r25, 7
 a00:	9f 67       	ori	r25, 0x7F	; 127
 a02:	80 e8       	ldi	r24, 0x80	; 128
 a04:	70 e0       	ldi	r23, 0x00	; 0
 a06:	60 e0       	ldi	r22, 0x00	; 0
 a08:	08 95       	ret

00000a0a <__fp_nan>:
 a0a:	9f ef       	ldi	r25, 0xFF	; 255
 a0c:	80 ec       	ldi	r24, 0xC0	; 192
 a0e:	08 95       	ret

00000a10 <__fp_pscA>:
 a10:	00 24       	eor	r0, r0
 a12:	0a 94       	dec	r0
 a14:	16 16       	cp	r1, r22
 a16:	17 06       	cpc	r1, r23
 a18:	18 06       	cpc	r1, r24
 a1a:	09 06       	cpc	r0, r25
 a1c:	08 95       	ret

00000a1e <__fp_pscB>:
 a1e:	00 24       	eor	r0, r0
 a20:	0a 94       	dec	r0
 a22:	12 16       	cp	r1, r18
 a24:	13 06       	cpc	r1, r19
 a26:	14 06       	cpc	r1, r20
 a28:	05 06       	cpc	r0, r21
 a2a:	08 95       	ret

00000a2c <__fp_round>:
 a2c:	09 2e       	mov	r0, r25
 a2e:	03 94       	inc	r0
 a30:	00 0c       	add	r0, r0
 a32:	11 f4       	brne	.+4      	; 0xa38 <__fp_round+0xc>
 a34:	88 23       	and	r24, r24
 a36:	52 f0       	brmi	.+20     	; 0xa4c <__fp_round+0x20>
 a38:	bb 0f       	add	r27, r27
 a3a:	40 f4       	brcc	.+16     	; 0xa4c <__fp_round+0x20>
 a3c:	bf 2b       	or	r27, r31
 a3e:	11 f4       	brne	.+4      	; 0xa44 <__fp_round+0x18>
 a40:	60 ff       	sbrs	r22, 0
 a42:	04 c0       	rjmp	.+8      	; 0xa4c <__fp_round+0x20>
 a44:	6f 5f       	subi	r22, 0xFF	; 255
 a46:	7f 4f       	sbci	r23, 0xFF	; 255
 a48:	8f 4f       	sbci	r24, 0xFF	; 255
 a4a:	9f 4f       	sbci	r25, 0xFF	; 255
 a4c:	08 95       	ret

00000a4e <__fp_split3>:
 a4e:	57 fd       	sbrc	r21, 7
 a50:	90 58       	subi	r25, 0x80	; 128
 a52:	44 0f       	add	r20, r20
 a54:	55 1f       	adc	r21, r21
 a56:	59 f0       	breq	.+22     	; 0xa6e <__fp_splitA+0x10>
 a58:	5f 3f       	cpi	r21, 0xFF	; 255
 a5a:	71 f0       	breq	.+28     	; 0xa78 <__fp_splitA+0x1a>
 a5c:	47 95       	ror	r20

00000a5e <__fp_splitA>:
 a5e:	88 0f       	add	r24, r24
 a60:	97 fb       	bst	r25, 7
 a62:	99 1f       	adc	r25, r25
 a64:	61 f0       	breq	.+24     	; 0xa7e <__fp_splitA+0x20>
 a66:	9f 3f       	cpi	r25, 0xFF	; 255
 a68:	79 f0       	breq	.+30     	; 0xa88 <__fp_splitA+0x2a>
 a6a:	87 95       	ror	r24
 a6c:	08 95       	ret
 a6e:	12 16       	cp	r1, r18
 a70:	13 06       	cpc	r1, r19
 a72:	14 06       	cpc	r1, r20
 a74:	55 1f       	adc	r21, r21
 a76:	f2 cf       	rjmp	.-28     	; 0xa5c <__fp_split3+0xe>
 a78:	46 95       	lsr	r20
 a7a:	f1 df       	rcall	.-30     	; 0xa5e <__fp_splitA>
 a7c:	08 c0       	rjmp	.+16     	; 0xa8e <__fp_splitA+0x30>
 a7e:	16 16       	cp	r1, r22
 a80:	17 06       	cpc	r1, r23
 a82:	18 06       	cpc	r1, r24
 a84:	99 1f       	adc	r25, r25
 a86:	f1 cf       	rjmp	.-30     	; 0xa6a <__fp_splitA+0xc>
 a88:	86 95       	lsr	r24
 a8a:	71 05       	cpc	r23, r1
 a8c:	61 05       	cpc	r22, r1
 a8e:	08 94       	sec
 a90:	08 95       	ret

00000a92 <__fp_zero>:
 a92:	e8 94       	clt

00000a94 <__fp_szero>:
 a94:	bb 27       	eor	r27, r27
 a96:	66 27       	eor	r22, r22
 a98:	77 27       	eor	r23, r23
 a9a:	cb 01       	movw	r24, r22
 a9c:	97 f9       	bld	r25, 7
 a9e:	08 95       	ret

00000aa0 <__gesf2>:
 aa0:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fp_cmp>
 aa4:	08 f4       	brcc	.+2      	; 0xaa8 <__gesf2+0x8>
 aa6:	8f ef       	ldi	r24, 0xFF	; 255
 aa8:	08 95       	ret

00000aaa <__divmodhi4>:
 aaa:	97 fb       	bst	r25, 7
 aac:	07 2e       	mov	r0, r23
 aae:	16 f4       	brtc	.+4      	; 0xab4 <__divmodhi4+0xa>
 ab0:	00 94       	com	r0
 ab2:	07 d0       	rcall	.+14     	; 0xac2 <__divmodhi4_neg1>
 ab4:	77 fd       	sbrc	r23, 7
 ab6:	09 d0       	rcall	.+18     	; 0xaca <__divmodhi4_neg2>
 ab8:	0e 94 8b 05 	call	0xb16	; 0xb16 <__udivmodhi4>
 abc:	07 fc       	sbrc	r0, 7
 abe:	05 d0       	rcall	.+10     	; 0xaca <__divmodhi4_neg2>
 ac0:	3e f4       	brtc	.+14     	; 0xad0 <__divmodhi4_exit>

00000ac2 <__divmodhi4_neg1>:
 ac2:	90 95       	com	r25
 ac4:	81 95       	neg	r24
 ac6:	9f 4f       	sbci	r25, 0xFF	; 255
 ac8:	08 95       	ret

00000aca <__divmodhi4_neg2>:
 aca:	70 95       	com	r23
 acc:	61 95       	neg	r22
 ace:	7f 4f       	sbci	r23, 0xFF	; 255

00000ad0 <__divmodhi4_exit>:
 ad0:	08 95       	ret

00000ad2 <__udivmodsi4>:
 ad2:	a1 e2       	ldi	r26, 0x21	; 33
 ad4:	1a 2e       	mov	r1, r26
 ad6:	aa 1b       	sub	r26, r26
 ad8:	bb 1b       	sub	r27, r27
 ada:	fd 01       	movw	r30, r26
 adc:	0d c0       	rjmp	.+26     	; 0xaf8 <__udivmodsi4_ep>

00000ade <__udivmodsi4_loop>:
 ade:	aa 1f       	adc	r26, r26
 ae0:	bb 1f       	adc	r27, r27
 ae2:	ee 1f       	adc	r30, r30
 ae4:	ff 1f       	adc	r31, r31
 ae6:	a2 17       	cp	r26, r18
 ae8:	b3 07       	cpc	r27, r19
 aea:	e4 07       	cpc	r30, r20
 aec:	f5 07       	cpc	r31, r21
 aee:	20 f0       	brcs	.+8      	; 0xaf8 <__udivmodsi4_ep>
 af0:	a2 1b       	sub	r26, r18
 af2:	b3 0b       	sbc	r27, r19
 af4:	e4 0b       	sbc	r30, r20
 af6:	f5 0b       	sbc	r31, r21

00000af8 <__udivmodsi4_ep>:
 af8:	66 1f       	adc	r22, r22
 afa:	77 1f       	adc	r23, r23
 afc:	88 1f       	adc	r24, r24
 afe:	99 1f       	adc	r25, r25
 b00:	1a 94       	dec	r1
 b02:	69 f7       	brne	.-38     	; 0xade <__udivmodsi4_loop>
 b04:	60 95       	com	r22
 b06:	70 95       	com	r23
 b08:	80 95       	com	r24
 b0a:	90 95       	com	r25
 b0c:	9b 01       	movw	r18, r22
 b0e:	ac 01       	movw	r20, r24
 b10:	bd 01       	movw	r22, r26
 b12:	cf 01       	movw	r24, r30
 b14:	08 95       	ret

00000b16 <__udivmodhi4>:
 b16:	aa 1b       	sub	r26, r26
 b18:	bb 1b       	sub	r27, r27
 b1a:	51 e1       	ldi	r21, 0x11	; 17
 b1c:	07 c0       	rjmp	.+14     	; 0xb2c <__udivmodhi4_ep>

00000b1e <__udivmodhi4_loop>:
 b1e:	aa 1f       	adc	r26, r26
 b20:	bb 1f       	adc	r27, r27
 b22:	a6 17       	cp	r26, r22
 b24:	b7 07       	cpc	r27, r23
 b26:	10 f0       	brcs	.+4      	; 0xb2c <__udivmodhi4_ep>
 b28:	a6 1b       	sub	r26, r22
 b2a:	b7 0b       	sbc	r27, r23

00000b2c <__udivmodhi4_ep>:
 b2c:	88 1f       	adc	r24, r24
 b2e:	99 1f       	adc	r25, r25
 b30:	5a 95       	dec	r21
 b32:	a9 f7       	brne	.-22     	; 0xb1e <__udivmodhi4_loop>
 b34:	80 95       	com	r24
 b36:	90 95       	com	r25
 b38:	bc 01       	movw	r22, r24
 b3a:	cd 01       	movw	r24, r26
 b3c:	08 95       	ret

00000b3e <atoi>:
 b3e:	fc 01       	movw	r30, r24
 b40:	88 27       	eor	r24, r24
 b42:	99 27       	eor	r25, r25
 b44:	e8 94       	clt
 b46:	21 91       	ld	r18, Z+
 b48:	20 32       	cpi	r18, 0x20	; 32
 b4a:	e9 f3       	breq	.-6      	; 0xb46 <atoi+0x8>
 b4c:	29 30       	cpi	r18, 0x09	; 9
 b4e:	10 f0       	brcs	.+4      	; 0xb54 <atoi+0x16>
 b50:	2e 30       	cpi	r18, 0x0E	; 14
 b52:	c8 f3       	brcs	.-14     	; 0xb46 <atoi+0x8>
 b54:	2b 32       	cpi	r18, 0x2B	; 43
 b56:	41 f0       	breq	.+16     	; 0xb68 <atoi+0x2a>
 b58:	2d 32       	cpi	r18, 0x2D	; 45
 b5a:	39 f4       	brne	.+14     	; 0xb6a <atoi+0x2c>
 b5c:	68 94       	set
 b5e:	04 c0       	rjmp	.+8      	; 0xb68 <atoi+0x2a>
 b60:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__mulhi_const_10>
 b64:	82 0f       	add	r24, r18
 b66:	91 1d       	adc	r25, r1
 b68:	21 91       	ld	r18, Z+
 b6a:	20 53       	subi	r18, 0x30	; 48
 b6c:	2a 30       	cpi	r18, 0x0A	; 10
 b6e:	c0 f3       	brcs	.-16     	; 0xb60 <atoi+0x22>
 b70:	1e f4       	brtc	.+6      	; 0xb78 <atoi+0x3a>
 b72:	90 95       	com	r25
 b74:	81 95       	neg	r24
 b76:	9f 4f       	sbci	r25, 0xFF	; 255
 b78:	08 95       	ret

00000b7a <__mulhi_const_10>:
 b7a:	7a e0       	ldi	r23, 0x0A	; 10
 b7c:	97 9f       	mul	r25, r23
 b7e:	90 2d       	mov	r25, r0
 b80:	87 9f       	mul	r24, r23
 b82:	80 2d       	mov	r24, r0
 b84:	91 0d       	add	r25, r1
 b86:	11 24       	eor	r1, r1
 b88:	08 95       	ret

00000b8a <_exit>:
 b8a:	f8 94       	cli

00000b8c <__stop_program>:
 b8c:	ff cf       	rjmp	.-2      	; 0xb8c <__stop_program>
