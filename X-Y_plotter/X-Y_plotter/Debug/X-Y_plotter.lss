
X-Y_plotter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cda  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000d4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000074  00800060  00800060  00000d4e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d4e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00000dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025ff  00000000  00000000  00000f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b78  00000000  00000000  0000358b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000153d  00000000  00000000  00004103  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000458  00000000  00000000  00005640  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066e  00000000  00000000  00005a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001618  00000000  00000000  00006106  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  0000771e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 3d       	cpi	r26, 0xD4	; 212
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ee 02 	call	0x5dc	; 0x5dc <main>
  74:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <second_value>:
//this function take one variable, and search in it about the location of ","
//then put the characters after "," in a new array of characters
//then convert string to integer value ,then return it

int second_value (char* String)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	c4 56       	subi	r28, 0x64	; 100
  86:	d1 09       	sbc	r29, r1
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	f8 94       	cli
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	0f be       	out	0x3f, r0	; 63
  90:	cd bf       	out	0x3d, r28	; 61
  92:	ac 01       	movw	r20, r24
  94:	fe 01       	movw	r30, r28
  96:	31 96       	adiw	r30, 0x01	; 1
  98:	9e 01       	movw	r18, r28
  9a:	2b 59       	subi	r18, 0x9B	; 155
  9c:	3f 4f       	sbci	r19, 0xFF	; 255
    int i = 0,j=0;
	char second_v[100];
	for (int i = 0 ; i < 100 ;i++)
	{
		second_v [i] = 0;
  9e:	11 92       	st	Z+, r1

int second_value (char* String)
{
    int i = 0,j=0;
	char second_v[100];
	for (int i = 0 ; i < 100 ;i++)
  a0:	e2 17       	cp	r30, r18
  a2:	f3 07       	cpc	r31, r19
  a4:	e1 f7       	brne	.-8      	; 0x9e <second_value+0x22>
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	20 e0       	ldi	r18, 0x00	; 0
  ac:	30 e0       	ldi	r19, 0x00	; 0
	{
		second_v [i] = 0;
	}
    while(1)
    {
        if (String [i] == ','){
  ae:	fa 01       	movw	r30, r20
  b0:	e2 0f       	add	r30, r18
  b2:	f3 1f       	adc	r31, r19
  b4:	90 81       	ld	r25, Z
  b6:	9c 32       	cpi	r25, 0x2C	; 44
  b8:	99 f4       	brne	.+38     	; 0xe0 <second_value+0x64>
				second_v [j] = String[j+i+1];
  ba:	f9 01       	movw	r30, r18
  bc:	e6 0f       	add	r30, r22
  be:	f7 1f       	adc	r31, r23
  c0:	e4 0f       	add	r30, r20
  c2:	f5 1f       	adc	r31, r21
  c4:	81 81       	ldd	r24, Z+1	; 0x01
  c6:	a1 e0       	ldi	r26, 0x01	; 1
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	ac 0f       	add	r26, r28
  cc:	bd 1f       	adc	r27, r29
  ce:	a6 0f       	add	r26, r22
  d0:	b7 1f       	adc	r27, r23
  d2:	8c 93       	st	X, r24
				if (String [j+i+2] == '-')
  d4:	82 81       	ldd	r24, Z+2	; 0x02
  d6:	8d 32       	cpi	r24, 0x2D	; 45
  d8:	31 f0       	breq	.+12     	; 0xe6 <second_value+0x6a>
				break;
				j++;
  da:	6f 5f       	subi	r22, 0xFF	; 255
  dc:	7f 4f       	sbci	r23, 0xFF	; 255
  de:	e7 cf       	rjmp	.-50     	; 0xae <second_value+0x32>
		}
		else
		i++;
  e0:	2f 5f       	subi	r18, 0xFF	; 255
  e2:	3f 4f       	sbci	r19, 0xFF	; 255
  e4:	e4 cf       	rjmp	.-56     	; 0xae <second_value+0x32>
    }
    return (atoi(second_v));
  e6:	ce 01       	movw	r24, r28
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	0e 94 45 06 	call	0xc8a	; 0xc8a <atoi>
}
  ee:	cc 59       	subi	r28, 0x9C	; 156
  f0:	df 4f       	sbci	r29, 0xFF	; 255
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	f8 94       	cli
  f6:	de bf       	out	0x3e, r29	; 62
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <sub_function>:
//call by reference is used to make a change in it, to save the new value
//this function return a value that the motor have to move
//this value could be negative or positive, it realize the direction of movements
int sub_function (int *current_pos, int new_pos)
{
    int x = new_pos - *current_pos;
 102:	fc 01       	movw	r30, r24
 104:	20 81       	ld	r18, Z
 106:	31 81       	ldd	r19, Z+1	; 0x01
    *current_pos = new_pos;
 108:	71 83       	std	Z+1, r23	; 0x01
 10a:	60 83       	st	Z, r22
    return x;
 10c:	cb 01       	movw	r24, r22
 10e:	82 1b       	sub	r24, r18
 110:	93 0b       	sbc	r25, r19
 112:	08 95       	ret

00000114 <pinChange>:
}

void Lcd4_Shift_Left()
{
	Lcd4_Cmd(0x01);
	Lcd4_Cmd(0x08);
 114:	67 2b       	or	r22, r23
 116:	09 f0       	breq	.+2      	; 0x11a <pinChange+0x6>
 118:	9f c0       	rjmp	.+318    	; 0x258 <pinChange+0x144>
 11a:	00 97       	sbiw	r24, 0x00	; 0
 11c:	11 f4       	brne	.+4      	; 0x122 <pinChange+0xe>
 11e:	d8 98       	cbi	0x1b, 0	; 27
 120:	08 95       	ret
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	91 05       	cpc	r25, r1
 126:	11 f4       	brne	.+4      	; 0x12c <pinChange+0x18>
 128:	d9 98       	cbi	0x1b, 1	; 27
 12a:	08 95       	ret
 12c:	82 30       	cpi	r24, 0x02	; 2
 12e:	91 05       	cpc	r25, r1
 130:	11 f4       	brne	.+4      	; 0x136 <pinChange+0x22>
 132:	da 98       	cbi	0x1b, 2	; 27
 134:	08 95       	ret
 136:	83 30       	cpi	r24, 0x03	; 3
 138:	91 05       	cpc	r25, r1
 13a:	11 f4       	brne	.+4      	; 0x140 <pinChange+0x2c>
 13c:	db 98       	cbi	0x1b, 3	; 27
 13e:	08 95       	ret
 140:	84 30       	cpi	r24, 0x04	; 4
 142:	91 05       	cpc	r25, r1
 144:	11 f4       	brne	.+4      	; 0x14a <pinChange+0x36>
 146:	dc 98       	cbi	0x1b, 4	; 27
 148:	08 95       	ret
 14a:	85 30       	cpi	r24, 0x05	; 5
 14c:	91 05       	cpc	r25, r1
 14e:	11 f4       	brne	.+4      	; 0x154 <pinChange+0x40>
 150:	dd 98       	cbi	0x1b, 5	; 27
 152:	08 95       	ret
 154:	86 30       	cpi	r24, 0x06	; 6
 156:	91 05       	cpc	r25, r1
 158:	11 f4       	brne	.+4      	; 0x15e <pinChange+0x4a>
 15a:	de 98       	cbi	0x1b, 6	; 27
 15c:	08 95       	ret
 15e:	87 30       	cpi	r24, 0x07	; 7
 160:	91 05       	cpc	r25, r1
 162:	11 f4       	brne	.+4      	; 0x168 <pinChange+0x54>
 164:	df 98       	cbi	0x1b, 7	; 27
 166:	08 95       	ret
 168:	8a 30       	cpi	r24, 0x0A	; 10
 16a:	91 05       	cpc	r25, r1
 16c:	11 f4       	brne	.+4      	; 0x172 <pinChange+0x5e>
 16e:	c0 98       	cbi	0x18, 0	; 24
 170:	08 95       	ret
 172:	8b 30       	cpi	r24, 0x0B	; 11
 174:	91 05       	cpc	r25, r1
 176:	11 f4       	brne	.+4      	; 0x17c <pinChange+0x68>
 178:	c1 98       	cbi	0x18, 1	; 24
 17a:	08 95       	ret
 17c:	8c 30       	cpi	r24, 0x0C	; 12
 17e:	91 05       	cpc	r25, r1
 180:	11 f4       	brne	.+4      	; 0x186 <pinChange+0x72>
 182:	c2 98       	cbi	0x18, 2	; 24
 184:	08 95       	ret
 186:	8d 30       	cpi	r24, 0x0D	; 13
 188:	91 05       	cpc	r25, r1
 18a:	11 f4       	brne	.+4      	; 0x190 <pinChange+0x7c>
 18c:	c3 98       	cbi	0x18, 3	; 24
 18e:	08 95       	ret
 190:	8e 30       	cpi	r24, 0x0E	; 14
 192:	91 05       	cpc	r25, r1
 194:	11 f4       	brne	.+4      	; 0x19a <pinChange+0x86>
 196:	c4 98       	cbi	0x18, 4	; 24
 198:	08 95       	ret
 19a:	8f 30       	cpi	r24, 0x0F	; 15
 19c:	91 05       	cpc	r25, r1
 19e:	11 f4       	brne	.+4      	; 0x1a4 <pinChange+0x90>
 1a0:	c5 98       	cbi	0x18, 5	; 24
 1a2:	08 95       	ret
 1a4:	80 31       	cpi	r24, 0x10	; 16
 1a6:	91 05       	cpc	r25, r1
 1a8:	11 f4       	brne	.+4      	; 0x1ae <pinChange+0x9a>
 1aa:	c6 98       	cbi	0x18, 6	; 24
 1ac:	08 95       	ret
 1ae:	81 31       	cpi	r24, 0x11	; 17
 1b0:	91 05       	cpc	r25, r1
 1b2:	11 f4       	brne	.+4      	; 0x1b8 <pinChange+0xa4>
 1b4:	c7 98       	cbi	0x18, 7	; 24
 1b6:	08 95       	ret
 1b8:	84 31       	cpi	r24, 0x14	; 20
 1ba:	91 05       	cpc	r25, r1
 1bc:	11 f4       	brne	.+4      	; 0x1c2 <pinChange+0xae>
 1be:	a8 98       	cbi	0x15, 0	; 21
 1c0:	08 95       	ret
 1c2:	85 31       	cpi	r24, 0x15	; 21
 1c4:	91 05       	cpc	r25, r1
 1c6:	11 f4       	brne	.+4      	; 0x1cc <pinChange+0xb8>
 1c8:	a9 98       	cbi	0x15, 1	; 21
 1ca:	08 95       	ret
 1cc:	86 31       	cpi	r24, 0x16	; 22
 1ce:	91 05       	cpc	r25, r1
 1d0:	11 f4       	brne	.+4      	; 0x1d6 <pinChange+0xc2>
 1d2:	aa 98       	cbi	0x15, 2	; 21
 1d4:	08 95       	ret
 1d6:	87 31       	cpi	r24, 0x17	; 23
 1d8:	91 05       	cpc	r25, r1
 1da:	11 f4       	brne	.+4      	; 0x1e0 <pinChange+0xcc>
 1dc:	ab 98       	cbi	0x15, 3	; 21
 1de:	08 95       	ret
 1e0:	88 31       	cpi	r24, 0x18	; 24
 1e2:	91 05       	cpc	r25, r1
 1e4:	11 f4       	brne	.+4      	; 0x1ea <pinChange+0xd6>
 1e6:	ac 98       	cbi	0x15, 4	; 21
 1e8:	08 95       	ret
 1ea:	89 31       	cpi	r24, 0x19	; 25
 1ec:	91 05       	cpc	r25, r1
 1ee:	11 f4       	brne	.+4      	; 0x1f4 <pinChange+0xe0>
 1f0:	ad 98       	cbi	0x15, 5	; 21
 1f2:	08 95       	ret
 1f4:	8a 31       	cpi	r24, 0x1A	; 26
 1f6:	91 05       	cpc	r25, r1
 1f8:	11 f4       	brne	.+4      	; 0x1fe <pinChange+0xea>
 1fa:	ae 98       	cbi	0x15, 6	; 21
 1fc:	08 95       	ret
 1fe:	8b 31       	cpi	r24, 0x1B	; 27
 200:	91 05       	cpc	r25, r1
 202:	11 f4       	brne	.+4      	; 0x208 <pinChange+0xf4>
 204:	af 98       	cbi	0x15, 7	; 21
 206:	08 95       	ret
 208:	8e 31       	cpi	r24, 0x1E	; 30
 20a:	91 05       	cpc	r25, r1
 20c:	11 f4       	brne	.+4      	; 0x212 <pinChange+0xfe>
 20e:	90 98       	cbi	0x12, 0	; 18
 210:	08 95       	ret
 212:	8f 31       	cpi	r24, 0x1F	; 31
 214:	91 05       	cpc	r25, r1
 216:	11 f4       	brne	.+4      	; 0x21c <pinChange+0x108>
 218:	91 98       	cbi	0x12, 1	; 18
 21a:	08 95       	ret
 21c:	80 32       	cpi	r24, 0x20	; 32
 21e:	91 05       	cpc	r25, r1
 220:	11 f4       	brne	.+4      	; 0x226 <pinChange+0x112>
 222:	92 98       	cbi	0x12, 2	; 18
 224:	08 95       	ret
 226:	81 32       	cpi	r24, 0x21	; 33
 228:	91 05       	cpc	r25, r1
 22a:	11 f4       	brne	.+4      	; 0x230 <pinChange+0x11c>
 22c:	93 98       	cbi	0x12, 3	; 18
 22e:	08 95       	ret
 230:	82 32       	cpi	r24, 0x22	; 34
 232:	91 05       	cpc	r25, r1
 234:	11 f4       	brne	.+4      	; 0x23a <pinChange+0x126>
 236:	94 98       	cbi	0x12, 4	; 18
 238:	08 95       	ret
 23a:	83 32       	cpi	r24, 0x23	; 35
 23c:	91 05       	cpc	r25, r1
 23e:	11 f4       	brne	.+4      	; 0x244 <pinChange+0x130>
 240:	95 98       	cbi	0x12, 5	; 18
 242:	08 95       	ret
 244:	84 32       	cpi	r24, 0x24	; 36
 246:	91 05       	cpc	r25, r1
 248:	11 f4       	brne	.+4      	; 0x24e <pinChange+0x13a>
 24a:	96 98       	cbi	0x12, 6	; 18
 24c:	08 95       	ret
 24e:	85 97       	sbiw	r24, 0x25	; 37
 250:	09 f0       	breq	.+2      	; 0x254 <pinChange+0x140>
 252:	9f c0       	rjmp	.+318    	; 0x392 <pinChange+0x27e>
 254:	97 98       	cbi	0x12, 7	; 18
 256:	08 95       	ret
 258:	00 97       	sbiw	r24, 0x00	; 0
 25a:	11 f4       	brne	.+4      	; 0x260 <pinChange+0x14c>
 25c:	d8 9a       	sbi	0x1b, 0	; 27
 25e:	08 95       	ret
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	91 05       	cpc	r25, r1
 264:	11 f4       	brne	.+4      	; 0x26a <pinChange+0x156>
 266:	d9 9a       	sbi	0x1b, 1	; 27
 268:	08 95       	ret
 26a:	82 30       	cpi	r24, 0x02	; 2
 26c:	91 05       	cpc	r25, r1
 26e:	11 f4       	brne	.+4      	; 0x274 <pinChange+0x160>
 270:	da 9a       	sbi	0x1b, 2	; 27
 272:	08 95       	ret
 274:	83 30       	cpi	r24, 0x03	; 3
 276:	91 05       	cpc	r25, r1
 278:	11 f4       	brne	.+4      	; 0x27e <pinChange+0x16a>
 27a:	db 9a       	sbi	0x1b, 3	; 27
 27c:	08 95       	ret
 27e:	84 30       	cpi	r24, 0x04	; 4
 280:	91 05       	cpc	r25, r1
 282:	11 f4       	brne	.+4      	; 0x288 <pinChange+0x174>
 284:	dc 9a       	sbi	0x1b, 4	; 27
 286:	08 95       	ret
 288:	85 30       	cpi	r24, 0x05	; 5
 28a:	91 05       	cpc	r25, r1
 28c:	11 f4       	brne	.+4      	; 0x292 <pinChange+0x17e>
 28e:	dd 9a       	sbi	0x1b, 5	; 27
 290:	08 95       	ret
 292:	86 30       	cpi	r24, 0x06	; 6
 294:	91 05       	cpc	r25, r1
 296:	11 f4       	brne	.+4      	; 0x29c <pinChange+0x188>
 298:	de 9a       	sbi	0x1b, 6	; 27
 29a:	08 95       	ret
 29c:	87 30       	cpi	r24, 0x07	; 7
 29e:	91 05       	cpc	r25, r1
 2a0:	11 f4       	brne	.+4      	; 0x2a6 <pinChange+0x192>
 2a2:	df 9a       	sbi	0x1b, 7	; 27
 2a4:	08 95       	ret
 2a6:	8a 30       	cpi	r24, 0x0A	; 10
 2a8:	91 05       	cpc	r25, r1
 2aa:	11 f4       	brne	.+4      	; 0x2b0 <pinChange+0x19c>
 2ac:	c0 9a       	sbi	0x18, 0	; 24
 2ae:	08 95       	ret
 2b0:	8b 30       	cpi	r24, 0x0B	; 11
 2b2:	91 05       	cpc	r25, r1
 2b4:	11 f4       	brne	.+4      	; 0x2ba <pinChange+0x1a6>
 2b6:	c1 9a       	sbi	0x18, 1	; 24
 2b8:	08 95       	ret
 2ba:	8c 30       	cpi	r24, 0x0C	; 12
 2bc:	91 05       	cpc	r25, r1
 2be:	11 f4       	brne	.+4      	; 0x2c4 <pinChange+0x1b0>
 2c0:	c2 9a       	sbi	0x18, 2	; 24
 2c2:	08 95       	ret
 2c4:	8d 30       	cpi	r24, 0x0D	; 13
 2c6:	91 05       	cpc	r25, r1
 2c8:	11 f4       	brne	.+4      	; 0x2ce <pinChange+0x1ba>
 2ca:	c3 9a       	sbi	0x18, 3	; 24
 2cc:	08 95       	ret
 2ce:	8e 30       	cpi	r24, 0x0E	; 14
 2d0:	91 05       	cpc	r25, r1
 2d2:	11 f4       	brne	.+4      	; 0x2d8 <pinChange+0x1c4>
 2d4:	c4 9a       	sbi	0x18, 4	; 24
 2d6:	08 95       	ret
 2d8:	8f 30       	cpi	r24, 0x0F	; 15
 2da:	91 05       	cpc	r25, r1
 2dc:	11 f4       	brne	.+4      	; 0x2e2 <pinChange+0x1ce>
 2de:	c5 9a       	sbi	0x18, 5	; 24
 2e0:	08 95       	ret
 2e2:	80 31       	cpi	r24, 0x10	; 16
 2e4:	91 05       	cpc	r25, r1
 2e6:	11 f4       	brne	.+4      	; 0x2ec <pinChange+0x1d8>
 2e8:	c6 9a       	sbi	0x18, 6	; 24
 2ea:	08 95       	ret
 2ec:	81 31       	cpi	r24, 0x11	; 17
 2ee:	91 05       	cpc	r25, r1
 2f0:	11 f4       	brne	.+4      	; 0x2f6 <pinChange+0x1e2>
 2f2:	c7 9a       	sbi	0x18, 7	; 24
 2f4:	08 95       	ret
 2f6:	84 31       	cpi	r24, 0x14	; 20
 2f8:	91 05       	cpc	r25, r1
 2fa:	11 f4       	brne	.+4      	; 0x300 <pinChange+0x1ec>
 2fc:	a8 9a       	sbi	0x15, 0	; 21
 2fe:	08 95       	ret
 300:	85 31       	cpi	r24, 0x15	; 21
 302:	91 05       	cpc	r25, r1
 304:	11 f4       	brne	.+4      	; 0x30a <pinChange+0x1f6>
 306:	a9 9a       	sbi	0x15, 1	; 21
 308:	08 95       	ret
 30a:	86 31       	cpi	r24, 0x16	; 22
 30c:	91 05       	cpc	r25, r1
 30e:	11 f4       	brne	.+4      	; 0x314 <pinChange+0x200>
 310:	aa 9a       	sbi	0x15, 2	; 21
 312:	08 95       	ret
 314:	87 31       	cpi	r24, 0x17	; 23
 316:	91 05       	cpc	r25, r1
 318:	11 f4       	brne	.+4      	; 0x31e <pinChange+0x20a>
 31a:	ab 9a       	sbi	0x15, 3	; 21
 31c:	08 95       	ret
 31e:	88 31       	cpi	r24, 0x18	; 24
 320:	91 05       	cpc	r25, r1
 322:	11 f4       	brne	.+4      	; 0x328 <pinChange+0x214>
 324:	ac 9a       	sbi	0x15, 4	; 21
 326:	08 95       	ret
 328:	89 31       	cpi	r24, 0x19	; 25
 32a:	91 05       	cpc	r25, r1
 32c:	11 f4       	brne	.+4      	; 0x332 <pinChange+0x21e>
 32e:	ad 9a       	sbi	0x15, 5	; 21
 330:	08 95       	ret
 332:	8a 31       	cpi	r24, 0x1A	; 26
 334:	91 05       	cpc	r25, r1
 336:	11 f4       	brne	.+4      	; 0x33c <pinChange+0x228>
 338:	ae 9a       	sbi	0x15, 6	; 21
 33a:	08 95       	ret
 33c:	8b 31       	cpi	r24, 0x1B	; 27
 33e:	91 05       	cpc	r25, r1
 340:	11 f4       	brne	.+4      	; 0x346 <pinChange+0x232>
 342:	af 9a       	sbi	0x15, 7	; 21
 344:	08 95       	ret
 346:	8e 31       	cpi	r24, 0x1E	; 30
 348:	91 05       	cpc	r25, r1
 34a:	11 f4       	brne	.+4      	; 0x350 <pinChange+0x23c>
 34c:	90 9a       	sbi	0x12, 0	; 18
 34e:	08 95       	ret
 350:	8f 31       	cpi	r24, 0x1F	; 31
 352:	91 05       	cpc	r25, r1
 354:	11 f4       	brne	.+4      	; 0x35a <pinChange+0x246>
 356:	91 9a       	sbi	0x12, 1	; 18
 358:	08 95       	ret
 35a:	80 32       	cpi	r24, 0x20	; 32
 35c:	91 05       	cpc	r25, r1
 35e:	11 f4       	brne	.+4      	; 0x364 <pinChange+0x250>
 360:	92 9a       	sbi	0x12, 2	; 18
 362:	08 95       	ret
 364:	81 32       	cpi	r24, 0x21	; 33
 366:	91 05       	cpc	r25, r1
 368:	11 f4       	brne	.+4      	; 0x36e <pinChange+0x25a>
 36a:	93 9a       	sbi	0x12, 3	; 18
 36c:	08 95       	ret
 36e:	82 32       	cpi	r24, 0x22	; 34
 370:	91 05       	cpc	r25, r1
 372:	11 f4       	brne	.+4      	; 0x378 <pinChange+0x264>
 374:	94 9a       	sbi	0x12, 4	; 18
 376:	08 95       	ret
 378:	83 32       	cpi	r24, 0x23	; 35
 37a:	91 05       	cpc	r25, r1
 37c:	11 f4       	brne	.+4      	; 0x382 <pinChange+0x26e>
 37e:	95 9a       	sbi	0x12, 5	; 18
 380:	08 95       	ret
 382:	84 32       	cpi	r24, 0x24	; 36
 384:	91 05       	cpc	r25, r1
 386:	11 f4       	brne	.+4      	; 0x38c <pinChange+0x278>
 388:	96 9a       	sbi	0x12, 6	; 18
 38a:	08 95       	ret
 38c:	85 97       	sbiw	r24, 0x25	; 37
 38e:	09 f4       	brne	.+2      	; 0x392 <pinChange+0x27e>
 390:	97 9a       	sbi	0x12, 7	; 18
 392:	08 95       	ret

00000394 <Lcd4_Port>:
 394:	cf 93       	push	r28
 396:	c8 2f       	mov	r28, r24
 398:	80 ff       	sbrs	r24, 0
 39a:	07 c0       	rjmp	.+14     	; 0x3aa <Lcd4_Port+0x16>
 39c:	61 e0       	ldi	r22, 0x01	; 1
 39e:	70 e0       	ldi	r23, 0x00	; 0
 3a0:	8a e0       	ldi	r24, 0x0A	; 10
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 8a 00 	call	0x114	; 0x114 <pinChange>
 3a8:	06 c0       	rjmp	.+12     	; 0x3b6 <Lcd4_Port+0x22>
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	70 e0       	ldi	r23, 0x00	; 0
 3ae:	8a e0       	ldi	r24, 0x0A	; 10
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 8a 00 	call	0x114	; 0x114 <pinChange>
 3b6:	c1 ff       	sbrs	r28, 1
 3b8:	07 c0       	rjmp	.+14     	; 0x3c8 <Lcd4_Port+0x34>
 3ba:	61 e0       	ldi	r22, 0x01	; 1
 3bc:	70 e0       	ldi	r23, 0x00	; 0
 3be:	8b e0       	ldi	r24, 0x0B	; 11
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 8a 00 	call	0x114	; 0x114 <pinChange>
 3c6:	06 c0       	rjmp	.+12     	; 0x3d4 <Lcd4_Port+0x40>
 3c8:	60 e0       	ldi	r22, 0x00	; 0
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	8b e0       	ldi	r24, 0x0B	; 11
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 8a 00 	call	0x114	; 0x114 <pinChange>
 3d4:	c2 ff       	sbrs	r28, 2
 3d6:	07 c0       	rjmp	.+14     	; 0x3e6 <Lcd4_Port+0x52>
 3d8:	61 e0       	ldi	r22, 0x01	; 1
 3da:	70 e0       	ldi	r23, 0x00	; 0
 3dc:	8c e0       	ldi	r24, 0x0C	; 12
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 8a 00 	call	0x114	; 0x114 <pinChange>
 3e4:	06 c0       	rjmp	.+12     	; 0x3f2 <Lcd4_Port+0x5e>
 3e6:	60 e0       	ldi	r22, 0x00	; 0
 3e8:	70 e0       	ldi	r23, 0x00	; 0
 3ea:	8c e0       	ldi	r24, 0x0C	; 12
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 8a 00 	call	0x114	; 0x114 <pinChange>
 3f2:	c3 ff       	sbrs	r28, 3
 3f4:	07 c0       	rjmp	.+14     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3f6:	61 e0       	ldi	r22, 0x01	; 1
 3f8:	70 e0       	ldi	r23, 0x00	; 0
 3fa:	8d e0       	ldi	r24, 0x0D	; 13
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0e 94 8a 00 	call	0x114	; 0x114 <pinChange>
 402:	06 c0       	rjmp	.+12     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 404:	60 e0       	ldi	r22, 0x00	; 0
 406:	70 e0       	ldi	r23, 0x00	; 0
 408:	8d e0       	ldi	r24, 0x0D	; 13
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	0e 94 8a 00 	call	0x114	; 0x114 <pinChange>
 410:	cf 91       	pop	r28
 412:	08 95       	ret

00000414 <Lcd4_Cmd>:
 414:	cf 93       	push	r28
 416:	c8 2f       	mov	r28, r24
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	70 e0       	ldi	r23, 0x00	; 0
 41c:	8e e0       	ldi	r24, 0x0E	; 14
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 8a 00 	call	0x114	; 0x114 <pinChange>
 424:	8c 2f       	mov	r24, r28
 426:	0e 94 ca 01 	call	0x394	; 0x394 <Lcd4_Port>
 42a:	61 e0       	ldi	r22, 0x01	; 1
 42c:	70 e0       	ldi	r23, 0x00	; 0
 42e:	8f e0       	ldi	r24, 0x0F	; 15
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 8a 00 	call	0x114	; 0x114 <pinChange>
 436:	8f e9       	ldi	r24, 0x9F	; 159
 438:	9f e0       	ldi	r25, 0x0F	; 15
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	f1 f7       	brne	.-4      	; 0x43a <Lcd4_Cmd+0x26>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <Lcd4_Cmd+0x2c>
 440:	00 00       	nop
 442:	60 e0       	ldi	r22, 0x00	; 0
 444:	70 e0       	ldi	r23, 0x00	; 0
 446:	8f e0       	ldi	r24, 0x0F	; 15
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 8a 00 	call	0x114	; 0x114 <pinChange>
 44e:	8f e9       	ldi	r24, 0x9F	; 159
 450:	9f e0       	ldi	r25, 0x0F	; 15
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <Lcd4_Cmd+0x3e>
 456:	00 c0       	rjmp	.+0      	; 0x458 <Lcd4_Cmd+0x44>
 458:	00 00       	nop
 45a:	cf 91       	pop	r28
 45c:	08 95       	ret

0000045e <Lcd4_Clear>:
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	0e 94 0a 02 	call	0x414	; 0x414 <Lcd4_Cmd>
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	0e 94 0a 02 	call	0x414	; 0x414 <Lcd4_Cmd>
 46a:	08 95       	ret

0000046c <Lcd4_Set_Cursor>:
 46c:	cf 93       	push	r28
 46e:	c6 2f       	mov	r28, r22
 470:	81 30       	cpi	r24, 0x01	; 1
 472:	59 f4       	brne	.+22     	; 0x48a <Lcd4_Set_Cursor+0x1e>
 474:	80 e8       	ldi	r24, 0x80	; 128
 476:	86 0f       	add	r24, r22
 478:	82 95       	swap	r24
 47a:	8f 70       	andi	r24, 0x0F	; 15
 47c:	0e 94 0a 02 	call	0x414	; 0x414 <Lcd4_Cmd>
 480:	8c 2f       	mov	r24, r28
 482:	8f 70       	andi	r24, 0x0F	; 15
 484:	0e 94 0a 02 	call	0x414	; 0x414 <Lcd4_Cmd>
 488:	0c c0       	rjmp	.+24     	; 0x4a2 <Lcd4_Set_Cursor+0x36>
 48a:	82 30       	cpi	r24, 0x02	; 2
 48c:	51 f4       	brne	.+20     	; 0x4a2 <Lcd4_Set_Cursor+0x36>
 48e:	80 ec       	ldi	r24, 0xC0	; 192
 490:	86 0f       	add	r24, r22
 492:	82 95       	swap	r24
 494:	8f 70       	andi	r24, 0x0F	; 15
 496:	0e 94 0a 02 	call	0x414	; 0x414 <Lcd4_Cmd>
 49a:	8c 2f       	mov	r24, r28
 49c:	8f 70       	andi	r24, 0x0F	; 15
 49e:	0e 94 0a 02 	call	0x414	; 0x414 <Lcd4_Cmd>
 4a2:	cf 91       	pop	r28
 4a4:	08 95       	ret

000004a6 <Lcd4_Init>:
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	0e 94 ca 01 	call	0x394	; 0x394 <Lcd4_Port>
 4ac:	2f ef       	ldi	r18, 0xFF	; 255
 4ae:	89 ef       	ldi	r24, 0xF9	; 249
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	21 50       	subi	r18, 0x01	; 1
 4b4:	80 40       	sbci	r24, 0x00	; 0
 4b6:	90 40       	sbci	r25, 0x00	; 0
 4b8:	e1 f7       	brne	.-8      	; 0x4b2 <Lcd4_Init+0xc>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <Lcd4_Init+0x16>
 4bc:	00 00       	nop
 4be:	83 e0       	ldi	r24, 0x03	; 3
 4c0:	0e 94 0a 02 	call	0x414	; 0x414 <Lcd4_Cmd>
 4c4:	8f e1       	ldi	r24, 0x1F	; 31
 4c6:	9e e4       	ldi	r25, 0x4E	; 78
 4c8:	01 97       	sbiw	r24, 0x01	; 1
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <Lcd4_Init+0x22>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <Lcd4_Init+0x28>
 4ce:	00 00       	nop
 4d0:	83 e0       	ldi	r24, 0x03	; 3
 4d2:	0e 94 0a 02 	call	0x414	; 0x414 <Lcd4_Cmd>
 4d6:	8f ed       	ldi	r24, 0xDF	; 223
 4d8:	9b ea       	ldi	r25, 0xAB	; 171
 4da:	01 97       	sbiw	r24, 0x01	; 1
 4dc:	f1 f7       	brne	.-4      	; 0x4da <Lcd4_Init+0x34>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <Lcd4_Init+0x3a>
 4e0:	00 00       	nop
 4e2:	83 e0       	ldi	r24, 0x03	; 3
 4e4:	0e 94 0a 02 	call	0x414	; 0x414 <Lcd4_Cmd>
 4e8:	82 e0       	ldi	r24, 0x02	; 2
 4ea:	0e 94 0a 02 	call	0x414	; 0x414 <Lcd4_Cmd>
 4ee:	82 e0       	ldi	r24, 0x02	; 2
 4f0:	0e 94 0a 02 	call	0x414	; 0x414 <Lcd4_Cmd>
 4f4:	88 e0       	ldi	r24, 0x08	; 8
 4f6:	0e 94 0a 02 	call	0x414	; 0x414 <Lcd4_Cmd>
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	0e 94 0a 02 	call	0x414	; 0x414 <Lcd4_Cmd>
 500:	8c e0       	ldi	r24, 0x0C	; 12
 502:	0e 94 0a 02 	call	0x414	; 0x414 <Lcd4_Cmd>
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	0e 94 0a 02 	call	0x414	; 0x414 <Lcd4_Cmd>
 50c:	86 e0       	ldi	r24, 0x06	; 6
 50e:	0e 94 0a 02 	call	0x414	; 0x414 <Lcd4_Cmd>
 512:	08 95       	ret

00000514 <Lcd4_Write_Char>:
 514:	cf 93       	push	r28
 516:	c8 2f       	mov	r28, r24
 518:	61 e0       	ldi	r22, 0x01	; 1
 51a:	70 e0       	ldi	r23, 0x00	; 0
 51c:	8e e0       	ldi	r24, 0x0E	; 14
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0e 94 8a 00 	call	0x114	; 0x114 <pinChange>
 524:	8c 2f       	mov	r24, r28
 526:	82 95       	swap	r24
 528:	8f 70       	andi	r24, 0x0F	; 15
 52a:	0e 94 ca 01 	call	0x394	; 0x394 <Lcd4_Port>
 52e:	61 e0       	ldi	r22, 0x01	; 1
 530:	70 e0       	ldi	r23, 0x00	; 0
 532:	8f e0       	ldi	r24, 0x0F	; 15
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	0e 94 8a 00 	call	0x114	; 0x114 <pinChange>
 53a:	8f e9       	ldi	r24, 0x9F	; 159
 53c:	9f e0       	ldi	r25, 0x0F	; 15
 53e:	01 97       	sbiw	r24, 0x01	; 1
 540:	f1 f7       	brne	.-4      	; 0x53e <Lcd4_Write_Char+0x2a>
 542:	00 c0       	rjmp	.+0      	; 0x544 <Lcd4_Write_Char+0x30>
 544:	00 00       	nop
 546:	60 e0       	ldi	r22, 0x00	; 0
 548:	70 e0       	ldi	r23, 0x00	; 0
 54a:	8f e0       	ldi	r24, 0x0F	; 15
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 8a 00 	call	0x114	; 0x114 <pinChange>
 552:	8f e9       	ldi	r24, 0x9F	; 159
 554:	9f e0       	ldi	r25, 0x0F	; 15
 556:	01 97       	sbiw	r24, 0x01	; 1
 558:	f1 f7       	brne	.-4      	; 0x556 <Lcd4_Write_Char+0x42>
 55a:	00 c0       	rjmp	.+0      	; 0x55c <Lcd4_Write_Char+0x48>
 55c:	00 00       	nop
 55e:	8c 2f       	mov	r24, r28
 560:	8f 70       	andi	r24, 0x0F	; 15
 562:	0e 94 ca 01 	call	0x394	; 0x394 <Lcd4_Port>
 566:	61 e0       	ldi	r22, 0x01	; 1
 568:	70 e0       	ldi	r23, 0x00	; 0
 56a:	8f e0       	ldi	r24, 0x0F	; 15
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	0e 94 8a 00 	call	0x114	; 0x114 <pinChange>
 572:	8f e9       	ldi	r24, 0x9F	; 159
 574:	9f e0       	ldi	r25, 0x0F	; 15
 576:	01 97       	sbiw	r24, 0x01	; 1
 578:	f1 f7       	brne	.-4      	; 0x576 <Lcd4_Write_Char+0x62>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <Lcd4_Write_Char+0x68>
 57c:	00 00       	nop
 57e:	60 e0       	ldi	r22, 0x00	; 0
 580:	70 e0       	ldi	r23, 0x00	; 0
 582:	8f e0       	ldi	r24, 0x0F	; 15
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	0e 94 8a 00 	call	0x114	; 0x114 <pinChange>
 58a:	8f e9       	ldi	r24, 0x9F	; 159
 58c:	9f e0       	ldi	r25, 0x0F	; 15
 58e:	01 97       	sbiw	r24, 0x01	; 1
 590:	f1 f7       	brne	.-4      	; 0x58e <Lcd4_Write_Char+0x7a>
 592:	00 c0       	rjmp	.+0      	; 0x594 <Lcd4_Write_Char+0x80>
 594:	00 00       	nop
 596:	cf 91       	pop	r28
 598:	08 95       	ret

0000059a <Lcd4_Write_String>:
 59a:	cf 93       	push	r28
 59c:	df 93       	push	r29
 59e:	ec 01       	movw	r28, r24
 5a0:	88 81       	ld	r24, Y
 5a2:	88 23       	and	r24, r24
 5a4:	31 f0       	breq	.+12     	; 0x5b2 <Lcd4_Write_String+0x18>
 5a6:	21 96       	adiw	r28, 0x01	; 1
 5a8:	0e 94 8a 02 	call	0x514	; 0x514 <Lcd4_Write_Char>
 5ac:	89 91       	ld	r24, Y+
 5ae:	81 11       	cpse	r24, r1
 5b0:	fb cf       	rjmp	.-10     	; 0x5a8 <Lcd4_Write_String+0xe>
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	08 95       	ret

000005b8 <Init>:
		y=0;
	}
}
void Init(void)
{
	StepperInit(16,1000);
 5b8:	68 ee       	ldi	r22, 0xE8	; 232
 5ba:	73 e0       	ldi	r23, 0x03	; 3
 5bc:	80 e1       	ldi	r24, 0x10	; 16
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	0e 94 31 05 	call	0xa62	; 0xa62 <StepperInit>
	DDRC |=0XFF;
 5c4:	84 b3       	in	r24, 0x14	; 20
 5c6:	8f ef       	ldi	r24, 0xFF	; 255
 5c8:	84 bb       	out	0x14, r24	; 20
	DDRA |= (1<<PA7);
 5ca:	d7 9a       	sbi	0x1a, 7	; 26
	DDRB |= (1<<PB0) | (1<<PB1) | (1<<PB2)| (1<<PB3)| (1<<PB4)| (1<<PB5) | (1<<PB6);
 5cc:	87 b3       	in	r24, 0x17	; 23
 5ce:	8f 67       	ori	r24, 0x7F	; 127
 5d0:	87 bb       	out	0x17, r24	; 23
	UART_INIT();
 5d2:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <UART_INIT>
	Lcd4_Init();
 5d6:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Lcd4_Init>
 5da:	08 95       	ret

000005dc <main>:

char String [100]  ;

int main(void)
{
	Init();
 5dc:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <Init>
 5e0:	c2 ed       	ldi	r28, 0xD2	; 210
 5e2:	d0 e0       	ldi	r29, 0x00	; 0
			y *=-1;
			statusy = 1;
		}
		else
		statusy = 0;
		Stepper_A_rev(statusx,(x*100));
 5e4:	14 e6       	ldi	r17, 0x64	; 100
 5e6:	ee e6       	ldi	r30, 0x6E	; 110
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
	Init();
	while (1)
	{
		for (int i = 0 ; i < 100 ;i++)
		{
			String [i] = 0;
 5ea:	11 92       	st	Z+, r1
int main(void)
{
	Init();
	while (1)
	{
		for (int i = 0 ; i < 100 ;i++)
 5ec:	ec 17       	cp	r30, r28
 5ee:	fd 07       	cpc	r31, r29
 5f0:	e1 f7       	brne	.-8      	; 0x5ea <main+0xe>
		{
			String [i] = 0;
		}
		Recive_Data(String);
 5f2:	8e e6       	ldi	r24, 0x6E	; 110
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0e 94 ff 05 	call	0xbfe	; 0xbfe <Recive_Data>
		value_1 = atoi(String);           //extract first value
 5fa:	8e e6       	ldi	r24, 0x6E	; 110
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	0e 94 45 06 	call	0xc8a	; 0xc8a <atoi>
 602:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <value_1+0x1>
 606:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <value_1>
		value_2 = second_value (String); //call function to extract second value
 60a:	8e e6       	ldi	r24, 0x6E	; 110
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	0e 94 3e 00 	call	0x7c	; 0x7c <second_value>
 612:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <value_2+0x1>
 616:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <value_2>
		Lcd4_Clear();
 61a:	0e 94 2f 02 	call	0x45e	; 0x45e <Lcd4_Clear>
		Lcd4_Set_Cursor(1,1);
 61e:	61 e0       	ldi	r22, 0x01	; 1
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	0e 94 36 02 	call	0x46c	; 0x46c <Lcd4_Set_Cursor>
		Lcd4_Write_String(String);
 626:	8e e6       	ldi	r24, 0x6E	; 110
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 94 cd 02 	call	0x59a	; 0x59a <Lcd4_Write_String>
		if (!(value_1>250||value_2>250||value_1<0||value_2<0)) // if the values don't skip the plate ,use it
 62e:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <value_1>
 632:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <value_1+0x1>
 636:	6b 3f       	cpi	r22, 0xFB	; 251
 638:	71 05       	cpc	r23, r1
 63a:	18 f5       	brcc	.+70     	; 0x682 <main+0xa6>
 63c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <value_2>
 640:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <value_2+0x1>
 644:	8b 3f       	cpi	r24, 0xFB	; 251
 646:	91 05       	cpc	r25, r1
 648:	e0 f4       	brcc	.+56     	; 0x682 <main+0xa6>
		{
			x = sub_function (&old_val_1, value_1);     //call function to extract first step
 64a:	82 e6       	ldi	r24, 0x62	; 98
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	0e 94 81 00 	call	0x102	; 0x102 <sub_function>
 652:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <x+0x1>
 656:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <x>
			y = sub_function (&old_val_2, value_2);    //call function to extract second stepp
 65a:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <value_2>
 65e:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <value_2+0x1>
 662:	80 e6       	ldi	r24, 0x60	; 96
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	0e 94 81 00 	call	0x102	; 0x102 <sub_function>
 66a:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <y+0x1>
 66e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <y>
  			value_1 = 0;
 672:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <value_1+0x1>
 676:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <value_1>
  			value_2 = 0;
 67a:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <value_2+0x1>
 67e:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <value_2>
		}
		if (x < 0 ){ // if the distance give a negative number make it positive and change the direction of motor rotation
 682:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <x>
 686:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <x+0x1>
 68a:	99 23       	and	r25, r25
 68c:	5c f4       	brge	.+22     	; 0x6a4 <main+0xc8>
			x *=-1;
 68e:	91 95       	neg	r25
 690:	81 95       	neg	r24
 692:	91 09       	sbc	r25, r1
 694:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <x+0x1>
 698:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <x>
			statusx = 1;
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <statusx>
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <main+0xcc>
		}
		else
		statusx = 0;
 6a4:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <statusx>
		if (y < 0 ){
 6a8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <y>
 6ac:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <y+0x1>
 6b0:	99 23       	and	r25, r25
 6b2:	5c f4       	brge	.+22     	; 0x6ca <main+0xee>
			y *=-1;
 6b4:	91 95       	neg	r25
 6b6:	81 95       	neg	r24
 6b8:	91 09       	sbc	r25, r1
 6ba:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <y+0x1>
 6be:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <y>
			statusy = 1;
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <statusy>
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <main+0xf2>
		}
		else
		statusy = 0;
 6ca:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <statusy>
		Stepper_A_rev(statusx,(x*100));
 6ce:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <x>
 6d2:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <x+0x1>
 6d6:	18 9f       	mul	r17, r24
 6d8:	a0 01       	movw	r20, r0
 6da:	19 9f       	mul	r17, r25
 6dc:	50 0d       	add	r21, r0
 6de:	11 24       	eor	r1, r1
 6e0:	05 2e       	mov	r0, r21
 6e2:	00 0c       	add	r0, r0
 6e4:	66 0b       	sbc	r22, r22
 6e6:	77 0b       	sbc	r23, r23
 6e8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <statusx>
 6ec:	0e 94 9d 05 	call	0xb3a	; 0xb3a <Stepper_A_rev>
		Stepper_B_rev(statusy,(y*100));
 6f0:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <y>
 6f4:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <y+0x1>
 6f8:	18 9f       	mul	r17, r24
 6fa:	a0 01       	movw	r20, r0
 6fc:	19 9f       	mul	r17, r25
 6fe:	50 0d       	add	r21, r0
 700:	11 24       	eor	r1, r1
 702:	05 2e       	mov	r0, r21
 704:	00 0c       	add	r0, r0
 706:	66 0b       	sbc	r22, r22
 708:	77 0b       	sbc	r23, r23
 70a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <statusy>
 70e:	0e 94 c8 05 	call	0xb90	; 0xb90 <Stepper_B_rev>
		x=0;
 712:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <x+0x1>
 716:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <x>
		y=0;
 71a:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <y+0x1>
 71e:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <y>
	}
 722:	61 cf       	rjmp	.-318    	; 0x5e6 <main+0xa>

00000724 <STpinChange>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 724:	67 2b       	or	r22, r23
 726:	09 f0       	breq	.+2      	; 0x72a <STpinChange+0x6>
 728:	9f c0       	rjmp	.+318    	; 0x868 <STpinChange+0x144>
 72a:	00 97       	sbiw	r24, 0x00	; 0
 72c:	11 f4       	brne	.+4      	; 0x732 <STpinChange+0xe>
 72e:	d8 98       	cbi	0x1b, 0	; 27
 730:	08 95       	ret
 732:	81 30       	cpi	r24, 0x01	; 1
 734:	91 05       	cpc	r25, r1
 736:	11 f4       	brne	.+4      	; 0x73c <STpinChange+0x18>
 738:	d9 98       	cbi	0x1b, 1	; 27
 73a:	08 95       	ret
 73c:	82 30       	cpi	r24, 0x02	; 2
 73e:	91 05       	cpc	r25, r1
 740:	11 f4       	brne	.+4      	; 0x746 <STpinChange+0x22>
 742:	da 98       	cbi	0x1b, 2	; 27
 744:	08 95       	ret
 746:	83 30       	cpi	r24, 0x03	; 3
 748:	91 05       	cpc	r25, r1
 74a:	11 f4       	brne	.+4      	; 0x750 <STpinChange+0x2c>
 74c:	db 98       	cbi	0x1b, 3	; 27
 74e:	08 95       	ret
 750:	84 30       	cpi	r24, 0x04	; 4
 752:	91 05       	cpc	r25, r1
 754:	11 f4       	brne	.+4      	; 0x75a <STpinChange+0x36>
 756:	dc 98       	cbi	0x1b, 4	; 27
 758:	08 95       	ret
 75a:	85 30       	cpi	r24, 0x05	; 5
 75c:	91 05       	cpc	r25, r1
 75e:	11 f4       	brne	.+4      	; 0x764 <STpinChange+0x40>
 760:	dd 98       	cbi	0x1b, 5	; 27
 762:	08 95       	ret
 764:	86 30       	cpi	r24, 0x06	; 6
 766:	91 05       	cpc	r25, r1
 768:	11 f4       	brne	.+4      	; 0x76e <STpinChange+0x4a>
 76a:	de 98       	cbi	0x1b, 6	; 27
 76c:	08 95       	ret
 76e:	87 30       	cpi	r24, 0x07	; 7
 770:	91 05       	cpc	r25, r1
 772:	11 f4       	brne	.+4      	; 0x778 <STpinChange+0x54>
 774:	df 98       	cbi	0x1b, 7	; 27
 776:	08 95       	ret
 778:	8a 30       	cpi	r24, 0x0A	; 10
 77a:	91 05       	cpc	r25, r1
 77c:	11 f4       	brne	.+4      	; 0x782 <STpinChange+0x5e>
 77e:	c0 98       	cbi	0x18, 0	; 24
 780:	08 95       	ret
 782:	8b 30       	cpi	r24, 0x0B	; 11
 784:	91 05       	cpc	r25, r1
 786:	11 f4       	brne	.+4      	; 0x78c <STpinChange+0x68>
 788:	c1 98       	cbi	0x18, 1	; 24
 78a:	08 95       	ret
 78c:	8c 30       	cpi	r24, 0x0C	; 12
 78e:	91 05       	cpc	r25, r1
 790:	11 f4       	brne	.+4      	; 0x796 <STpinChange+0x72>
 792:	c2 98       	cbi	0x18, 2	; 24
 794:	08 95       	ret
 796:	8d 30       	cpi	r24, 0x0D	; 13
 798:	91 05       	cpc	r25, r1
 79a:	11 f4       	brne	.+4      	; 0x7a0 <STpinChange+0x7c>
 79c:	c3 98       	cbi	0x18, 3	; 24
 79e:	08 95       	ret
 7a0:	8e 30       	cpi	r24, 0x0E	; 14
 7a2:	91 05       	cpc	r25, r1
 7a4:	11 f4       	brne	.+4      	; 0x7aa <STpinChange+0x86>
 7a6:	c4 98       	cbi	0x18, 4	; 24
 7a8:	08 95       	ret
 7aa:	8f 30       	cpi	r24, 0x0F	; 15
 7ac:	91 05       	cpc	r25, r1
 7ae:	11 f4       	brne	.+4      	; 0x7b4 <STpinChange+0x90>
 7b0:	c5 98       	cbi	0x18, 5	; 24
 7b2:	08 95       	ret
 7b4:	80 31       	cpi	r24, 0x10	; 16
 7b6:	91 05       	cpc	r25, r1
 7b8:	11 f4       	brne	.+4      	; 0x7be <STpinChange+0x9a>
 7ba:	c6 98       	cbi	0x18, 6	; 24
 7bc:	08 95       	ret
 7be:	81 31       	cpi	r24, 0x11	; 17
 7c0:	91 05       	cpc	r25, r1
 7c2:	11 f4       	brne	.+4      	; 0x7c8 <STpinChange+0xa4>
 7c4:	c7 98       	cbi	0x18, 7	; 24
 7c6:	08 95       	ret
 7c8:	84 31       	cpi	r24, 0x14	; 20
 7ca:	91 05       	cpc	r25, r1
 7cc:	11 f4       	brne	.+4      	; 0x7d2 <STpinChange+0xae>
 7ce:	a8 98       	cbi	0x15, 0	; 21
 7d0:	08 95       	ret
 7d2:	85 31       	cpi	r24, 0x15	; 21
 7d4:	91 05       	cpc	r25, r1
 7d6:	11 f4       	brne	.+4      	; 0x7dc <STpinChange+0xb8>
 7d8:	a9 98       	cbi	0x15, 1	; 21
 7da:	08 95       	ret
 7dc:	86 31       	cpi	r24, 0x16	; 22
 7de:	91 05       	cpc	r25, r1
 7e0:	11 f4       	brne	.+4      	; 0x7e6 <STpinChange+0xc2>
 7e2:	aa 98       	cbi	0x15, 2	; 21
 7e4:	08 95       	ret
 7e6:	87 31       	cpi	r24, 0x17	; 23
 7e8:	91 05       	cpc	r25, r1
 7ea:	11 f4       	brne	.+4      	; 0x7f0 <STpinChange+0xcc>
 7ec:	ab 98       	cbi	0x15, 3	; 21
 7ee:	08 95       	ret
 7f0:	88 31       	cpi	r24, 0x18	; 24
 7f2:	91 05       	cpc	r25, r1
 7f4:	11 f4       	brne	.+4      	; 0x7fa <STpinChange+0xd6>
 7f6:	ac 98       	cbi	0x15, 4	; 21
 7f8:	08 95       	ret
 7fa:	89 31       	cpi	r24, 0x19	; 25
 7fc:	91 05       	cpc	r25, r1
 7fe:	11 f4       	brne	.+4      	; 0x804 <STpinChange+0xe0>
 800:	ad 98       	cbi	0x15, 5	; 21
 802:	08 95       	ret
 804:	8a 31       	cpi	r24, 0x1A	; 26
 806:	91 05       	cpc	r25, r1
 808:	11 f4       	brne	.+4      	; 0x80e <STpinChange+0xea>
 80a:	ae 98       	cbi	0x15, 6	; 21
 80c:	08 95       	ret
 80e:	8b 31       	cpi	r24, 0x1B	; 27
 810:	91 05       	cpc	r25, r1
 812:	11 f4       	brne	.+4      	; 0x818 <STpinChange+0xf4>
 814:	af 98       	cbi	0x15, 7	; 21
 816:	08 95       	ret
 818:	8e 31       	cpi	r24, 0x1E	; 30
 81a:	91 05       	cpc	r25, r1
 81c:	11 f4       	brne	.+4      	; 0x822 <STpinChange+0xfe>
 81e:	90 98       	cbi	0x12, 0	; 18
 820:	08 95       	ret
 822:	8f 31       	cpi	r24, 0x1F	; 31
 824:	91 05       	cpc	r25, r1
 826:	11 f4       	brne	.+4      	; 0x82c <STpinChange+0x108>
 828:	91 98       	cbi	0x12, 1	; 18
 82a:	08 95       	ret
 82c:	80 32       	cpi	r24, 0x20	; 32
 82e:	91 05       	cpc	r25, r1
 830:	11 f4       	brne	.+4      	; 0x836 <STpinChange+0x112>
 832:	92 98       	cbi	0x12, 2	; 18
 834:	08 95       	ret
 836:	81 32       	cpi	r24, 0x21	; 33
 838:	91 05       	cpc	r25, r1
 83a:	11 f4       	brne	.+4      	; 0x840 <STpinChange+0x11c>
 83c:	93 98       	cbi	0x12, 3	; 18
 83e:	08 95       	ret
 840:	82 32       	cpi	r24, 0x22	; 34
 842:	91 05       	cpc	r25, r1
 844:	11 f4       	brne	.+4      	; 0x84a <STpinChange+0x126>
 846:	94 98       	cbi	0x12, 4	; 18
 848:	08 95       	ret
 84a:	83 32       	cpi	r24, 0x23	; 35
 84c:	91 05       	cpc	r25, r1
 84e:	11 f4       	brne	.+4      	; 0x854 <STpinChange+0x130>
 850:	95 98       	cbi	0x12, 5	; 18
 852:	08 95       	ret
 854:	84 32       	cpi	r24, 0x24	; 36
 856:	91 05       	cpc	r25, r1
 858:	11 f4       	brne	.+4      	; 0x85e <STpinChange+0x13a>
 85a:	96 98       	cbi	0x12, 6	; 18
 85c:	08 95       	ret
 85e:	85 97       	sbiw	r24, 0x25	; 37
 860:	09 f0       	breq	.+2      	; 0x864 <STpinChange+0x140>
 862:	9f c0       	rjmp	.+318    	; 0x9a2 <STpinChange+0x27e>
 864:	97 98       	cbi	0x12, 7	; 18
 866:	08 95       	ret
 868:	00 97       	sbiw	r24, 0x00	; 0
 86a:	11 f4       	brne	.+4      	; 0x870 <STpinChange+0x14c>
 86c:	d8 9a       	sbi	0x1b, 0	; 27
 86e:	08 95       	ret
 870:	81 30       	cpi	r24, 0x01	; 1
 872:	91 05       	cpc	r25, r1
 874:	11 f4       	brne	.+4      	; 0x87a <STpinChange+0x156>
 876:	d9 9a       	sbi	0x1b, 1	; 27
 878:	08 95       	ret
 87a:	82 30       	cpi	r24, 0x02	; 2
 87c:	91 05       	cpc	r25, r1
 87e:	11 f4       	brne	.+4      	; 0x884 <STpinChange+0x160>
 880:	da 9a       	sbi	0x1b, 2	; 27
 882:	08 95       	ret
 884:	83 30       	cpi	r24, 0x03	; 3
 886:	91 05       	cpc	r25, r1
 888:	11 f4       	brne	.+4      	; 0x88e <STpinChange+0x16a>
 88a:	db 9a       	sbi	0x1b, 3	; 27
 88c:	08 95       	ret
 88e:	84 30       	cpi	r24, 0x04	; 4
 890:	91 05       	cpc	r25, r1
 892:	11 f4       	brne	.+4      	; 0x898 <STpinChange+0x174>
 894:	dc 9a       	sbi	0x1b, 4	; 27
 896:	08 95       	ret
 898:	85 30       	cpi	r24, 0x05	; 5
 89a:	91 05       	cpc	r25, r1
 89c:	11 f4       	brne	.+4      	; 0x8a2 <STpinChange+0x17e>
 89e:	dd 9a       	sbi	0x1b, 5	; 27
 8a0:	08 95       	ret
 8a2:	86 30       	cpi	r24, 0x06	; 6
 8a4:	91 05       	cpc	r25, r1
 8a6:	11 f4       	brne	.+4      	; 0x8ac <STpinChange+0x188>
 8a8:	de 9a       	sbi	0x1b, 6	; 27
 8aa:	08 95       	ret
 8ac:	87 30       	cpi	r24, 0x07	; 7
 8ae:	91 05       	cpc	r25, r1
 8b0:	11 f4       	brne	.+4      	; 0x8b6 <STpinChange+0x192>
 8b2:	df 9a       	sbi	0x1b, 7	; 27
 8b4:	08 95       	ret
 8b6:	8a 30       	cpi	r24, 0x0A	; 10
 8b8:	91 05       	cpc	r25, r1
 8ba:	11 f4       	brne	.+4      	; 0x8c0 <STpinChange+0x19c>
 8bc:	c0 9a       	sbi	0x18, 0	; 24
 8be:	08 95       	ret
 8c0:	8b 30       	cpi	r24, 0x0B	; 11
 8c2:	91 05       	cpc	r25, r1
 8c4:	11 f4       	brne	.+4      	; 0x8ca <STpinChange+0x1a6>
 8c6:	c1 9a       	sbi	0x18, 1	; 24
 8c8:	08 95       	ret
 8ca:	8c 30       	cpi	r24, 0x0C	; 12
 8cc:	91 05       	cpc	r25, r1
 8ce:	11 f4       	brne	.+4      	; 0x8d4 <STpinChange+0x1b0>
 8d0:	c2 9a       	sbi	0x18, 2	; 24
 8d2:	08 95       	ret
 8d4:	8d 30       	cpi	r24, 0x0D	; 13
 8d6:	91 05       	cpc	r25, r1
 8d8:	11 f4       	brne	.+4      	; 0x8de <STpinChange+0x1ba>
 8da:	c3 9a       	sbi	0x18, 3	; 24
 8dc:	08 95       	ret
 8de:	8e 30       	cpi	r24, 0x0E	; 14
 8e0:	91 05       	cpc	r25, r1
 8e2:	11 f4       	brne	.+4      	; 0x8e8 <STpinChange+0x1c4>
 8e4:	c4 9a       	sbi	0x18, 4	; 24
 8e6:	08 95       	ret
 8e8:	8f 30       	cpi	r24, 0x0F	; 15
 8ea:	91 05       	cpc	r25, r1
 8ec:	11 f4       	brne	.+4      	; 0x8f2 <STpinChange+0x1ce>
 8ee:	c5 9a       	sbi	0x18, 5	; 24
 8f0:	08 95       	ret
 8f2:	80 31       	cpi	r24, 0x10	; 16
 8f4:	91 05       	cpc	r25, r1
 8f6:	11 f4       	brne	.+4      	; 0x8fc <STpinChange+0x1d8>
 8f8:	c6 9a       	sbi	0x18, 6	; 24
 8fa:	08 95       	ret
 8fc:	81 31       	cpi	r24, 0x11	; 17
 8fe:	91 05       	cpc	r25, r1
 900:	11 f4       	brne	.+4      	; 0x906 <STpinChange+0x1e2>
 902:	c7 9a       	sbi	0x18, 7	; 24
 904:	08 95       	ret
 906:	84 31       	cpi	r24, 0x14	; 20
 908:	91 05       	cpc	r25, r1
 90a:	11 f4       	brne	.+4      	; 0x910 <STpinChange+0x1ec>
 90c:	a8 9a       	sbi	0x15, 0	; 21
 90e:	08 95       	ret
 910:	85 31       	cpi	r24, 0x15	; 21
 912:	91 05       	cpc	r25, r1
 914:	11 f4       	brne	.+4      	; 0x91a <STpinChange+0x1f6>
 916:	a9 9a       	sbi	0x15, 1	; 21
 918:	08 95       	ret
 91a:	86 31       	cpi	r24, 0x16	; 22
 91c:	91 05       	cpc	r25, r1
 91e:	11 f4       	brne	.+4      	; 0x924 <STpinChange+0x200>
 920:	aa 9a       	sbi	0x15, 2	; 21
 922:	08 95       	ret
 924:	87 31       	cpi	r24, 0x17	; 23
 926:	91 05       	cpc	r25, r1
 928:	11 f4       	brne	.+4      	; 0x92e <STpinChange+0x20a>
 92a:	ab 9a       	sbi	0x15, 3	; 21
 92c:	08 95       	ret
 92e:	88 31       	cpi	r24, 0x18	; 24
 930:	91 05       	cpc	r25, r1
 932:	11 f4       	brne	.+4      	; 0x938 <STpinChange+0x214>
 934:	ac 9a       	sbi	0x15, 4	; 21
 936:	08 95       	ret
 938:	89 31       	cpi	r24, 0x19	; 25
 93a:	91 05       	cpc	r25, r1
 93c:	11 f4       	brne	.+4      	; 0x942 <STpinChange+0x21e>
 93e:	ad 9a       	sbi	0x15, 5	; 21
 940:	08 95       	ret
 942:	8a 31       	cpi	r24, 0x1A	; 26
 944:	91 05       	cpc	r25, r1
 946:	11 f4       	brne	.+4      	; 0x94c <STpinChange+0x228>
 948:	ae 9a       	sbi	0x15, 6	; 21
 94a:	08 95       	ret
 94c:	8b 31       	cpi	r24, 0x1B	; 27
 94e:	91 05       	cpc	r25, r1
 950:	11 f4       	brne	.+4      	; 0x956 <STpinChange+0x232>
 952:	af 9a       	sbi	0x15, 7	; 21
 954:	08 95       	ret
 956:	8e 31       	cpi	r24, 0x1E	; 30
 958:	91 05       	cpc	r25, r1
 95a:	11 f4       	brne	.+4      	; 0x960 <STpinChange+0x23c>
 95c:	90 9a       	sbi	0x12, 0	; 18
 95e:	08 95       	ret
 960:	8f 31       	cpi	r24, 0x1F	; 31
 962:	91 05       	cpc	r25, r1
 964:	11 f4       	brne	.+4      	; 0x96a <STpinChange+0x246>
 966:	91 9a       	sbi	0x12, 1	; 18
 968:	08 95       	ret
 96a:	80 32       	cpi	r24, 0x20	; 32
 96c:	91 05       	cpc	r25, r1
 96e:	11 f4       	brne	.+4      	; 0x974 <STpinChange+0x250>
 970:	92 9a       	sbi	0x12, 2	; 18
 972:	08 95       	ret
 974:	81 32       	cpi	r24, 0x21	; 33
 976:	91 05       	cpc	r25, r1
 978:	11 f4       	brne	.+4      	; 0x97e <STpinChange+0x25a>
 97a:	93 9a       	sbi	0x12, 3	; 18
 97c:	08 95       	ret
 97e:	82 32       	cpi	r24, 0x22	; 34
 980:	91 05       	cpc	r25, r1
 982:	11 f4       	brne	.+4      	; 0x988 <STpinChange+0x264>
 984:	94 9a       	sbi	0x12, 4	; 18
 986:	08 95       	ret
 988:	83 32       	cpi	r24, 0x23	; 35
 98a:	91 05       	cpc	r25, r1
 98c:	11 f4       	brne	.+4      	; 0x992 <STpinChange+0x26e>
 98e:	95 9a       	sbi	0x12, 5	; 18
 990:	08 95       	ret
 992:	84 32       	cpi	r24, 0x24	; 36
 994:	91 05       	cpc	r25, r1
 996:	11 f4       	brne	.+4      	; 0x99c <STpinChange+0x278>
 998:	96 9a       	sbi	0x12, 6	; 18
 99a:	08 95       	ret
 99c:	85 97       	sbiw	r24, 0x25	; 37
 99e:	09 f4       	brne	.+2      	; 0x9a2 <STpinChange+0x27e>
 9a0:	97 9a       	sbi	0x12, 7	; 18
 9a2:	08 95       	ret

000009a4 <steper_1step>:
 9a4:	60 e0       	ldi	r22, 0x00	; 0
 9a6:	70 e0       	ldi	r23, 0x00	; 0
 9a8:	84 e1       	ldi	r24, 0x14	; 20
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	0e 94 92 03 	call	0x724	; 0x724 <STpinChange>
 9b0:	60 e0       	ldi	r22, 0x00	; 0
 9b2:	70 e0       	ldi	r23, 0x00	; 0
 9b4:	85 e1       	ldi	r24, 0x15	; 21
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	0e 94 92 03 	call	0x724	; 0x724 <STpinChange>
 9bc:	60 e0       	ldi	r22, 0x00	; 0
 9be:	70 e0       	ldi	r23, 0x00	; 0
 9c0:	86 e1       	ldi	r24, 0x16	; 22
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	0e 94 92 03 	call	0x724	; 0x724 <STpinChange>
 9c8:	08 95       	ret

000009ca <steper_Hstep>:
 9ca:	61 e0       	ldi	r22, 0x01	; 1
 9cc:	70 e0       	ldi	r23, 0x00	; 0
 9ce:	84 e1       	ldi	r24, 0x14	; 20
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	0e 94 92 03 	call	0x724	; 0x724 <STpinChange>
 9d6:	60 e0       	ldi	r22, 0x00	; 0
 9d8:	70 e0       	ldi	r23, 0x00	; 0
 9da:	85 e1       	ldi	r24, 0x15	; 21
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	0e 94 92 03 	call	0x724	; 0x724 <STpinChange>
 9e2:	60 e0       	ldi	r22, 0x00	; 0
 9e4:	70 e0       	ldi	r23, 0x00	; 0
 9e6:	86 e1       	ldi	r24, 0x16	; 22
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	0e 94 92 03 	call	0x724	; 0x724 <STpinChange>
 9ee:	08 95       	ret

000009f0 <steper_Qstep>:
 9f0:	60 e0       	ldi	r22, 0x00	; 0
 9f2:	70 e0       	ldi	r23, 0x00	; 0
 9f4:	84 e1       	ldi	r24, 0x14	; 20
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	0e 94 92 03 	call	0x724	; 0x724 <STpinChange>
 9fc:	61 e0       	ldi	r22, 0x01	; 1
 9fe:	70 e0       	ldi	r23, 0x00	; 0
 a00:	85 e1       	ldi	r24, 0x15	; 21
 a02:	90 e0       	ldi	r25, 0x00	; 0
 a04:	0e 94 92 03 	call	0x724	; 0x724 <STpinChange>
 a08:	60 e0       	ldi	r22, 0x00	; 0
 a0a:	70 e0       	ldi	r23, 0x00	; 0
 a0c:	86 e1       	ldi	r24, 0x16	; 22
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	0e 94 92 03 	call	0x724	; 0x724 <STpinChange>
 a14:	08 95       	ret

00000a16 <steper_Estep>:
 a16:	61 e0       	ldi	r22, 0x01	; 1
 a18:	70 e0       	ldi	r23, 0x00	; 0
 a1a:	84 e1       	ldi	r24, 0x14	; 20
 a1c:	90 e0       	ldi	r25, 0x00	; 0
 a1e:	0e 94 92 03 	call	0x724	; 0x724 <STpinChange>
 a22:	61 e0       	ldi	r22, 0x01	; 1
 a24:	70 e0       	ldi	r23, 0x00	; 0
 a26:	85 e1       	ldi	r24, 0x15	; 21
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	0e 94 92 03 	call	0x724	; 0x724 <STpinChange>
 a2e:	60 e0       	ldi	r22, 0x00	; 0
 a30:	70 e0       	ldi	r23, 0x00	; 0
 a32:	86 e1       	ldi	r24, 0x16	; 22
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	0e 94 92 03 	call	0x724	; 0x724 <STpinChange>
 a3a:	08 95       	ret

00000a3c <steper_Sstep>:
 a3c:	61 e0       	ldi	r22, 0x01	; 1
 a3e:	70 e0       	ldi	r23, 0x00	; 0
 a40:	84 e1       	ldi	r24, 0x14	; 20
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	0e 94 92 03 	call	0x724	; 0x724 <STpinChange>
 a48:	61 e0       	ldi	r22, 0x01	; 1
 a4a:	70 e0       	ldi	r23, 0x00	; 0
 a4c:	85 e1       	ldi	r24, 0x15	; 21
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	0e 94 92 03 	call	0x724	; 0x724 <STpinChange>
 a54:	61 e0       	ldi	r22, 0x01	; 1
 a56:	70 e0       	ldi	r23, 0x00	; 0
 a58:	86 e1       	ldi	r24, 0x16	; 22
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	0e 94 92 03 	call	0x724	; 0x724 <STpinChange>
 a60:	08 95       	ret

00000a62 <StepperInit>:
 a62:	cf 93       	push	r28
 a64:	df 93       	push	r29
 a66:	eb 01       	movw	r28, r22
 a68:	86 30       	cpi	r24, 0x06	; 6
 a6a:	91 05       	cpc	r25, r1
 a6c:	99 f0       	breq	.+38     	; 0xa94 <StepperInit+0x32>
 a6e:	34 f4       	brge	.+12     	; 0xa7c <StepperInit+0x1a>
 a70:	81 30       	cpi	r24, 0x01	; 1
 a72:	91 05       	cpc	r25, r1
 a74:	49 f0       	breq	.+18     	; 0xa88 <StepperInit+0x26>
 a76:	02 97       	sbiw	r24, 0x02	; 2
 a78:	51 f0       	breq	.+20     	; 0xa8e <StepperInit+0x2c>
 a7a:	14 c0       	rjmp	.+40     	; 0xaa4 <StepperInit+0x42>
 a7c:	88 30       	cpi	r24, 0x08	; 8
 a7e:	91 05       	cpc	r25, r1
 a80:	61 f0       	breq	.+24     	; 0xa9a <StepperInit+0x38>
 a82:	40 97       	sbiw	r24, 0x10	; 16
 a84:	69 f0       	breq	.+26     	; 0xaa0 <StepperInit+0x3e>
 a86:	0e c0       	rjmp	.+28     	; 0xaa4 <StepperInit+0x42>
 a88:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <steper_1step>
 a8c:	0b c0       	rjmp	.+22     	; 0xaa4 <StepperInit+0x42>
 a8e:	0e 94 e5 04 	call	0x9ca	; 0x9ca <steper_Hstep>
 a92:	08 c0       	rjmp	.+16     	; 0xaa4 <StepperInit+0x42>
 a94:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <steper_Qstep>
 a98:	05 c0       	rjmp	.+10     	; 0xaa4 <StepperInit+0x42>
 a9a:	0e 94 0b 05 	call	0xa16	; 0xa16 <steper_Estep>
 a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <StepperInit+0x42>
 aa0:	0e 94 1e 05 	call	0xa3c	; 0xa3c <steper_Sstep>
 aa4:	d0 93 d3 00 	sts	0x00D3, r29	; 0x8000d3 <speed+0x1>
 aa8:	c0 93 d2 00 	sts	0x00D2, r28	; 0x8000d2 <speed>
 aac:	df 91       	pop	r29
 aae:	cf 91       	pop	r28
 ab0:	08 95       	ret

00000ab2 <setspeed>:
 ab2:	bc 01       	movw	r22, r24
 ab4:	88 ee       	ldi	r24, 0xE8	; 232
 ab6:	93 e0       	ldi	r25, 0x03	; 3
 ab8:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__divmodhi4>
 abc:	16 16       	cp	r1, r22
 abe:	17 06       	cpc	r1, r23
 ac0:	4c f4       	brge	.+18     	; 0xad4 <setspeed+0x22>
 ac2:	8f ec       	ldi	r24, 0xCF	; 207
 ac4:	97 e0       	ldi	r25, 0x07	; 7
 ac6:	01 97       	sbiw	r24, 0x01	; 1
 ac8:	f1 f7       	brne	.-4      	; 0xac6 <setspeed+0x14>
 aca:	00 c0       	rjmp	.+0      	; 0xacc <setspeed+0x1a>
 acc:	00 00       	nop
 ace:	61 50       	subi	r22, 0x01	; 1
 ad0:	71 09       	sbc	r23, r1
 ad2:	b9 f7       	brne	.-18     	; 0xac2 <setspeed+0x10>
 ad4:	08 95       	ret

00000ad6 <Stepper_A_onerev>:
 ad6:	61 e0       	ldi	r22, 0x01	; 1
 ad8:	70 e0       	ldi	r23, 0x00	; 0
 ada:	87 e1       	ldi	r24, 0x17	; 23
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	0e 94 92 03 	call	0x724	; 0x724 <STpinChange>
 ae2:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <speed>
 ae6:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <speed+0x1>
 aea:	0e 94 59 05 	call	0xab2	; 0xab2 <setspeed>
 aee:	60 e0       	ldi	r22, 0x00	; 0
 af0:	70 e0       	ldi	r23, 0x00	; 0
 af2:	87 e1       	ldi	r24, 0x17	; 23
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	0e 94 92 03 	call	0x724	; 0x724 <STpinChange>
 afa:	87 ec       	ldi	r24, 0xC7	; 199
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	01 97       	sbiw	r24, 0x01	; 1
 b00:	f1 f7       	brne	.-4      	; 0xafe <Stepper_A_onerev+0x28>
 b02:	00 c0       	rjmp	.+0      	; 0xb04 <Stepper_A_onerev+0x2e>
 b04:	00 00       	nop
 b06:	08 95       	ret

00000b08 <Stepper_B_onerev>:
 b08:	61 e0       	ldi	r22, 0x01	; 1
 b0a:	70 e0       	ldi	r23, 0x00	; 0
 b0c:	89 e1       	ldi	r24, 0x19	; 25
 b0e:	90 e0       	ldi	r25, 0x00	; 0
 b10:	0e 94 92 03 	call	0x724	; 0x724 <STpinChange>
 b14:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <speed>
 b18:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <speed+0x1>
 b1c:	0e 94 59 05 	call	0xab2	; 0xab2 <setspeed>
 b20:	60 e0       	ldi	r22, 0x00	; 0
 b22:	70 e0       	ldi	r23, 0x00	; 0
 b24:	89 e1       	ldi	r24, 0x19	; 25
 b26:	90 e0       	ldi	r25, 0x00	; 0
 b28:	0e 94 92 03 	call	0x724	; 0x724 <STpinChange>
 b2c:	87 ec       	ldi	r24, 0xC7	; 199
 b2e:	90 e0       	ldi	r25, 0x00	; 0
 b30:	01 97       	sbiw	r24, 0x01	; 1
 b32:	f1 f7       	brne	.-4      	; 0xb30 <Stepper_B_onerev+0x28>
 b34:	00 c0       	rjmp	.+0      	; 0xb36 <Stepper_B_onerev+0x2e>
 b36:	00 00       	nop
 b38:	08 95       	ret

00000b3a <Stepper_A_rev>:
	STpinChange(StepD,1);
	setspeed(speed);
	STpinChange(StepD,0);
	_delay_us (50);
}
void Stepper_A_rev(bool clockw,long NuOfSteps){//rotate clockwise or ccw , number of steps for stepperA
 b3a:	cf 92       	push	r12
 b3c:	df 92       	push	r13
 b3e:	ef 92       	push	r14
 b40:	ff 92       	push	r15
 b42:	cf 93       	push	r28
 b44:	c8 2f       	mov	r28, r24
 b46:	6a 01       	movw	r12, r20
 b48:	7b 01       	movw	r14, r22
	if (clockw)
 b4a:	88 23       	and	r24, r24
 b4c:	39 f0       	breq	.+14     	; 0xb5c <Stepper_A_rev+0x22>
	{
		STpinChange(DIRA,1);
 b4e:	61 e0       	ldi	r22, 0x01	; 1
 b50:	70 e0       	ldi	r23, 0x00	; 0
 b52:	88 e1       	ldi	r24, 0x18	; 24
 b54:	90 e0       	ldi	r25, 0x00	; 0
 b56:	0e 94 92 03 	call	0x724	; 0x724 <STpinChange>
 b5a:	06 c0       	rjmp	.+12     	; 0xb68 <Stepper_A_rev+0x2e>
	}
	else
	{
		STpinChange(DIRA,0);
 b5c:	60 e0       	ldi	r22, 0x00	; 0
 b5e:	70 e0       	ldi	r23, 0x00	; 0
 b60:	88 e1       	ldi	r24, 0x18	; 24
 b62:	90 e0       	ldi	r25, 0x00	; 0
 b64:	0e 94 92 03 	call	0x724	; 0x724 <STpinChange>
	}
	
	while (NuOfSteps > 0)
 b68:	1c 14       	cp	r1, r12
 b6a:	1d 04       	cpc	r1, r13
 b6c:	1e 04       	cpc	r1, r14
 b6e:	1f 04       	cpc	r1, r15
 b70:	4c f4       	brge	.+18     	; 0xb84 <Stepper_A_rev+0x4a>
	{
		Stepper_A_onerev(clockw);
 b72:	8c 2f       	mov	r24, r28
 b74:	0e 94 6b 05 	call	0xad6	; 0xad6 <Stepper_A_onerev>
		NuOfSteps -= 1;
 b78:	81 e0       	ldi	r24, 0x01	; 1
 b7a:	c8 1a       	sub	r12, r24
 b7c:	d1 08       	sbc	r13, r1
 b7e:	e1 08       	sbc	r14, r1
 b80:	f1 08       	sbc	r15, r1
	else
	{
		STpinChange(DIRA,0);
	}
	
	while (NuOfSteps > 0)
 b82:	b9 f7       	brne	.-18     	; 0xb72 <Stepper_A_rev+0x38>
	{
		Stepper_A_onerev(clockw);
		NuOfSteps -= 1;
	}
}
 b84:	cf 91       	pop	r28
 b86:	ff 90       	pop	r15
 b88:	ef 90       	pop	r14
 b8a:	df 90       	pop	r13
 b8c:	cf 90       	pop	r12
 b8e:	08 95       	ret

00000b90 <Stepper_B_rev>:
void Stepper_B_rev(bool clockw,long NuOfSteps){//rotate clockwise or ccw , number of steps for stepperB
 b90:	cf 92       	push	r12
 b92:	df 92       	push	r13
 b94:	ef 92       	push	r14
 b96:	ff 92       	push	r15
 b98:	cf 93       	push	r28
 b9a:	c8 2f       	mov	r28, r24
 b9c:	6a 01       	movw	r12, r20
 b9e:	7b 01       	movw	r14, r22
	if (clockw)
 ba0:	88 23       	and	r24, r24
 ba2:	39 f0       	breq	.+14     	; 0xbb2 <Stepper_B_rev+0x22>
	{
		STpinChange(DIRB,1);
 ba4:	61 e0       	ldi	r22, 0x01	; 1
 ba6:	70 e0       	ldi	r23, 0x00	; 0
 ba8:	8a e1       	ldi	r24, 0x1A	; 26
 baa:	90 e0       	ldi	r25, 0x00	; 0
 bac:	0e 94 92 03 	call	0x724	; 0x724 <STpinChange>
 bb0:	06 c0       	rjmp	.+12     	; 0xbbe <Stepper_B_rev+0x2e>
	}
	else
	{
		STpinChange(DIRB,0);
 bb2:	60 e0       	ldi	r22, 0x00	; 0
 bb4:	70 e0       	ldi	r23, 0x00	; 0
 bb6:	8a e1       	ldi	r24, 0x1A	; 26
 bb8:	90 e0       	ldi	r25, 0x00	; 0
 bba:	0e 94 92 03 	call	0x724	; 0x724 <STpinChange>
	}
	
	while (NuOfSteps > 0)
 bbe:	1c 14       	cp	r1, r12
 bc0:	1d 04       	cpc	r1, r13
 bc2:	1e 04       	cpc	r1, r14
 bc4:	1f 04       	cpc	r1, r15
 bc6:	4c f4       	brge	.+18     	; 0xbda <Stepper_B_rev+0x4a>
	{
		Stepper_B_onerev(clockw);
 bc8:	8c 2f       	mov	r24, r28
 bca:	0e 94 84 05 	call	0xb08	; 0xb08 <Stepper_B_onerev>
		NuOfSteps -= 1;
 bce:	81 e0       	ldi	r24, 0x01	; 1
 bd0:	c8 1a       	sub	r12, r24
 bd2:	d1 08       	sbc	r13, r1
 bd4:	e1 08       	sbc	r14, r1
 bd6:	f1 08       	sbc	r15, r1
	else
	{
		STpinChange(DIRB,0);
	}
	
	while (NuOfSteps > 0)
 bd8:	b9 f7       	brne	.-18     	; 0xbc8 <Stepper_B_rev+0x38>
	{
		Stepper_B_onerev(clockw);
		NuOfSteps -= 1;
	}
}
 bda:	cf 91       	pop	r28
 bdc:	ff 90       	pop	r15
 bde:	ef 90       	pop	r14
 be0:	df 90       	pop	r13
 be2:	cf 90       	pop	r12
 be4:	08 95       	ret

00000be6 <UART_INIT>:
	for (int k=0;k<7;k++)
	{
		Transmit_Char(ptr_string[k]);  //Send 6 characters.
		_delay_ms(100);
	}
}
 be6:	87 e6       	ldi	r24, 0x67	; 103
 be8:	89 b9       	out	0x09, r24	; 9
 bea:	10 bc       	out	0x20, r1	; 32
 bec:	88 e1       	ldi	r24, 0x18	; 24
 bee:	8a b9       	out	0x0a, r24	; 10
 bf0:	86 e8       	ldi	r24, 0x86	; 134
 bf2:	80 bd       	out	0x20, r24	; 32
 bf4:	08 95       	ret

00000bf6 <Recive_Char>:
 bf6:	5f 9b       	sbis	0x0b, 7	; 11
 bf8:	fe cf       	rjmp	.-4      	; 0xbf6 <Recive_Char>
 bfa:	8c b1       	in	r24, 0x0c	; 12
 bfc:	08 95       	ret

00000bfe <Recive_Data>:
void Recive_Data(char *ptr_string)
{   
 bfe:	0f 93       	push	r16
 c00:	1f 93       	push	r17
 c02:	cf 93       	push	r28
 c04:	8c 01       	movw	r16, r24
	 	char ch;
	     uint8_t len = 0;
 c06:	c0 e0       	ldi	r28, 0x00	; 0
	 	while(1)
	 	{
	 		ch=Recive_Char();    //Receive a char
 c08:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <Recive_Char>
	 		if((ch==';')) //read till enter key is pressed
 c0c:	8b 33       	cpi	r24, 0x3B	; 59
 c0e:	29 f4       	brne	.+10     	; 0xc1a <Recive_Data+0x1c>
	 		{						     //once enter key is pressed null terminate the string
	 			ptr_string[len]=';';
 c10:	f8 01       	movw	r30, r16
 c12:	ec 0f       	add	r30, r28
 c14:	f1 1d       	adc	r31, r1
 c16:	80 83       	st	Z, r24
	             len++;
	         }
	 	}

	
}
 c18:	0c c0       	rjmp	.+24     	; 0xc32 <Recive_Data+0x34>
	 		if((ch==';')) //read till enter key is pressed
	 		{						     //once enter key is pressed null terminate the string
	 			ptr_string[len]=';';
	 			break;           //and break the loop
	 		}
	         else if((ch=='\b') && (len!=0))
 c1a:	88 30       	cpi	r24, 0x08	; 8
 c1c:	21 f4       	brne	.+8      	; 0xc26 <Recive_Data+0x28>
 c1e:	cc 23       	and	r28, r28
 c20:	11 f0       	breq	.+4      	; 0xc26 <Recive_Data+0x28>
	         {
	 		    len--;    //If backspace is pressed then decrement the index to remove the old char
 c22:	c1 50       	subi	r28, 0x01	; 1
 c24:	f1 cf       	rjmp	.-30     	; 0xc08 <Recive_Data+0xa>
	         }
	         else
	         {
	             ptr_string[len]=ch; //copy the char into string and increment the index
 c26:	f8 01       	movw	r30, r16
 c28:	ec 0f       	add	r30, r28
 c2a:	f1 1d       	adc	r31, r1
 c2c:	80 83       	st	Z, r24
	             len++;
 c2e:	cf 5f       	subi	r28, 0xFF	; 255
 c30:	eb cf       	rjmp	.-42     	; 0xc08 <Recive_Data+0xa>
	         }
	 	}

	
}
 c32:	cf 91       	pop	r28
 c34:	1f 91       	pop	r17
 c36:	0f 91       	pop	r16
 c38:	08 95       	ret

00000c3a <__divmodhi4>:
 c3a:	97 fb       	bst	r25, 7
 c3c:	07 2e       	mov	r0, r23
 c3e:	16 f4       	brtc	.+4      	; 0xc44 <__divmodhi4+0xa>
 c40:	00 94       	com	r0
 c42:	07 d0       	rcall	.+14     	; 0xc52 <__divmodhi4_neg1>
 c44:	77 fd       	sbrc	r23, 7
 c46:	09 d0       	rcall	.+18     	; 0xc5a <__divmodhi4_neg2>
 c48:	0e 94 31 06 	call	0xc62	; 0xc62 <__udivmodhi4>
 c4c:	07 fc       	sbrc	r0, 7
 c4e:	05 d0       	rcall	.+10     	; 0xc5a <__divmodhi4_neg2>
 c50:	3e f4       	brtc	.+14     	; 0xc60 <__divmodhi4_exit>

00000c52 <__divmodhi4_neg1>:
 c52:	90 95       	com	r25
 c54:	81 95       	neg	r24
 c56:	9f 4f       	sbci	r25, 0xFF	; 255
 c58:	08 95       	ret

00000c5a <__divmodhi4_neg2>:
 c5a:	70 95       	com	r23
 c5c:	61 95       	neg	r22
 c5e:	7f 4f       	sbci	r23, 0xFF	; 255

00000c60 <__divmodhi4_exit>:
 c60:	08 95       	ret

00000c62 <__udivmodhi4>:
 c62:	aa 1b       	sub	r26, r26
 c64:	bb 1b       	sub	r27, r27
 c66:	51 e1       	ldi	r21, 0x11	; 17
 c68:	07 c0       	rjmp	.+14     	; 0xc78 <__udivmodhi4_ep>

00000c6a <__udivmodhi4_loop>:
 c6a:	aa 1f       	adc	r26, r26
 c6c:	bb 1f       	adc	r27, r27
 c6e:	a6 17       	cp	r26, r22
 c70:	b7 07       	cpc	r27, r23
 c72:	10 f0       	brcs	.+4      	; 0xc78 <__udivmodhi4_ep>
 c74:	a6 1b       	sub	r26, r22
 c76:	b7 0b       	sbc	r27, r23

00000c78 <__udivmodhi4_ep>:
 c78:	88 1f       	adc	r24, r24
 c7a:	99 1f       	adc	r25, r25
 c7c:	5a 95       	dec	r21
 c7e:	a9 f7       	brne	.-22     	; 0xc6a <__udivmodhi4_loop>
 c80:	80 95       	com	r24
 c82:	90 95       	com	r25
 c84:	bc 01       	movw	r22, r24
 c86:	cd 01       	movw	r24, r26
 c88:	08 95       	ret

00000c8a <atoi>:
 c8a:	fc 01       	movw	r30, r24
 c8c:	88 27       	eor	r24, r24
 c8e:	99 27       	eor	r25, r25
 c90:	e8 94       	clt
 c92:	21 91       	ld	r18, Z+
 c94:	20 32       	cpi	r18, 0x20	; 32
 c96:	e9 f3       	breq	.-6      	; 0xc92 <atoi+0x8>
 c98:	29 30       	cpi	r18, 0x09	; 9
 c9a:	10 f0       	brcs	.+4      	; 0xca0 <atoi+0x16>
 c9c:	2e 30       	cpi	r18, 0x0E	; 14
 c9e:	c8 f3       	brcs	.-14     	; 0xc92 <atoi+0x8>
 ca0:	2b 32       	cpi	r18, 0x2B	; 43
 ca2:	41 f0       	breq	.+16     	; 0xcb4 <atoi+0x2a>
 ca4:	2d 32       	cpi	r18, 0x2D	; 45
 ca6:	39 f4       	brne	.+14     	; 0xcb6 <atoi+0x2c>
 ca8:	68 94       	set
 caa:	04 c0       	rjmp	.+8      	; 0xcb4 <atoi+0x2a>
 cac:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__mulhi_const_10>
 cb0:	82 0f       	add	r24, r18
 cb2:	91 1d       	adc	r25, r1
 cb4:	21 91       	ld	r18, Z+
 cb6:	20 53       	subi	r18, 0x30	; 48
 cb8:	2a 30       	cpi	r18, 0x0A	; 10
 cba:	c0 f3       	brcs	.-16     	; 0xcac <atoi+0x22>
 cbc:	1e f4       	brtc	.+6      	; 0xcc4 <atoi+0x3a>
 cbe:	90 95       	com	r25
 cc0:	81 95       	neg	r24
 cc2:	9f 4f       	sbci	r25, 0xFF	; 255
 cc4:	08 95       	ret

00000cc6 <__mulhi_const_10>:
 cc6:	7a e0       	ldi	r23, 0x0A	; 10
 cc8:	97 9f       	mul	r25, r23
 cca:	90 2d       	mov	r25, r0
 ccc:	87 9f       	mul	r24, r23
 cce:	80 2d       	mov	r24, r0
 cd0:	91 0d       	add	r25, r1
 cd2:	11 24       	eor	r1, r1
 cd4:	08 95       	ret

00000cd6 <_exit>:
 cd6:	f8 94       	cli

00000cd8 <__stop_program>:
 cd8:	ff cf       	rjmp	.-2      	; 0xcd8 <__stop_program>
